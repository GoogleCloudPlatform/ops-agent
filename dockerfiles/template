# ======================================
# Build Ops Agent for {tar_distro_name}
# ======================================

FROM {from_image} AS {target_name}-build-base
ARG OPENJDK_MAJOR_VERSION

{install_packages}

SHELL ["/bin/bash", "-c"]

# Install golang
ARG TARGETARCH
ARG GO_VERSION
ADD https://go.dev/dl/go${GO_VERSION}.linux-${TARGETARCH}.tar.gz /tmp/go${GO_VERSION}.tar.gz
RUN set -xe; \
    tar -xf /tmp/go${GO_VERSION}.tar.gz -C /usr/local
ENV PATH="${PATH}:/usr/local/go/bin"


FROM {target_name}-build-base AS {target_name}-build-otel
WORKDIR /work
# Download golang deps
COPY ./submodules/opentelemetry-operations-collector/go.mod ./submodules/opentelemetry-operations-collector/go.sum submodules/opentelemetry-operations-collector/
RUN cd submodules/opentelemetry-operations-collector && go mod download

COPY ./submodules/opentelemetry-java-contrib submodules/opentelemetry-java-contrib
# Install gradle. The first invocation of gradlew does this
RUN cd submodules/opentelemetry-java-contrib && ./gradlew --no-daemon -Djdk.lang.Process.launchMechanism=vfork tasks
COPY ./submodules/opentelemetry-operations-collector submodules/opentelemetry-operations-collector
COPY ./builds/otel.sh .
RUN \
    unset OTEL_TRACES_EXPORTER && \
    unset OTEL_EXPORTER_OTLP_TRACES_ENDPOINT && \
    unset OTEL_EXPORTER_OTLP_TRACES_PROTOCOL && \
    ./otel.sh /work/cache

FROM {target_name}-build-base AS {target_name}-build-fluent-bit
WORKDIR /work
COPY ./submodules/fluent-bit submodules/fluent-bit
COPY ./builds/fluent_bit.sh .
RUN ./fluent_bit.sh /work/cache/


FROM {target_name}-build-base AS {target_name}-build-systemd
WORKDIR /work
COPY ./systemd systemd
COPY ./builds/systemd.sh .
RUN ./systemd.sh /work/cache/


FROM {target_name}-build-base AS {target_name}-build-golang-base
WORKDIR /work
COPY go.mod go.sum ./
# Fetch dependencies
RUN go mod download
COPY confgenerator confgenerator
COPY apps apps
COPY internal internal


FROM {target_name}-build-golang-base AS {target_name}-build-diagnostics
WORKDIR /work
COPY cmd/google_cloud_ops_agent_diagnostics cmd/google_cloud_ops_agent_diagnostics
COPY ./builds/ops_agent_diagnostics.sh .
RUN ./ops_agent_diagnostics.sh /work/cache


FROM {target_name}-build-golang-base AS {target_name}-build-wrapper
WORKDIR /work
COPY cmd/agent_wrapper cmd/agent_wrapper
COPY ./builds/agent_wrapper.sh .
RUN ./agent_wrapper.sh /work/cache

FROM {target_name}-build-golang-base AS {target_name}-build-ops-agent-conf-generator
WORKDIR /work
COPY cmd/google_cloud_ops_agent_engine cmd/google_cloud_ops_agent_engine
COPY ./builds/conf_generator.sh .
RUN ./conf_generator.sh /work/cache

FROM {target_name}-build-golang-base AS {target_name}-build-ops-agent-uap-plugin
WORKDIR /work
COPY cmd/ops_agent_uap_plugin cmd/ops_agent_uap_plugin
COPY ./builds/ops_agent_plugin.sh .
RUN ./ops_agent_plugin.sh /work/cache

FROM {target_name}-build-golang-base AS {target_name}-build
WORKDIR /work
COPY . /work

# Run the build script once to build the ops agent engine to a cache
RUN mkdir -p /tmp/cache_run/golang && cp -r . /tmp/cache_run/golang
WORKDIR /tmp/cache_run/golang
{package_build} || true &> /dev/null
WORKDIR /work

COPY ./confgenerator/default-config.yaml /work/cache/etc/google-cloud-ops-agent/config.yaml
COPY --from={target_name}-build-otel /work/cache /work/cache
COPY --from={target_name}-build-fluent-bit /work/cache /work/cache
COPY --from={target_name}-build-systemd /work/cache /work/cache
COPY --from={target_name}-build-diagnostics /work/cache /work/cache
COPY --from={target_name}-build-wrapper /work/cache /work/cache
COPY --from={target_name}-build-ops-agent-uap-plugin /work/cache /work/cache

RUN mkdir -p /tmp/ops-agent-uap-plugin
RUN mkdir -p /tmp/ops-agent-uap-plugin/THIRD_PARTY_LICENSES
RUN mkdir -p /tmp/ops-agent-uap-plugin/subagents/opentelemetry-collector
RUN mkdir -p /tmp/ops-agent-uap-plugin/subagents/fluent-bit/bin
RUN mkdir -p /tmp/ops-agent-uap-plugin/libexec

COPY --from={target_name}-build-diagnostics /work/cache/opt/google-cloud-ops-agent/libexec/google_cloud_ops_agent_diagnostics /tmp/ops-agent-uap-plugin/libexec
COPY --from={target_name}-build-wrapper /work/cache/opt/google-cloud-ops-agent/libexec/google_cloud_ops_agent_wrapper /tmp/ops-agent-uap-plugin/libexec
COPY --from={target_name}-build-ops-agent-conf-generator /work/cache/opt/google-cloud-ops-agent/libexec/google_cloud_ops_agent_engine /tmp/ops-agent-uap-plugin/libexec
COPY --from={target_name}-build-ops-agent-uap-plugin /work/cache/opt/google-cloud-ops-agent/plugin /tmp/ops-agent-uap-plugin
COPY --from={target_name}-build-otel /work/cache/opt/google-cloud-ops-agent/subagents/opentelemetry-collector/otelopscol /tmp/ops-agent-uap-plugin/subagents/opentelemetry-collector
COPY --from={target_name}-build-fluent-bit /work/cache/opt/google-cloud-ops-agent/subagents/fluent-bit/bin/fluent-bit /tmp/ops-agent-uap-plugin/subagents/fluent-bit/bin

RUN touch /tmp/ops-agent-uap-plugin/THIRD_PARTY_LICENSES/text1.txt
RUN echo "non empty license file" > /tmp/ops-agent-uap-plugin/THIRD_PARTY_LICENSES/text1.txt
WORKDIR /tmp/ops-agent-uap-plugin
RUN tar -cvzf ops-agent-plugin.tar.gz *
WORKDIR /work

{package_build}

COPY cmd/ops_agent_uap_plugin cmd/ops_agent_uap_plugin
COPY ./builds/ops_agent_plugin.sh .
RUN ./ops_agent_plugin.sh /work/cache/
RUN ./pkg/plugin/build.sh /work/cache {target_name}


FROM scratch AS {target_name}
COPY --from={target_name}-build /tmp/google-cloud-ops-agent.tgz /google-cloud-ops-agent-{tar_distro_name}.tgz
COPY --from={target_name}-build /google-cloud-ops-agent*.{package_extension} /
COPY --from={target_name}-build /google-cloud-ops-agent-plugin*.tar.gz /