# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This file was generated by dockerfiles/compile.go
# To re-generate, run from the repository root: go run ./dockerfiles

# Build as DOCKER_BUILDKIT=1 docker build -o /tmp/out .
# or DOCKER_BUILDKIT=1 docker build -o /tmp/out . --target=bullseye
# Generated tarball(s) will end up in /tmp/out


ARG CMAKE_VERSION=3.25.2
ARG OPENJDK_MAJOR_VERSION=17
ARG OPENJDK_FULL_VERSION=17.0.8
ARG OPENJDK_VERSION_SUFFIX=7
ARG GO_VERSION=1.24.3

# Manually prepare a recent enough version of CMake.
# This should be used on platforms where the default package manager
# does not provide a recent enough version (we require >= 3.12).
FROM alpine:latest AS cmake-amd64-recent
ARG CMAKE_VERSION

ENV hash=4d98de8d605da676e71a889dd94f80c76abb377fade2f21e3510e62ece1e1ada
ADD https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.sh \
    /cmake.sh

FROM alpine:latest AS cmake-arm64-recent
ARG CMAKE_VERSION

ENV hash=73a35cab2174a3eb8f35083d55c80871185dc3808f3dae3558cd5fbdb29a4614
ADD https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-aarch64.sh \
    /cmake.sh

FROM cmake-${TARGETARCH}-recent AS cmake-install-recent
RUN set -xe; (echo "$hash  /cmake.sh" | sha256sum -c)


# Manually prepare OpenJDK for the current architecture.
FROM alpine:latest AS openjdk-amd64
ARG OPENJDK_MAJOR_VERSION
ARG OPENJDK_FULL_VERSION
ARG OPENJDK_VERSION_SUFFIX

ENV hash=aa5fc7d388fe544e5d85902e68399d5299e931f9b280d358a3cbee218d6017b0
ADD https://github.com/adoptium/temurin${OPENJDK_MAJOR_VERSION}-binaries/releases/download/jdk-${OPENJDK_FULL_VERSION}%2B${OPENJDK_VERSION_SUFFIX}/OpenJDK${OPENJDK_MAJOR_VERSION}U-jdk_x64_linux_hotspot_${OPENJDK_FULL_VERSION}_${OPENJDK_VERSION_SUFFIX}.tar.gz \
    /tmp/OpenJDK${OPENJDK_MAJOR_VERSION}U.tar.gz

FROM alpine:latest AS openjdk-arm64
ARG OPENJDK_MAJOR_VERSION
ARG OPENJDK_FULL_VERSION
ARG OPENJDK_VERSION_SUFFIX

ENV hash=c43688163cfdcb1a6e6fe202cc06a51891df746b954c55dbd01430e7d7326d00
ADD https://github.com/adoptium/temurin${OPENJDK_MAJOR_VERSION}-binaries/releases/download/jdk-${OPENJDK_FULL_VERSION}%2B${OPENJDK_VERSION_SUFFIX}/OpenJDK${OPENJDK_MAJOR_VERSION}U-jdk_aarch64_linux_hotspot_${OPENJDK_FULL_VERSION}_${OPENJDK_VERSION_SUFFIX}.tar.gz \
    /tmp/OpenJDK${OPENJDK_MAJOR_VERSION}U.tar.gz

FROM openjdk-${TARGETARCH} as openjdk-install
ARG OPENJDK_MAJOR_VERSION
RUN set -xe; (echo "$hash  /tmp/OpenJDK${OPENJDK_MAJOR_VERSION}U.tar.gz" | sha256sum -c)
RUN set -xe; \
    mkdir -p /usr/local/java-${OPENJDK_MAJOR_VERSION}-openjdk && \
    tar -xf /tmp/OpenJDK${OPENJDK_MAJOR_VERSION}U.tar.gz -C /usr/local/java-${OPENJDK_MAJOR_VERSION}-openjdk --strip-components=1


# ======================================
# Build Ops Agent for centos-8
# ======================================

FROM rockylinux:8 AS centos8-build-base
ARG OPENJDK_MAJOR_VERSION

RUN set -x; yum -y update && \
		dnf -y install 'dnf-command(config-manager)' && \
		yum config-manager --set-enabled powertools && \
		yum -y install git systemd \
		autoconf libtool libcurl-devel libtool-ltdl-devel openssl-devel yajl-devel \
		gcc gcc-c++ make cmake bison flex file systemd-devel zlib-devel gtest-devel rpm-build systemd-rpm-macros java-${OPENJDK_MAJOR_VERSION}-openjdk-devel \
		expect rpm-sign zip tzdata-java

SHELL ["/bin/bash", "-c"]

# Install golang
ARG TARGETARCH
ARG GO_VERSION
ADD https://go.dev/dl/go${GO_VERSION}.linux-${TARGETARCH}.tar.gz /tmp/go${GO_VERSION}.tar.gz
RUN set -xe; \
    tar -xf /tmp/go${GO_VERSION}.tar.gz -C /usr/local
ENV PATH="${PATH}:/usr/local/go/bin"


FROM centos8-build-base AS centos8-build-otel
WORKDIR /work
# Download golang deps
COPY ./submodules/opentelemetry-operations-collector/go.mod ./submodules/opentelemetry-operations-collector/go.sum submodules/opentelemetry-operations-collector/
RUN cd submodules/opentelemetry-operations-collector && go mod download

COPY ./submodules/opentelemetry-java-contrib submodules/opentelemetry-java-contrib
# Install gradle. The first invocation of gradlew does this
RUN cd submodules/opentelemetry-java-contrib && ./gradlew --no-daemon -Djdk.lang.Process.launchMechanism=vfork tasks
COPY ./submodules/opentelemetry-operations-collector submodules/opentelemetry-operations-collector
COPY ./builds/otel.sh .
RUN \
    unset OTEL_TRACES_EXPORTER && \
    unset OTEL_EXPORTER_OTLP_TRACES_ENDPOINT && \
    unset OTEL_EXPORTER_OTLP_TRACES_PROTOCOL && \
    ./otel.sh /work/cache/

FROM centos8-build-base AS centos8-build-fluent-bit
WORKDIR /work
COPY ./submodules/fluent-bit submodules/fluent-bit
COPY ./builds/fluent_bit.sh .
RUN ./fluent_bit.sh /work/cache/


FROM centos8-build-base AS centos8-build-systemd
WORKDIR /work
COPY ./systemd systemd
COPY ./builds/systemd.sh .
RUN ./systemd.sh /work/cache/


FROM centos8-build-base AS centos8-build-golang-base
WORKDIR /work
COPY go.mod go.sum ./
# Fetch dependencies
RUN go mod download
COPY confgenerator confgenerator
COPY apps apps
COPY internal internal


FROM centos8-build-golang-base AS centos8-build-wrapper
WORKDIR /work
COPY cmd/agent_wrapper cmd/agent_wrapper
COPY ./builds/agent_wrapper.sh .
RUN ./agent_wrapper.sh /work/cache/


FROM centos8-build-golang-base AS centos8-build
WORKDIR /work
COPY . /work

# Run the build script once to build the ops agent engine to a cache
RUN mkdir -p /tmp/cache_run/golang && cp -r . /tmp/cache_run/golang
WORKDIR /tmp/cache_run/golang
RUN ./pkg/rpm/build.sh &> /dev/null || true
WORKDIR /work

COPY ./confgenerator/default-config.yaml /work/cache/etc/google-cloud-ops-agent/config.yaml
COPY --from=centos8-build-otel /work/cache /work/cache
COPY --from=centos8-build-fluent-bit /work/cache /work/cache
COPY --from=centos8-build-systemd /work/cache /work/cache
COPY --from=centos8-build-wrapper /work/cache /work/cache
RUN ./pkg/rpm/build.sh

COPY cmd/ops_agent_uap_plugin cmd/ops_agent_uap_plugin
COPY ./builds/ops_agent_plugin.sh .
RUN ./ops_agent_plugin.sh /work/cache/
RUN ./pkg/plugin/build.sh /work/cache centos8


FROM scratch AS centos8
COPY --from=centos8-build /tmp/google-cloud-ops-agent.tgz /google-cloud-ops-agent-centos-8.tgz
COPY --from=centos8-build /google-cloud-ops-agent*.rpm /
COPY --from=centos8-build /google-cloud-ops-agent-plugin*.tar.gz /

# ======================================
# Build Ops Agent for rockylinux-9
# ======================================

FROM rockylinux:9 AS rockylinux9-build-base
ARG OPENJDK_MAJOR_VERSION

RUN set -x; dnf -y update && \
		dnf -y install 'dnf-command(config-manager)' && \
		dnf config-manager --set-enabled crb && \
		dnf install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm && \
		dnf -y install git systemd \
		autoconf libtool libcurl-devel libtool-ltdl-devel openssl-devel yajl-devel \
		gcc gcc-c++ make cmake bison flex file systemd-devel zlib-devel gtest-devel rpm-build systemd-rpm-macros java-${OPENJDK_MAJOR_VERSION}-openjdk-devel \
		expect rpm-sign zip tzdata-java

		ENV JAVA_HOME /usr/lib/jvm/java-${OPENJDK_MAJOR_VERSION}-openjdk/

SHELL ["/bin/bash", "-c"]

# Install golang
ARG TARGETARCH
ARG GO_VERSION
ADD https://go.dev/dl/go${GO_VERSION}.linux-${TARGETARCH}.tar.gz /tmp/go${GO_VERSION}.tar.gz
RUN set -xe; \
    tar -xf /tmp/go${GO_VERSION}.tar.gz -C /usr/local
ENV PATH="${PATH}:/usr/local/go/bin"


FROM rockylinux9-build-base AS rockylinux9-build-otel
WORKDIR /work
# Download golang deps
COPY ./submodules/opentelemetry-operations-collector/go.mod ./submodules/opentelemetry-operations-collector/go.sum submodules/opentelemetry-operations-collector/
RUN cd submodules/opentelemetry-operations-collector && go mod download

COPY ./submodules/opentelemetry-java-contrib submodules/opentelemetry-java-contrib
# Install gradle. The first invocation of gradlew does this
RUN cd submodules/opentelemetry-java-contrib && ./gradlew --no-daemon -Djdk.lang.Process.launchMechanism=vfork tasks
COPY ./submodules/opentelemetry-operations-collector submodules/opentelemetry-operations-collector
COPY ./builds/otel.sh .
RUN \
    unset OTEL_TRACES_EXPORTER && \
    unset OTEL_EXPORTER_OTLP_TRACES_ENDPOINT && \
    unset OTEL_EXPORTER_OTLP_TRACES_PROTOCOL && \
    ./otel.sh /work/cache/

FROM rockylinux9-build-base AS rockylinux9-build-fluent-bit
WORKDIR /work
COPY ./submodules/fluent-bit submodules/fluent-bit
COPY ./builds/fluent_bit.sh .
RUN ./fluent_bit.sh /work/cache/


FROM rockylinux9-build-base AS rockylinux9-build-systemd
WORKDIR /work
COPY ./systemd systemd
COPY ./builds/systemd.sh .
RUN ./systemd.sh /work/cache/


FROM rockylinux9-build-base AS rockylinux9-build-golang-base
WORKDIR /work
COPY go.mod go.sum ./
# Fetch dependencies
RUN go mod download
COPY confgenerator confgenerator
COPY apps apps
COPY internal internal


FROM rockylinux9-build-golang-base AS rockylinux9-build-wrapper
WORKDIR /work
COPY cmd/agent_wrapper cmd/agent_wrapper
COPY ./builds/agent_wrapper.sh .
RUN ./agent_wrapper.sh /work/cache/


FROM rockylinux9-build-golang-base AS rockylinux9-build
WORKDIR /work
COPY . /work

# Run the build script once to build the ops agent engine to a cache
RUN mkdir -p /tmp/cache_run/golang && cp -r . /tmp/cache_run/golang
WORKDIR /tmp/cache_run/golang
RUN ./pkg/rpm/build.sh &> /dev/null || true
WORKDIR /work

COPY ./confgenerator/default-config.yaml /work/cache/etc/google-cloud-ops-agent/config.yaml
COPY --from=rockylinux9-build-otel /work/cache /work/cache
COPY --from=rockylinux9-build-fluent-bit /work/cache /work/cache
COPY --from=rockylinux9-build-systemd /work/cache /work/cache
COPY --from=rockylinux9-build-wrapper /work/cache /work/cache
RUN ./pkg/rpm/build.sh

COPY cmd/ops_agent_uap_plugin cmd/ops_agent_uap_plugin
COPY ./builds/ops_agent_plugin.sh .
RUN ./ops_agent_plugin.sh /work/cache/
RUN ./pkg/plugin/build.sh /work/cache rockylinux9


FROM scratch AS rockylinux9
COPY --from=rockylinux9-build /tmp/google-cloud-ops-agent.tgz /google-cloud-ops-agent-rockylinux-9.tgz
COPY --from=rockylinux9-build /google-cloud-ops-agent*.rpm /
COPY --from=rockylinux9-build /google-cloud-ops-agent-plugin*.tar.gz /

# ======================================
# Build Ops Agent for debian-bookworm
# ======================================

FROM debian:bookworm AS bookworm-build-base
ARG OPENJDK_MAJOR_VERSION

RUN set -x; apt-get update && \
		DEBIAN_FRONTEND=noninteractive apt-get -y install git systemd \
		autoconf libtool libcurl4-openssl-dev libltdl-dev libssl-dev libyajl-dev \
		build-essential cmake bison flex file libsystemd-dev \
		devscripts cdbs pkg-config openjdk-${OPENJDK_MAJOR_VERSION}-jdk zip

SHELL ["/bin/bash", "-c"]

# Install golang
ARG TARGETARCH
ARG GO_VERSION
ADD https://go.dev/dl/go${GO_VERSION}.linux-${TARGETARCH}.tar.gz /tmp/go${GO_VERSION}.tar.gz
RUN set -xe; \
    tar -xf /tmp/go${GO_VERSION}.tar.gz -C /usr/local
ENV PATH="${PATH}:/usr/local/go/bin"


FROM bookworm-build-base AS bookworm-build-otel
WORKDIR /work
# Download golang deps
COPY ./submodules/opentelemetry-operations-collector/go.mod ./submodules/opentelemetry-operations-collector/go.sum submodules/opentelemetry-operations-collector/
RUN cd submodules/opentelemetry-operations-collector && go mod download

COPY ./submodules/opentelemetry-java-contrib submodules/opentelemetry-java-contrib
# Install gradle. The first invocation of gradlew does this
RUN cd submodules/opentelemetry-java-contrib && ./gradlew --no-daemon -Djdk.lang.Process.launchMechanism=vfork tasks
COPY ./submodules/opentelemetry-operations-collector submodules/opentelemetry-operations-collector
COPY ./builds/otel.sh .
RUN \
    unset OTEL_TRACES_EXPORTER && \
    unset OTEL_EXPORTER_OTLP_TRACES_ENDPOINT && \
    unset OTEL_EXPORTER_OTLP_TRACES_PROTOCOL && \
    ./otel.sh /work/cache/

FROM bookworm-build-base AS bookworm-build-fluent-bit
WORKDIR /work
COPY ./submodules/fluent-bit submodules/fluent-bit
COPY ./builds/fluent_bit.sh .
RUN ./fluent_bit.sh /work/cache/


FROM bookworm-build-base AS bookworm-build-systemd
WORKDIR /work
COPY ./systemd systemd
COPY ./builds/systemd.sh .
RUN ./systemd.sh /work/cache/


FROM bookworm-build-base AS bookworm-build-golang-base
WORKDIR /work
COPY go.mod go.sum ./
# Fetch dependencies
RUN go mod download
COPY confgenerator confgenerator
COPY apps apps
COPY internal internal


FROM bookworm-build-golang-base AS bookworm-build-wrapper
WORKDIR /work
COPY cmd/agent_wrapper cmd/agent_wrapper
COPY ./builds/agent_wrapper.sh .
RUN ./agent_wrapper.sh /work/cache/


FROM bookworm-build-golang-base AS bookworm-build
WORKDIR /work
COPY . /work

# Run the build script once to build the ops agent engine to a cache
RUN mkdir -p /tmp/cache_run/golang && cp -r . /tmp/cache_run/golang
WORKDIR /tmp/cache_run/golang
RUN ./pkg/deb/build.sh &> /dev/null || true
WORKDIR /work

COPY ./confgenerator/default-config.yaml /work/cache/etc/google-cloud-ops-agent/config.yaml
COPY --from=bookworm-build-otel /work/cache /work/cache
COPY --from=bookworm-build-fluent-bit /work/cache /work/cache
COPY --from=bookworm-build-systemd /work/cache /work/cache
COPY --from=bookworm-build-wrapper /work/cache /work/cache
RUN ./pkg/deb/build.sh

COPY cmd/ops_agent_uap_plugin cmd/ops_agent_uap_plugin
COPY ./builds/ops_agent_plugin.sh .
RUN ./ops_agent_plugin.sh /work/cache/
RUN ./pkg/plugin/build.sh /work/cache bookworm


FROM scratch AS bookworm
COPY --from=bookworm-build /tmp/google-cloud-ops-agent.tgz /google-cloud-ops-agent-debian-bookworm.tgz
COPY --from=bookworm-build /google-cloud-ops-agent*.deb /
COPY --from=bookworm-build /google-cloud-ops-agent-plugin*.tar.gz /

# ======================================
# Build Ops Agent for debian-bullseye
# ======================================

FROM debian:bullseye AS bullseye-build-base
ARG OPENJDK_MAJOR_VERSION

RUN set -x; apt-get update && \
		DEBIAN_FRONTEND=noninteractive apt-get -y install git systemd \
		autoconf libtool libcurl4-openssl-dev libltdl-dev libssl-dev libyajl-dev \
		build-essential cmake bison flex file libsystemd-dev \
		devscripts cdbs pkg-config openjdk-${OPENJDK_MAJOR_VERSION}-jdk zip

SHELL ["/bin/bash", "-c"]

# Install golang
ARG TARGETARCH
ARG GO_VERSION
ADD https://go.dev/dl/go${GO_VERSION}.linux-${TARGETARCH}.tar.gz /tmp/go${GO_VERSION}.tar.gz
RUN set -xe; \
    tar -xf /tmp/go${GO_VERSION}.tar.gz -C /usr/local
ENV PATH="${PATH}:/usr/local/go/bin"


FROM bullseye-build-base AS bullseye-build-otel
WORKDIR /work
# Download golang deps
COPY ./submodules/opentelemetry-operations-collector/go.mod ./submodules/opentelemetry-operations-collector/go.sum submodules/opentelemetry-operations-collector/
RUN cd submodules/opentelemetry-operations-collector && go mod download

COPY ./submodules/opentelemetry-java-contrib submodules/opentelemetry-java-contrib
# Install gradle. The first invocation of gradlew does this
RUN cd submodules/opentelemetry-java-contrib && ./gradlew --no-daemon -Djdk.lang.Process.launchMechanism=vfork tasks
COPY ./submodules/opentelemetry-operations-collector submodules/opentelemetry-operations-collector
COPY ./builds/otel.sh .
RUN \
    unset OTEL_TRACES_EXPORTER && \
    unset OTEL_EXPORTER_OTLP_TRACES_ENDPOINT && \
    unset OTEL_EXPORTER_OTLP_TRACES_PROTOCOL && \
    ./otel.sh /work/cache/

FROM bullseye-build-base AS bullseye-build-fluent-bit
WORKDIR /work
COPY ./submodules/fluent-bit submodules/fluent-bit
COPY ./builds/fluent_bit.sh .
RUN ./fluent_bit.sh /work/cache/


FROM bullseye-build-base AS bullseye-build-systemd
WORKDIR /work
COPY ./systemd systemd
COPY ./builds/systemd.sh .
RUN ./systemd.sh /work/cache/


FROM bullseye-build-base AS bullseye-build-golang-base
WORKDIR /work
COPY go.mod go.sum ./
# Fetch dependencies
RUN go mod download
COPY confgenerator confgenerator
COPY apps apps
COPY internal internal


FROM bullseye-build-golang-base AS bullseye-build-wrapper
WORKDIR /work
COPY cmd/agent_wrapper cmd/agent_wrapper
COPY ./builds/agent_wrapper.sh .
RUN ./agent_wrapper.sh /work/cache/


FROM bullseye-build-golang-base AS bullseye-build
WORKDIR /work
COPY . /work

# Run the build script once to build the ops agent engine to a cache
RUN mkdir -p /tmp/cache_run/golang && cp -r . /tmp/cache_run/golang
WORKDIR /tmp/cache_run/golang
RUN ./pkg/deb/build.sh &> /dev/null || true
WORKDIR /work

COPY ./confgenerator/default-config.yaml /work/cache/etc/google-cloud-ops-agent/config.yaml
COPY --from=bullseye-build-otel /work/cache /work/cache
COPY --from=bullseye-build-fluent-bit /work/cache /work/cache
COPY --from=bullseye-build-systemd /work/cache /work/cache
COPY --from=bullseye-build-wrapper /work/cache /work/cache
RUN ./pkg/deb/build.sh

COPY cmd/ops_agent_uap_plugin cmd/ops_agent_uap_plugin
COPY ./builds/ops_agent_plugin.sh .
RUN ./ops_agent_plugin.sh /work/cache/
RUN ./pkg/plugin/build.sh /work/cache bullseye


FROM scratch AS bullseye
COPY --from=bullseye-build /tmp/google-cloud-ops-agent.tgz /google-cloud-ops-agent-debian-bullseye.tgz
COPY --from=bullseye-build /google-cloud-ops-agent*.deb /
COPY --from=bullseye-build /google-cloud-ops-agent-plugin*.tar.gz /

# ======================================
# Build Ops Agent for sles-12
# ======================================

FROM opensuse/archive:42.3 AS sles12-build-base
ARG OPENJDK_MAJOR_VERSION

# Add home:odassau repo to install 3.4 bison
ADD https://download.opensuse.org/repositories/home:/odassau/SLE_12_SP4/home:odassau.repo /tmp/home:odassau.repo
RUN set -x; \
		# The 'OSS Update' repo signature is no longer valid, so verify the checksum instead.
		zypper --no-gpg-check refresh 'OSS Update' && \
		(echo '6dd0b89202b19dae873434c5f2ba01164205071581fc02365712be801e304b3b /var/cache/zypp/raw/OSS Update/repodata/repomd.xml' | sha256sum --check) && \
		zypper -n install git systemd autoconf automake flex libtool libcurl-devel libopenssl-devel libyajl-devel gcc gcc-c++ zlib-devel rpm-build expect cmake systemd-devel systemd-rpm-macros unzip zip && \
		# Remove expired root certificate.
		mv /var/lib/ca-certificates/pem/DST_Root_CA_X3.pem /etc/pki/trust/blacklist/ && \
		update-ca-certificates && \
		# Add home:odassau repo to install 3.4 bison
		zypper addrepo /tmp/home:odassau.repo && \
		zypper -n --gpg-auto-import-keys refresh && \
		zypper -n update && \
		# zypper/libcurl has a use-after-free bug that causes segfaults for particular download sequences.
		# If this bug happens to trigger in the future, adding a "zypper -n download" of a subset of the packages can avoid the segfault.
		zypper -n install 'bison>3' && \
		# Allow fluent-bit to find systemd
		ln -fs /usr/lib/systemd /lib/systemd
COPY --from=openjdk-install /usr/local/java-${OPENJDK_MAJOR_VERSION}-openjdk/ /usr/local/java-${OPENJDK_MAJOR_VERSION}-openjdk
ENV JAVA_HOME /usr/local/java-${OPENJDK_MAJOR_VERSION}-openjdk/
COPY --from=cmake-install-recent /cmake.sh /cmake.sh
RUN set -x; bash /cmake.sh --skip-license --prefix=/usr/local


SHELL ["/bin/bash", "-c"]

# Install golang
ARG TARGETARCH
ARG GO_VERSION
ADD https://go.dev/dl/go${GO_VERSION}.linux-${TARGETARCH}.tar.gz /tmp/go${GO_VERSION}.tar.gz
RUN set -xe; \
    tar -xf /tmp/go${GO_VERSION}.tar.gz -C /usr/local
ENV PATH="${PATH}:/usr/local/go/bin"


FROM sles12-build-base AS sles12-build-otel
WORKDIR /work
# Download golang deps
COPY ./submodules/opentelemetry-operations-collector/go.mod ./submodules/opentelemetry-operations-collector/go.sum submodules/opentelemetry-operations-collector/
RUN cd submodules/opentelemetry-operations-collector && go mod download

COPY ./submodules/opentelemetry-java-contrib submodules/opentelemetry-java-contrib
# Install gradle. The first invocation of gradlew does this
RUN cd submodules/opentelemetry-java-contrib && ./gradlew --no-daemon -Djdk.lang.Process.launchMechanism=vfork tasks
COPY ./submodules/opentelemetry-operations-collector submodules/opentelemetry-operations-collector
COPY ./builds/otel.sh .
RUN \
    unset OTEL_TRACES_EXPORTER && \
    unset OTEL_EXPORTER_OTLP_TRACES_ENDPOINT && \
    unset OTEL_EXPORTER_OTLP_TRACES_PROTOCOL && \
    ./otel.sh /work/cache/

FROM sles12-build-base AS sles12-build-fluent-bit
WORKDIR /work
COPY ./submodules/fluent-bit submodules/fluent-bit
COPY ./builds/fluent_bit.sh .
RUN ./fluent_bit.sh /work/cache/


FROM sles12-build-base AS sles12-build-systemd
WORKDIR /work
COPY ./systemd systemd
COPY ./builds/systemd.sh .
RUN ./systemd.sh /work/cache/


FROM sles12-build-base AS sles12-build-golang-base
WORKDIR /work
COPY go.mod go.sum ./
# Fetch dependencies
RUN go mod download
COPY confgenerator confgenerator
COPY apps apps
COPY internal internal


FROM sles12-build-golang-base AS sles12-build-wrapper
WORKDIR /work
COPY cmd/agent_wrapper cmd/agent_wrapper
COPY ./builds/agent_wrapper.sh .
RUN ./agent_wrapper.sh /work/cache/


FROM sles12-build-golang-base AS sles12-build
WORKDIR /work
COPY . /work

# Run the build script once to build the ops agent engine to a cache
RUN mkdir -p /tmp/cache_run/golang && cp -r . /tmp/cache_run/golang
WORKDIR /tmp/cache_run/golang
RUN ./pkg/rpm/build.sh &> /dev/null || true
WORKDIR /work

COPY ./confgenerator/default-config.yaml /work/cache/etc/google-cloud-ops-agent/config.yaml
COPY --from=sles12-build-otel /work/cache /work/cache
COPY --from=sles12-build-fluent-bit /work/cache /work/cache
COPY --from=sles12-build-systemd /work/cache /work/cache
COPY --from=sles12-build-wrapper /work/cache /work/cache
RUN ./pkg/rpm/build.sh

COPY cmd/ops_agent_uap_plugin cmd/ops_agent_uap_plugin
COPY ./builds/ops_agent_plugin.sh .
RUN ./ops_agent_plugin.sh /work/cache/
RUN ./pkg/plugin/build.sh /work/cache sles12


FROM scratch AS sles12
COPY --from=sles12-build /tmp/google-cloud-ops-agent.tgz /google-cloud-ops-agent-sles-12.tgz
COPY --from=sles12-build /google-cloud-ops-agent*.rpm /
COPY --from=sles12-build /google-cloud-ops-agent-plugin*.tar.gz /

# ======================================
# Build Ops Agent for sles-15
# ======================================

FROM opensuse/leap:15.1 AS sles15-build-base
ARG OPENJDK_MAJOR_VERSION

RUN set -x; zypper -n refresh && \
		zypper -n update && \
		zypper -n install git systemd autoconf automake flex libtool libcurl-devel libopenssl-devel libyajl-devel gcc gcc-c++ zlib-devel rpm-build expect cmake systemd-devel systemd-rpm-macros unzip zip 'bison>3'
# Allow fluent-bit to find systemd
RUN ln -fs /usr/lib/systemd /lib/systemd
COPY --from=openjdk-install /usr/local/java-${OPENJDK_MAJOR_VERSION}-openjdk/ /usr/local/java-${OPENJDK_MAJOR_VERSION}-openjdk
ENV JAVA_HOME /usr/local/java-${OPENJDK_MAJOR_VERSION}-openjdk/
COPY --from=cmake-install-recent /cmake.sh /cmake.sh
RUN set -x; bash /cmake.sh --skip-license --prefix=/usr/local


SHELL ["/bin/bash", "-c"]

# Install golang
ARG TARGETARCH
ARG GO_VERSION
ADD https://go.dev/dl/go${GO_VERSION}.linux-${TARGETARCH}.tar.gz /tmp/go${GO_VERSION}.tar.gz
RUN set -xe; \
    tar -xf /tmp/go${GO_VERSION}.tar.gz -C /usr/local
ENV PATH="${PATH}:/usr/local/go/bin"


FROM sles15-build-base AS sles15-build-otel
WORKDIR /work
# Download golang deps
COPY ./submodules/opentelemetry-operations-collector/go.mod ./submodules/opentelemetry-operations-collector/go.sum submodules/opentelemetry-operations-collector/
RUN cd submodules/opentelemetry-operations-collector && go mod download

COPY ./submodules/opentelemetry-java-contrib submodules/opentelemetry-java-contrib
# Install gradle. The first invocation of gradlew does this
RUN cd submodules/opentelemetry-java-contrib && ./gradlew --no-daemon -Djdk.lang.Process.launchMechanism=vfork tasks
COPY ./submodules/opentelemetry-operations-collector submodules/opentelemetry-operations-collector
COPY ./builds/otel.sh .
RUN \
    unset OTEL_TRACES_EXPORTER && \
    unset OTEL_EXPORTER_OTLP_TRACES_ENDPOINT && \
    unset OTEL_EXPORTER_OTLP_TRACES_PROTOCOL && \
    ./otel.sh /work/cache/

FROM sles15-build-base AS sles15-build-fluent-bit
WORKDIR /work
COPY ./submodules/fluent-bit submodules/fluent-bit
COPY ./builds/fluent_bit.sh .
RUN ./fluent_bit.sh /work/cache/


FROM sles15-build-base AS sles15-build-systemd
WORKDIR /work
COPY ./systemd systemd
COPY ./builds/systemd.sh .
RUN ./systemd.sh /work/cache/


FROM sles15-build-base AS sles15-build-golang-base
WORKDIR /work
COPY go.mod go.sum ./
# Fetch dependencies
RUN go mod download
COPY confgenerator confgenerator
COPY apps apps
COPY internal internal


FROM sles15-build-golang-base AS sles15-build-wrapper
WORKDIR /work
COPY cmd/agent_wrapper cmd/agent_wrapper
COPY ./builds/agent_wrapper.sh .
RUN ./agent_wrapper.sh /work/cache/


FROM sles15-build-golang-base AS sles15-build
WORKDIR /work
COPY . /work

# Run the build script once to build the ops agent engine to a cache
RUN mkdir -p /tmp/cache_run/golang && cp -r . /tmp/cache_run/golang
WORKDIR /tmp/cache_run/golang
RUN ./pkg/rpm/build.sh &> /dev/null || true
WORKDIR /work

COPY ./confgenerator/default-config.yaml /work/cache/etc/google-cloud-ops-agent/config.yaml
COPY --from=sles15-build-otel /work/cache /work/cache
COPY --from=sles15-build-fluent-bit /work/cache /work/cache
COPY --from=sles15-build-systemd /work/cache /work/cache
COPY --from=sles15-build-wrapper /work/cache /work/cache
RUN ./pkg/rpm/build.sh

COPY cmd/ops_agent_uap_plugin cmd/ops_agent_uap_plugin
COPY ./builds/ops_agent_plugin.sh .
RUN ./ops_agent_plugin.sh /work/cache/
RUN ./pkg/plugin/build.sh /work/cache sles15


FROM scratch AS sles15
COPY --from=sles15-build /tmp/google-cloud-ops-agent.tgz /google-cloud-ops-agent-sles-15.tgz
COPY --from=sles15-build /google-cloud-ops-agent*.rpm /
COPY --from=sles15-build /google-cloud-ops-agent-plugin*.tar.gz /

# ======================================
# Build Ops Agent for ubuntu-jammy
# ======================================

FROM ubuntu:jammy AS jammy-build-base
ARG OPENJDK_MAJOR_VERSION

RUN set -x; apt-get update && \
		DEBIAN_FRONTEND=noninteractive apt-get -y install git systemd \
		autoconf libtool libcurl4-openssl-dev libltdl-dev libssl-dev libyajl-dev \
		build-essential cmake bison flex file libsystemd-dev tzdata \
		devscripts cdbs pkg-config openjdk-${OPENJDK_MAJOR_VERSION}-jdk zip

SHELL ["/bin/bash", "-c"]

# Install golang
ARG TARGETARCH
ARG GO_VERSION
ADD https://go.dev/dl/go${GO_VERSION}.linux-${TARGETARCH}.tar.gz /tmp/go${GO_VERSION}.tar.gz
RUN set -xe; \
    tar -xf /tmp/go${GO_VERSION}.tar.gz -C /usr/local
ENV PATH="${PATH}:/usr/local/go/bin"


FROM jammy-build-base AS jammy-build-otel
WORKDIR /work
# Download golang deps
COPY ./submodules/opentelemetry-operations-collector/go.mod ./submodules/opentelemetry-operations-collector/go.sum submodules/opentelemetry-operations-collector/
RUN cd submodules/opentelemetry-operations-collector && go mod download

COPY ./submodules/opentelemetry-java-contrib submodules/opentelemetry-java-contrib
# Install gradle. The first invocation of gradlew does this
RUN cd submodules/opentelemetry-java-contrib && ./gradlew --no-daemon -Djdk.lang.Process.launchMechanism=vfork tasks
COPY ./submodules/opentelemetry-operations-collector submodules/opentelemetry-operations-collector
COPY ./builds/otel.sh .
RUN \
    unset OTEL_TRACES_EXPORTER && \
    unset OTEL_EXPORTER_OTLP_TRACES_ENDPOINT && \
    unset OTEL_EXPORTER_OTLP_TRACES_PROTOCOL && \
    ./otel.sh /work/cache/

FROM jammy-build-base AS jammy-build-fluent-bit
WORKDIR /work
COPY ./submodules/fluent-bit submodules/fluent-bit
COPY ./builds/fluent_bit.sh .
RUN ./fluent_bit.sh /work/cache/


FROM jammy-build-base AS jammy-build-systemd
WORKDIR /work
COPY ./systemd systemd
COPY ./builds/systemd.sh .
RUN ./systemd.sh /work/cache/


FROM jammy-build-base AS jammy-build-golang-base
WORKDIR /work
COPY go.mod go.sum ./
# Fetch dependencies
RUN go mod download
COPY confgenerator confgenerator
COPY apps apps
COPY internal internal


FROM jammy-build-golang-base AS jammy-build-wrapper
WORKDIR /work
COPY cmd/agent_wrapper cmd/agent_wrapper
COPY ./builds/agent_wrapper.sh .
RUN ./agent_wrapper.sh /work/cache/


FROM jammy-build-golang-base AS jammy-build
WORKDIR /work
COPY . /work

# Run the build script once to build the ops agent engine to a cache
RUN mkdir -p /tmp/cache_run/golang && cp -r . /tmp/cache_run/golang
WORKDIR /tmp/cache_run/golang
RUN ./pkg/deb/build.sh &> /dev/null || true
WORKDIR /work

COPY ./confgenerator/default-config.yaml /work/cache/etc/google-cloud-ops-agent/config.yaml
COPY --from=jammy-build-otel /work/cache /work/cache
COPY --from=jammy-build-fluent-bit /work/cache /work/cache
COPY --from=jammy-build-systemd /work/cache /work/cache
COPY --from=jammy-build-wrapper /work/cache /work/cache
RUN ./pkg/deb/build.sh

COPY cmd/ops_agent_uap_plugin cmd/ops_agent_uap_plugin
COPY ./builds/ops_agent_plugin.sh .
RUN ./ops_agent_plugin.sh /work/cache/
RUN ./pkg/plugin/build.sh /work/cache jammy


FROM scratch AS jammy
COPY --from=jammy-build /tmp/google-cloud-ops-agent.tgz /google-cloud-ops-agent-ubuntu-jammy.tgz
COPY --from=jammy-build /google-cloud-ops-agent*.deb /
COPY --from=jammy-build /google-cloud-ops-agent-plugin*.tar.gz /

# ======================================
# Build Ops Agent for ubuntu-noble
# ======================================

FROM ubuntu:noble AS noble-build-base
ARG OPENJDK_MAJOR_VERSION

RUN set -x; apt-get update && \
		DEBIAN_FRONTEND=noninteractive apt-get -y install git systemd \
		autoconf libtool libcurl4-openssl-dev libltdl-dev libssl-dev libyajl-dev \
		build-essential cmake bison flex file libsystemd-dev tzdata \
		devscripts cdbs pkg-config openjdk-${OPENJDK_MAJOR_VERSION}-jdk zip debhelper

SHELL ["/bin/bash", "-c"]

# Install golang
ARG TARGETARCH
ARG GO_VERSION
ADD https://go.dev/dl/go${GO_VERSION}.linux-${TARGETARCH}.tar.gz /tmp/go${GO_VERSION}.tar.gz
RUN set -xe; \
    tar -xf /tmp/go${GO_VERSION}.tar.gz -C /usr/local
ENV PATH="${PATH}:/usr/local/go/bin"


FROM noble-build-base AS noble-build-otel
WORKDIR /work
# Download golang deps
COPY ./submodules/opentelemetry-operations-collector/go.mod ./submodules/opentelemetry-operations-collector/go.sum submodules/opentelemetry-operations-collector/
RUN cd submodules/opentelemetry-operations-collector && go mod download

COPY ./submodules/opentelemetry-java-contrib submodules/opentelemetry-java-contrib
# Install gradle. The first invocation of gradlew does this
RUN cd submodules/opentelemetry-java-contrib && ./gradlew --no-daemon -Djdk.lang.Process.launchMechanism=vfork tasks
COPY ./submodules/opentelemetry-operations-collector submodules/opentelemetry-operations-collector
COPY ./builds/otel.sh .
RUN \
    unset OTEL_TRACES_EXPORTER && \
    unset OTEL_EXPORTER_OTLP_TRACES_ENDPOINT && \
    unset OTEL_EXPORTER_OTLP_TRACES_PROTOCOL && \
    ./otel.sh /work/cache/

FROM noble-build-base AS noble-build-fluent-bit
WORKDIR /work
COPY ./submodules/fluent-bit submodules/fluent-bit
COPY ./builds/fluent_bit.sh .
RUN ./fluent_bit.sh /work/cache/


FROM noble-build-base AS noble-build-systemd
WORKDIR /work
COPY ./systemd systemd
COPY ./builds/systemd.sh .
RUN ./systemd.sh /work/cache/


FROM noble-build-base AS noble-build-golang-base
WORKDIR /work
COPY go.mod go.sum ./
# Fetch dependencies
RUN go mod download
COPY confgenerator confgenerator
COPY apps apps
COPY internal internal


FROM noble-build-golang-base AS noble-build-wrapper
WORKDIR /work
COPY cmd/agent_wrapper cmd/agent_wrapper
COPY ./builds/agent_wrapper.sh .
RUN ./agent_wrapper.sh /work/cache/


FROM noble-build-golang-base AS noble-build
WORKDIR /work
COPY . /work

# Run the build script once to build the ops agent engine to a cache
RUN mkdir -p /tmp/cache_run/golang && cp -r . /tmp/cache_run/golang
WORKDIR /tmp/cache_run/golang
RUN ./pkg/deb/build.sh &> /dev/null || true
WORKDIR /work

COPY ./confgenerator/default-config.yaml /work/cache/etc/google-cloud-ops-agent/config.yaml
COPY --from=noble-build-otel /work/cache /work/cache
COPY --from=noble-build-fluent-bit /work/cache /work/cache
COPY --from=noble-build-systemd /work/cache /work/cache
COPY --from=noble-build-wrapper /work/cache /work/cache
RUN ./pkg/deb/build.sh

COPY cmd/ops_agent_uap_plugin cmd/ops_agent_uap_plugin
COPY ./builds/ops_agent_plugin.sh .
RUN ./ops_agent_plugin.sh /work/cache/
RUN ./pkg/plugin/build.sh /work/cache noble


FROM scratch AS noble
COPY --from=noble-build /tmp/google-cloud-ops-agent.tgz /google-cloud-ops-agent-ubuntu-noble.tgz
COPY --from=noble-build /google-cloud-ops-agent*.deb /
COPY --from=noble-build /google-cloud-ops-agent-plugin*.tar.gz /

# ======================================
# Build Ops Agent for ubuntu-plucky
# ======================================

FROM ubuntu:plucky AS plucky-build-base
ARG OPENJDK_MAJOR_VERSION

RUN set -x; apt-get update && \
		DEBIAN_FRONTEND=noninteractive apt-get -y install git systemd \
		autoconf libtool libcurl4-openssl-dev libltdl-dev libssl-dev libyajl-dev \
		build-essential cmake bison flex file systemd-dev debhelper libsystemd-dev tzdata \
		devscripts cdbs pkg-config openjdk-${OPENJDK_MAJOR_VERSION}-jdk zip

SHELL ["/bin/bash", "-c"]

# Install golang
ARG TARGETARCH
ARG GO_VERSION
ADD https://go.dev/dl/go${GO_VERSION}.linux-${TARGETARCH}.tar.gz /tmp/go${GO_VERSION}.tar.gz
RUN set -xe; \
    tar -xf /tmp/go${GO_VERSION}.tar.gz -C /usr/local
ENV PATH="${PATH}:/usr/local/go/bin"


FROM plucky-build-base AS plucky-build-otel
WORKDIR /work
# Download golang deps
COPY ./submodules/opentelemetry-operations-collector/go.mod ./submodules/opentelemetry-operations-collector/go.sum submodules/opentelemetry-operations-collector/
RUN cd submodules/opentelemetry-operations-collector && go mod download

COPY ./submodules/opentelemetry-java-contrib submodules/opentelemetry-java-contrib
# Install gradle. The first invocation of gradlew does this
RUN cd submodules/opentelemetry-java-contrib && ./gradlew --no-daemon -Djdk.lang.Process.launchMechanism=vfork tasks
COPY ./submodules/opentelemetry-operations-collector submodules/opentelemetry-operations-collector
COPY ./builds/otel.sh .
RUN \
    unset OTEL_TRACES_EXPORTER && \
    unset OTEL_EXPORTER_OTLP_TRACES_ENDPOINT && \
    unset OTEL_EXPORTER_OTLP_TRACES_PROTOCOL && \
    ./otel.sh /work/cache/

FROM plucky-build-base AS plucky-build-fluent-bit
WORKDIR /work
COPY ./submodules/fluent-bit submodules/fluent-bit
COPY ./builds/fluent_bit.sh .
RUN ./fluent_bit.sh /work/cache/


FROM plucky-build-base AS plucky-build-systemd
WORKDIR /work
COPY ./systemd systemd
COPY ./builds/systemd.sh .
RUN ./systemd.sh /work/cache/


FROM plucky-build-base AS plucky-build-golang-base
WORKDIR /work
COPY go.mod go.sum ./
# Fetch dependencies
RUN go mod download
COPY confgenerator confgenerator
COPY apps apps
COPY internal internal


FROM plucky-build-golang-base AS plucky-build-wrapper
WORKDIR /work
COPY cmd/agent_wrapper cmd/agent_wrapper
COPY ./builds/agent_wrapper.sh .
RUN ./agent_wrapper.sh /work/cache/


FROM plucky-build-golang-base AS plucky-build
WORKDIR /work
COPY . /work

# Run the build script once to build the ops agent engine to a cache
RUN mkdir -p /tmp/cache_run/golang && cp -r . /tmp/cache_run/golang
WORKDIR /tmp/cache_run/golang
RUN ./pkg/deb/build.sh &> /dev/null || true
WORKDIR /work

COPY ./confgenerator/default-config.yaml /work/cache/etc/google-cloud-ops-agent/config.yaml
COPY --from=plucky-build-otel /work/cache /work/cache
COPY --from=plucky-build-fluent-bit /work/cache /work/cache
COPY --from=plucky-build-systemd /work/cache /work/cache
COPY --from=plucky-build-wrapper /work/cache /work/cache
RUN ./pkg/deb/build.sh

COPY cmd/ops_agent_uap_plugin cmd/ops_agent_uap_plugin
COPY ./builds/ops_agent_plugin.sh .
RUN ./ops_agent_plugin.sh /work/cache/
RUN ./pkg/plugin/build.sh /work/cache plucky


FROM scratch AS plucky
COPY --from=plucky-build /tmp/google-cloud-ops-agent.tgz /google-cloud-ops-agent-ubuntu-plucky.tgz
COPY --from=plucky-build /google-cloud-ops-agent*.deb /
COPY --from=plucky-build /google-cloud-ops-agent-plugin*.tar.gz /

FROM scratch
COPY --from=centos8 /* /
COPY --from=rockylinux9 /* /
COPY --from=bookworm /* /
COPY --from=bullseye /* /
COPY --from=sles12 /* /
COPY --from=sles15 /* /
COPY --from=jammy /* /
COPY --from=noble /* /
COPY --from=plucky /* /