set -e
KERNEL_VERSION=`uname -r`

# sudo yum install -y kernel-devel-${KERNEL_VERSION} pciutils gcc make wget yum-utils 
# TODO(b/312949832): Temporary fix for Rocky Linux 9.2/8.8; uncomment the above line and remove this following section once the image has been updated to Rocky Linux 9.3/8.9
source /etc/os-release
sudo yum install -y pciutils gcc make wget yum-utils
if ! sudo yum install -y kernel-devel-${KERNEL_VERSION}; then 
    sudo yum install -y kernel-devel  # Install the latest kernel dev package first to bring in the dependencies, before switching to 9.2 repo
    if [[ $ID == rocky && "${VERSION_ID}" == 9.2 ]]; then
        sudo sed -i 's,mirrorlist=https://mirrors.rockylinux.org/mirrorlist?arch=$basearch&repo=AppStream-$releasever$rltype,baseurl=https://dl.rockylinux.org/vault/rocky/9.2/AppStream/$basearch/os/,g' /etc/yum.repos.d/rocky.repo
    elif [[ $ID == rocky && "${VERSION_ID}" == 8.8 ]]; then
        sudo sed -i 's,mirrorlist=https://mirrors.rockylinux.org/mirrorlist?arch=$basearch&repo=BaseOS-$releasever,baseurl=https://dl.rockylinux.org/vault/rocky/8.8/BaseOS/$basearch/os/,g' /etc/yum.repos.d/Rocky-BaseOS.repo
    fi
    sudo yum clean all 
    sudo yum --showduplicates list available kernel-devel
    sudo yum install -y kernel-devel-${KERNEL_VERSION}
fi
# End of the temporary fix

# Install CUDA and driver together, since the `exercise` script needs to run a 
# CUDA sample app to generating GPU process metrics
# Prefer to install from the package manager since it is normally faster and has
# less errors on installation; fallback to the runfile method if the package 
# manager's package is not working or not compitible with the GPU model
DEVICE_CODE=$(lspci -n | grep -Po '10de:[\w\d]{4}')
case $DEVICE_CODE in
    10de:102d)
        # Install a specific version for NVIDIA Tesla K80, R470 is the last supported version
        DRIVER_VERSION=470.82.01
        CUDA_VERSION=11.4.4
        ;;
    *)
        # Installing latest version of NVIDIA CUDA and driver
        # Data Center/Tesla drivers and CUDA are released on different schedules;
        # normally we install the matching versions of driver and CUDA 
        # ($DRIVER_VERSION == $CUDA_BUNDLED_DRIVER_VERSION); due to https://github.com/NVIDIA/open-gpu-kernel-modules/issues/550
        # we install a newer version of the driver
        DRIVER_VERSION=535.129.03
        CUDA_VERSION=12.2.2
        CUDA_BUNDLED_DRIVER_VERSION=535.104.05
        ;;
esac

echo "Installing NVIDIA Data Center driver $DRIVER_VERSION"
curl -fSsl -O https://us.download.nvidia.com/tesla/$DRIVER_VERSION/NVIDIA-Linux-x86_64-$DRIVER_VERSION.run
sudo bash ./NVIDIA-Linux-x86_64-$DRIVER_VERSION.run --silent
# Install the CUDA toolkit only, so that the CUDA toolkit uses the Data Center driver installed in the previous step
# See https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/ for CUDA and driver compatibility
echo "Installing CUDA Toolkit $CUDA_VERSION from CUDA installer with bundled driver $CUDA_BUNDLED_DRIVER_VERSION"
curl -fSsl -O https://developer.download.nvidia.com/compute/cuda/$CUDA_VERSION/local_installers/cuda_${CUDA_VERSION}_${CUDA_BUNDLED_DRIVER_VERSION}_linux.run
sudo sh cuda_${CUDA_VERSION}_${CUDA_BUNDLED_DRIVER_VERSION}_linux.run --toolkit --silent

# check NVIDIA driver installation succeeded
nvidia-smi
