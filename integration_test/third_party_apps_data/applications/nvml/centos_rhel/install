set -e
source /etc/os-release
VERSION_ID=${VERSION_ID%%.*}

install_cuda_from_runfile() {
    # Ref: https://docs.nvidia.com/datacenter/tesla/tesla-installation-notes/index.html#runfile
    # This method requires the match kernel-devel package to be installed, and 
    # the package may be absent from the repo and cause this method to fail
    sudo yum install -y kernel-devel-$(uname -r) pciutils gcc make wget yum-utils 

    # Installing latest version of NVIDIA CUDA and driver
    # Data Center/Tesla drivers and CUDA are released on different schedules;
    # normally we install the matching versions of driver and CUDA 
    # ($DRIVER_VERSION == $CUDA_BUNDLED_DRIVER_VERSION); due to https://github.com/NVIDIA/open-gpu-kernel-modules/issues/550
    # we install a newer version of the driver
    local DRIVER_VERSION=535.129.03
    local CUDA_VERSION=12.2.2
    local CUDA_BUNDLED_DRIVER_VERSION=535.104.05
    echo "Installing NVIDIA Data Center driver $DRIVER_VERSION"
    curl -fSsl -O https://us.download.nvidia.com/tesla/$DRIVER_VERSION/NVIDIA-Linux-x86_64-$DRIVER_VERSION.run
    sudo bash ./NVIDIA-Linux-x86_64-$DRIVER_VERSION.run --silent
    # Install the CUDA toolkit only, so that the CUDA toolkit uses the Data Center driver installed in the previous step
    # See https://docs.nvidia.com/cuda/cuda-toolkit-release-notes/ for CUDA and driver compatibility
    echo "Installing CUDA Toolkit $CUDA_VERSION from CUDA installer with bundled driver $CUDA_BUNDLED_DRIVER_VERSION"
    curl -fSsl -O https://developer.download.nvidia.com/compute/cuda/$CUDA_VERSION/local_installers/cuda_${CUDA_VERSION}_${CUDA_BUNDLED_DRIVER_VERSION}_linux.run
    sudo sh cuda_${CUDA_VERSION}_${CUDA_BUNDLED_DRIVER_VERSION}_linux.run --toolkit --silent

    # check NVIDIA driver installation succeeded
    nvidia-smi
}

try_install() {
    for install_method in "$@"
    do
        echo "Installing NVIDIA driver and CUDA with $install_method..."
        # Run the installation method in a subshell with -e so that the function
        # exit on error
        set +e ; ( set -e; $install_method ) ; exit_code=$?
        set -e
        if [ $exit_code -eq 0 ]; then
            echo "NVIDIA driver and CUDA has been installed successfully with $install_method."
            return 
        fi
    done
    return 1
}

handle_rehl7() {
    install_cuda_from_package_manager() {
        # Ref: https://developer.nvidia.com/cuda-12-2-2-download-archive?target_os=Linux&target_arch=x86_64&Distribution=RHEL&target_version=7&target_type=rpm_network
        sudo yum install -y yum-utils
        sudo yum-config-manager \
        --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel$VERSION_ID/x86_64/cuda-rhel$VERSION_ID.repo
        sudo yum clean all
        sudo yum -y install nvidia-driver-latest-dkms
        sudo yum -y install cuda

        # check NVIDIA driver installation succeeded
        nvidia-smi
    }
    try_install install_cuda_from_runfile install_cuda_from_package_manager
}

handle_common() {
    install_cuda_from_package_manager() {
        # Ref: https://developer.nvidia.com/cuda-12-2-2-download-archive?target_os=Linux&target_arch=x86_64&Distribution=RHEL&target_version=8&target_type=rpm_network
        sudo dnf config-manager \
        --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel$VERSION_ID/x86_64/cuda-rhel$VERSION_ID.repo
        sudo dnf clean all
        sudo dnf -y module install nvidia-driver:latest
        sudo dnf -y install cuda

        # check NVIDIA driver installation succeeded
        nvidia-smi
    }
    try_install install_cuda_from_package_manager install_cuda_from_runfile
}

case "$VERSION_ID" in
    7) handle_rehl7;;
    *) handle_common;;
esac