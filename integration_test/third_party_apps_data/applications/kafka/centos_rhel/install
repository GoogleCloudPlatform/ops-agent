set -e

sudo yum install -y curl java
sudo mkdir -p /opt/kafka/stage
sudo curl "https://dlcdn.apache.org/kafka/3.0.0/kafka_2.12-3.0.0.tgz" -o /opt/kafka/stage/kafka.tgz
sudo tar -xvzf /opt/kafka/stage/kafka.tgz -C /opt/kafka --strip 1

echo "KAFKA_JMX_OPTS=\"-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.net.preferIPv4Stack=true\"" | sudo tee -a /opt/kafka/bin/kafka-run-class.sh

cat <<EOF | sudo tee /opt/kafka/bin/kafka-server-start.sh
#!/bin/bash
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

export JMX_PORT=9999

if [ \$# -lt 1 ];
then
	echo "USAGE: \$0 [-daemon] server.properties [--override property=value]*"
	exit 1
fi
base_dir=\$(dirname \$0)

if [ "x\$KAFKA_LOG4J_OPTS" = "x" ]; then
    export KAFKA_LOG4J_OPTS="-Dlog4j.configuration=file:\$base_dir/../config/log4j.properties"
fi

if [ "x\$KAFKA_HEAP_OPTS" = "x" ]; then
    export KAFKA_HEAP_OPTS="-Xmx1G -Xms1G"
fi

EXTRA_ARGS=${EXTRA_ARGS-'-name kafkaServer -loggc'}

COMMAND=\$1
case \$COMMAND in
  -daemon)
    EXTRA_ARGS="-daemon "\$EXTRA_ARGS
    shift
    ;;
  *)
    ;;
esac

exec \$base_dir/kafka-run-class.sh \$EXTRA_ARGS kafka.Kafka "\$@"
EOF


touch zookeeper.service
cat << EOF > zookeeper.service
[Unit]
Description=Zookeeper
Requires=network.target remote-fs.target
After=network.target remote-fs.target

[Service]
Type=simple
User=root
ExecStart=/opt/kafka/bin/zookeeper-server-start.sh /opt/kafka/config/zookeeper.properties
ExecStop=/opt/kafka/bin/zookeeper-server-stop.sh
Restart=on-abnormal

[Install]
WantedBy=multi-user.target
EOF

touch kafka.service
cat << EOF > kafka.service
[Unit]
Requires=zookeeper.service
After=zookeeper.service

[Service]
Type=simple
User=root
ExecStart=/bin/sh -c '/opt/kafka/bin/kafka-server-start.sh /opt/kafka/config/server.properties > /var/log/kafka/kafka.log 2>&1'
ExecStop=/home/kafka/kafka/bin/kafka-server-stop.sh
Restart=on-abnormal

[Install]
WantedBy=multi-user.target
EOF

sudo mv zookeeper.service /usr/lib/systemd/system/zookeeper.service
sudo chown root:root /usr/lib/systemd/system/zookeeper.service
sudo chmod 0644 /usr/lib/systemd/system/zookeeper.service

sudo mv kafka.service /usr/lib/systemd/system/kafka.service
sudo chown root:root /usr/lib/systemd/system/kafka.service
sudo chmod 0644 /usr/lib/systemd/system/kafka.service

# sometimes selinux will prevent systemd from picking up the file
sudo restorecon /usr/lib/systemd/system/zookeeper.service
sudo restorecon /usr/lib/systemd/system/kafka.service

sudo systemctl daemon-reload
sudo systemctl enable zookeeper
sudo systemctl enable kafka

sudo mkdir -p /var/log/kafka