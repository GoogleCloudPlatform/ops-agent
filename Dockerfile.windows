# escape=`

ARG WINDOWS_VERSION=ltsc2019

#
# Builder Image - Windows Server Core
#
FROM mcr.microsoft.com/windows/servercore:$WINDOWS_VERSION as base

#
# Basic setup
#
RUN setx /M PATH "%PATH%;C:\BuildTools\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
RUN setx /M PATH "%PATH%;C:\WinFlexBison"
RUN setx /M PATH "%PATH%;C:\Go\bin"
RUN setx /M PATH "%PATH%;C:\Java\bin"

RUN setx /M JAVA_HOME "C:\Java"

SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

RUN Write-Host ('Creating folders'); `
    New-Item -Type Directory -Path /local; `
    New-Item -Type Directory -Path /work/out/bin; `
    New-Item -Type Directory -Path /work/out/config;

###############################################################################
# Install build prerequisites
###############################################################################

WORKDIR /local

#
# Install Visual Studio 2019
#
ADD https://aka.ms/vs/16/release/vs_buildtools.exe /local/vs_buildtools.exe
ADD https://aka.ms/vs/16/release/channel /local/VisualStudio.chman

RUN Start-Process /local/vs_buildtools.exe `
    -ArgumentList '--quiet ', '--wait ', '--norestart ', '--nocache', `
    '--installPath C:\BuildTools', `
    '--channelUri C:\local\VisualStudio.chman', `
    '--installChannelUri C:\local\VisualStudio.chman', `
    '--add Microsoft.VisualStudio.Workload.VCTools', `
    '--includeRecommended'  -NoNewWindow -Wait;

#
# Technique from https://github.com/StefanScherer/dockerfiles-windows/blob/master/mongo/3.6/Dockerfile
#
ADD https://aka.ms/vs/15/release/vc_redist.x64.exe /local/vc_redist.x64.exe

RUN Write-Host ('Installing Visual C++ Redistributable Package'); `
    Start-Process /local/vc_redist.x64.exe -ArgumentList '/install', '/quiet', '/norestart' -NoNewWindow -Wait; `
    Copy-Item -Path /Windows/System32/msvcp140.dll -Destination /work/out/bin/; `
    Copy-Item -Path /Windows/System32/vccorlib140.dll -Destination /work/out/bin/; `
    Copy-Item -Path /Windows/System32/vcruntime140.dll -Destination /work/out/bin/;

#
# Install OpenSSL
# This must be done after installing Visual Studio

RUN $files = (iwr -UseBasicParsing https://raw.githubusercontent.com/slproweb/opensslhashes/master/win32_openssl_hashes.json | ConvertFrom-Json).files.psobject.properties.value; `
    $installer = $files | ? {$_.arch -eq \"INTEL\" -and $_.bits -eq 64 -and $_.installer -eq \"msi\" -and -not $_.light -and $_.basever -like \"1.*\" }; `
    iwr -UseBasicParsing -Uri \"$($installer.url)\" -OutFile /local/openssl.msi; `
    $ActualHash = $(Get-FileHash /local/openssl.msi -Algorithm SHA256).Hash.ToLower(); `
    if ($ActualHash -ne \"$($installer.sha256)\") { `
      throw \"OpenSSL hash mismatch. Expected: $($installer.sha256), Actual: $ActualHash\" `
    }; `
    Start-Process msiexec.exe -Wait -ArgumentList \"/i C:\local\openssl.msi /quiet\";

#
# Install winflexbison
#
ADD https://github.com/lexxmark/winflexbison/releases/download/v2.5.22/win_flex_bison-2.5.22.zip /local/win_flex_bison.zip

RUN Expand-Archive /local/win_flex_bison.zip -Destination /WinFlexBison; `
    Copy-Item -Path /WinFlexBison/win_bison.exe /WinFlexBison/bison.exe; `
    Copy-Item -Path /WinFlexBison/win_flex.exe /WinFlexBison/flex.exe;

#
# Install Golang 1.19
#
ADD https://go.dev/dl/go1.19.windows-amd64.msi /local/go1.19.windows-amd64.msi

RUN Start-Process msiexec.exe `
    -ArgumentList '/i C:\local\go1.19.windows-amd64.msi ', '/quiet ', `
    '/norestart ', 'ALLUSERS=1,INSTALLDIR=C:\Go' -NoNewWindow -Wait;

#
# Install Go build tools
#

# Run these in a directory with a go.mod file so that "go get" doesn't need
# a working Git installation.
WORKDIR /goget
RUN go install github.com/google/googet/v2/goopack@latest;

###############################################################################
# Build fluent-bit
###############################################################################

COPY submodules/fluent-bit /work/submodules/fluent-bit
