# escape=`

ARG WINDOWS_VERSION=ltsc2019

#
# Builder Image - Windows Server Core
#
FROM mcr.microsoft.com/windows/servercore:$WINDOWS_VERSION as base

#
# Basic setup
#
RUN setx /M PATH "%PATH%;C:\BuildTools\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin"
RUN setx /M PATH "%PATH%;C:\WinFlexBison"
RUN setx /M PATH "%PATH%;C:\Go\bin"
RUN setx /M PATH "%PATH%;C:\Java\bin"

RUN setx /M JAVA_HOME "C:\Java"

SHELL ["powershell", "-Command", "$ErrorActionPreference = 'Stop'; $ProgressPreference = 'SilentlyContinue';"]

RUN Write-Host ('Creating folders'); `
    New-Item -Type Directory -Path /local; `
    New-Item -Type Directory -Path /work/out/bin; `
    New-Item -Type Directory -Path /work/out/config;

###############################################################################
# Install build prerequisites
###############################################################################

WORKDIR /local

#
# Install Visual Studio 2019
#
ADD https://aka.ms/vs/16/release/vs_buildtools.exe /local/vs_buildtools.exe
ADD https://aka.ms/vs/16/release/channel /local/VisualStudio.chman

RUN Start-Process /local/vs_buildtools.exe `
    -ArgumentList '--quiet ', '--wait ', '--norestart ', '--nocache', `
    '--installPath C:\BuildTools', `
    '--channelUri C:\local\VisualStudio.chman', `
    '--installChannelUri C:\local\VisualStudio.chman', `
    '--add Microsoft.VisualStudio.Workload.VCTools', `
    '--includeRecommended'  -NoNewWindow -Wait;

#
# Technique from https://github.com/StefanScherer/dockerfiles-windows/blob/master/mongo/3.6/Dockerfile
#
ADD https://aka.ms/vs/15/release/vc_redist.x64.exe /local/vc_redist.x64.exe

RUN Write-Host ('Installing Visual C++ Redistributable Package'); `
    Start-Process /local/vc_redist.x64.exe -ArgumentList '/install', '/quiet', '/norestart' -NoNewWindow -Wait; `
    Copy-Item -Path /Windows/System32/msvcp140.dll -Destination /work/out/bin/; `
    Copy-Item -Path /Windows/System32/vccorlib140.dll -Destination /work/out/bin/; `
    Copy-Item -Path /Windows/System32/vcruntime140.dll -Destination /work/out/bin/;

#
# Install OpenSSL
# This must be done after installing Visual Studio
ARG OPENSSL_INSTALLER=Win64OpenSSL-1_1_1n.msi
# SHA256 hash from win32_openssl_hashes.json in https://github.com/slproweb/opensslhashes.
# DO NOT FORGET to change this hash when changing the MSI.
ARG OPENSSL_SHA256=66dc0e2536d688255247d90644acb8cf3d55c80b8a9d393aa5f03229e891949b
ADD https://slproweb.com/download/$OPENSSL_INSTALLER /local/$OPENSSL_INSTALLER

RUN $ExpectedHash = $env:OPENSSL_SHA256; `
    $ActualHash = $(Get-FileHash /local/$env:OPENSSL_INSTALLER -Algorithm SHA256).Hash.ToLower(); `
    if ($ActualHash -ne $env:OPENSSL_SHA256) { `
      throw \"OpenSSL hash mismatch. Expected: $env:OPENSSL_HASH, Actual: $ActualHash\" `
    }; `
    Start-Process msiexec.exe -Wait -ArgumentList \"/i C:\local\$env:OPENSSL_INSTALLER /quiet\";

#
# Install winflexbison
#
ADD https://github.com/lexxmark/winflexbison/releases/download/v2.5.22/win_flex_bison-2.5.22.zip /local/win_flex_bison.zip

RUN Expand-Archive /local/win_flex_bison.zip -Destination /WinFlexBison; `
    Copy-Item -Path /WinFlexBison/win_bison.exe /WinFlexBison/bison.exe; `
    Copy-Item -Path /WinFlexBison/win_flex.exe /WinFlexBison/flex.exe;

#
# Install Golang 1.17.5
#
ADD https://go.dev/dl/go1.17.5.windows-amd64.msi /local/go1.17.5.windows-amd64.msi

RUN Start-Process msiexec.exe `
    -ArgumentList '/i C:\local\go1.17.5.windows-amd64.msi ', '/quiet ', `
    '/norestart ', 'ALLUSERS=1,INSTALLDIR=C:\Go' -NoNewWindow -Wait;

#
# Install Go build tools
#

# Run these in a directory with a go.mod file so that "go get" doesn't need
# a working Git installation.
WORKDIR /goget
RUN go mod init unused; `
    go get github.com/golangci/golangci-lint/cmd/golangci-lint; `
    go get github.com/google/addlicense; `
    go get github.com/pavius/impi/cmd/impi; `
    go get github.com/google/googet/v2/goopack;

###############################################################################
# Build fluent-bit
###############################################################################

FROM base as fluentbit

COPY submodules/fluent-bit /work/submodules/fluent-bit

WORKDIR /work/submodules/fluent-bit/build

RUN cmake -G "'Visual Studio 16 2019'" -DCMAKE_BUILD_TYPE=RELWITHDEBINFO -DFLB_OUT_KINESIS_STREAMS=OFF ../;

RUN cmake --build . --config Release; `
    Copy-Item -Path bin/Release/fluent-bit.exe -Destination /work/out/bin/; `
    Copy-Item -Path bin/Release/fluent-bit.dll -Destination /work/out/bin/;

# TODO: Do something with /work/out/bin/fluent-bit.{exe,dll}

###############################################################################
# Build JMX Project
###############################################################################

FROM base as javacontrib

# Both of these are necessary for the nebula release plugin's options
COPY BUILD_CONFIG /work/BUILD_CONFIG
COPY .git /work/.git

ADD https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.12%2B7/OpenJDK11U-jdk_x64_windows_hotspot_11.0.12_7.msi /local/jdk-11-windows-x64.msi
RUN Start-Process -Wait 'msiexec' -ArgumentList '/i C:\local\jdk-11-windows-x64.msi ADDLOCAL=FeatureMain INSTALLDIR=C:\Java\ /log c:\java_install64.log'

COPY submodules/opentelemetry-java-contrib /work/submodules/opentelemetry-java-contrib

WORKDIR /work/submodules/opentelemetry-java-contrib

# Build & test systems do not always check out git history for submodules, so the properties assigned
# here allow the nebula release process to function properly in that state
RUN Get-Content /work/BUILD_CONFIG | Where-Object length | ForEach-Object { Invoke-Expression "`$env:$_" }; `
    ./gradlew --no-daemon :jmx-metrics:build \"-Pgit.root=$pwd/../../.git\" \"-Prelease.version=$env:JMX_METRICS_JAR_VERSION\" \"-Prelease.disableGitChecks=true\"; `
    Copy-Item -Path jmx-metrics/build/libs/opentelemetry-jmx-metrics-$env:JMX_METRICS_JAR_VERSION.jar -Destination /work/out/bin/opentelemetry-java-contrib-jmx-metrics.jar;

###############################################################################
# Build Go code in one container to exploit Go build caching
###############################################################################

FROM base as gobuilder

###############################################################################
# Build OT collector
###############################################################################

COPY submodules/opentelemetry-operations-collector /work/submodules/opentelemetry-operations-collector

WORKDIR /work/submodules/opentelemetry-operations-collector

RUN go build -o bin/google-cloud-metrics-agent_windows_amd64.exe ./cmd/otelopscol; `
    Copy-Item -Path bin/google-cloud-metrics-agent_windows_amd64.exe -Destination /work/out/bin/;

###############################################################################
# Config generator/service installer
###############################################################################

WORKDIR /work

COPY . /work

ARG WINDOWS_VERSION
ARG BUILD_DISTRO=windows-$WINDOWS_VERSION
RUN Get-Content VERSION | Where-Object length | ForEach-Object { Invoke-Expression "`$env:$_" }; `
    go build -o bin/google-cloud-ops-agent.exe -ldflags \"-X github.com/GoogleCloudPlatform/ops-agent/internal/version.BuildDistro=$env:BUILD_DISTRO -X github.com/GoogleCloudPlatform/ops-agent/internal/version.Version=$env:PKG_VERSION\" ./cmd/ops_agent_windows; `
    Copy-Item -Path bin/google-cloud-ops-agent.exe -Destination /work/out/bin/; `
    Copy-Item -Path confgenerator/default-config.yaml -Destination /work/out/config/config.yaml;

###############################################################################
# Packaging
###############################################################################

FROM base as packaging

WORKDIR /work

COPY . /work

COPY --from=fluentbit /work/out /work/out
COPY --from=gobuilder /work/out /work/out
COPY --from=javacontrib /work/out /work/out

RUN & .\pkg\goo\build.ps1 -DestDir /work/out;
