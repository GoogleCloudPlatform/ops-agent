diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5e88c9949..70a226fdd 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -423,7 +423,7 @@ if(FLB_TLS)
   add_subdirectory(${FLB_PATH_LIB_MBEDTLS} EXCLUDE_FROM_ALL)
 
   # Link OpenSSL statically on Windows.
-  if (FLB_SYSTEM_WINDOWS)
+  if (FLB_SYSTEM_WINDOWS AND MSVC)
     set(OPENSSL_USE_STATIC_LIBS ON)
     set(OPENSSL_MSVC_STATIC_RT  ON)
   endif()
diff --git a/cmake/luajit.cmake b/cmake/luajit.cmake
index b55aef204..08fc0414b 100644
--- a/cmake/luajit.cmake
+++ b/cmake/luajit.cmake
@@ -11,10 +11,18 @@ add_library(libluajit STATIC IMPORTED GLOBAL)
 set(LUAJIT_SRC ${CMAKE_CURRENT_SOURCE_DIR}/${FLB_PATH_LIB_LUAJIT})
 set(LUAJIT_DEST ${CMAKE_CURRENT_BINARY_DIR})
 
+if(NOT DEFINED CMAKE_HOST_C_COMPILER)
+  set(CMAKE_HOST_C_COMPILER, ${CMAKE_C_COMPILER})
+endif()
+
 if (CMAKE_SYSTEM_NAME MATCHES "Darwin")
   set(CFLAGS "${CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT}")
 endif()
 
+if (CMAKE_SYSTEM_NAME MATCHES "Windows")
+  set(TARGET_SYS_PARAM "TARGET_SYS=${CMAKE_SYSTEM_NAME}")
+endif()
+
 # luajit (UNIX)
 # =============
 ExternalProject_Add(luajit
@@ -22,8 +30,8 @@ ExternalProject_Add(luajit
   EXCLUDE_FROM_ALL TRUE
   SOURCE_DIR ${LUAJIT_SRC}
   CONFIGURE_COMMAND ./configure
-  BUILD_COMMAND $(MAKE) CC=${CMAKE_C_COMPILER} CFLAGS=${CFLAGS} BUILD_MODE=static "XCFLAGS=-fPIC"
-  INSTALL_COMMAND cp src/libluajit.a "${LUAJIT_DEST}/lib/libluajit.a")
+  BUILD_COMMAND $(MAKE) ${TARGET_SYS_PARAM} HOST_CC=${CMAKE_HOST_C_COMPILER} CC=${CMAKE_C_COMPILER} CFLAGS=${CFLAGS} BUILDMODE=static "XCFLAGS=-fPIC" Q=
+  INSTALL_COMMAND ${CMAKE_COMMAND} -E copy src/libluajit.a "${LUAJIT_DEST}/lib/libluajit.a")
 
 # luajit (Windows)
 # ================
diff --git a/include/fluent-bit/flb_compat.h b/include/fluent-bit/flb_compat.h
index 30dd4cdfa..dac3fe142 100644
--- a/include/fluent-bit/flb_compat.h
+++ b/include/fluent-bit/flb_compat.h
@@ -28,17 +28,12 @@
 #ifndef FLB_COMPAT_H
 #define FLB_COMPAT_H
 
-/*
- * libmonkey exposes compat macros for <unistd.h>, which some platforms lack,
- * so include the header here.
- */
-#include <monkey/mk_core.h>
-
 #ifdef FLB_SYSTEM_WINDOWS
 #define WIN32_LEAN_AND_MEAN
 #include <winsock2.h>
+#include <ws2tcpip.h>
 #include <windows.h>
-#include <Wincrypt.h> /* flb_io_tls.c */
+#include <wincrypt.h> /* flb_io_tls.c */
 
 #include <monkey/mk_core/mk_sleep.h>
 #include <fluent-bit/flb_dlfcn_win32.h>
@@ -123,11 +118,13 @@ static inline char* realpath(char *path, char *buf)
     return _fullpath(NULL, path, 0);
 }
 
+#ifdef _MSC_VER
 static inline int usleep(LONGLONG usec)
 {
     // Convert into 100ns unit.
     return nanosleep(usec * 10);
 }
+#endif
 #else
 #include <netdb.h>
 #include <netinet/in.h>
@@ -140,4 +137,10 @@ static inline int usleep(LONGLONG usec)
 #define FLB_DIRCHAR '/'
 #endif
 
+/*
+ * libmonkey exposes compat macros for <unistd.h>, which some platforms lack,
+ * so include the header here.
+ */
+#include <monkey/mk_core.h>
+
 #endif
diff --git a/include/fluent-bit/flb_langinfo.h b/include/fluent-bit/flb_langinfo.h
index a0161770d..7841749c8 100644
--- a/include/fluent-bit/flb_langinfo.h
+++ b/include/fluent-bit/flb_langinfo.h
@@ -27,7 +27,7 @@
 #ifndef FLB_LANGINFO_H
 #define FLB_LANGINFO_H
 
-#ifndef _MSC_VER
+#ifndef _WIN32
 #include <langinfo.h>
 #else
 
diff --git a/lib/avro/src/errors.c b/lib/avro/src/errors.c
index 8abd8c832..0eabedf23 100644
--- a/lib/avro/src/errors.c
+++ b/lib/avro/src/errors.c
@@ -52,7 +52,7 @@ static void make_error_data_key()
     pthread_key_create(&error_data_key, free);
 }
 #elif defined _WIN32
-#include <Windows.h>
+#include <windows.h>
 
 static __declspec( thread ) struct avro_error_data_t TLS_ERROR_DATA = { "", "", NULL, NULL };
 
diff --git a/lib/chunkio/include/chunkio/chunkio_compat.h b/lib/chunkio/include/chunkio/chunkio_compat.h
index ca17779b9..45eb5ece5 100644
--- a/lib/chunkio/include/chunkio/chunkio_compat.h
+++ b/lib/chunkio/include/chunkio/chunkio_compat.h
@@ -27,6 +27,7 @@
 #include <direct.h>
 #pragma comment(lib, "ws2_32.lib")
 
+#ifndef __MINGW32__
 /** mode flags for access() */
 #define R_OK 04
 #define W_OK 02
@@ -35,10 +36,12 @@
 
 #define PATH_MAX MAX_PATH
 #define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
-#define strerror_r(errno,buf,len) strerror_s(buf,len,errno)
 
 typedef SSIZE_T ssize_t;
 typedef unsigned mode_t;
+#endif
+
+#define strerror_r(errno,buf,len) strerror_s(buf,len,errno)
 
 static inline char* dirname(const char *path)
 {
diff --git a/lib/chunkio/src/CMakeLists.txt b/lib/chunkio/src/CMakeLists.txt
index b8462252e..f09847255 100644
--- a/lib/chunkio/src/CMakeLists.txt
+++ b/lib/chunkio/src/CMakeLists.txt
@@ -21,8 +21,8 @@ if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
     )
   set(libs
     ${libs}
-    Shell32.lib
-    Shlwapi.lib)
+    shell32.lib
+    shlwapi.lib)
 else()
   set(src
     ${src}
diff --git a/lib/chunkio/src/cio_os.c b/lib/chunkio/src/cio_os.c
index b368215fa..140aeea77 100644
--- a/lib/chunkio/src/cio_os.c
+++ b/lib/chunkio/src/cio_os.c
@@ -27,7 +27,7 @@
 
 #include <chunkio/chunkio_compat.h>
 
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__MINGW32__)
 #include <Shlobj.h>
 #endif
 
diff --git a/lib/chunkio/src/cio_utils.c b/lib/chunkio/src/cio_utils.c
index 61d33b09b..d9f6c9e79 100644
--- a/lib/chunkio/src/cio_utils.c
+++ b/lib/chunkio/src/cio_utils.c
@@ -25,14 +25,14 @@
 #include <sys/stat.h>
 #include <fcntl.h>
 #include <errno.h>
-#ifndef _MSC_VER
+#ifndef _WIN32
 #include <fts.h>
 #endif
 
 #include <chunkio/chunkio_compat.h>
 #include <chunkio/cio_log.h>
 
-#ifndef _MSC_VER
+#ifndef _WIN32
 /*
  * Taken from StackOverflow:
  *
diff --git a/lib/chunkio/src/win32/dirent.c b/lib/chunkio/src/win32/dirent.c
index 2ed39ed15..7d1a6584f 100644
--- a/lib/chunkio/src/win32/dirent.c
+++ b/lib/chunkio/src/win32/dirent.c
@@ -22,7 +22,7 @@
  * Win32's FIndFirstFile/FindNextFile API.
  */
 
-#include <Windows.h>
+#include <windows.h>
 #include <shlwapi.h>
 
 #include "dirent.h"
diff --git a/lib/monkey/include/monkey/mk_core/external/winpthreads.h b/lib/monkey/include/monkey/mk_core/external/winpthreads.h
index 97045a69a..f28366d2c 100644
--- a/lib/monkey/include/monkey/mk_core/external/winpthreads.h
+++ b/lib/monkey/include/monkey/mk_core/external/winpthreads.h
@@ -101,7 +101,7 @@ extern "C" {
 #define PTHREAD_BARRIER_SERIAL_THREAD 1
 
 /* Windows doesn't have this, so declare it ourselves. */
-#if (_MSC_VER < 1900)
+#if defined(_MSC_VER) && (_MSC_VER < 1900)
 struct timespec
 {
   /* long long in windows is the same as long in unix for 64bit */
diff --git a/lib/monkey/include/monkey/mk_core/mk_string.h b/lib/monkey/include/monkey/mk_core/mk_string.h
index 260d67ca4..2f6a2b499 100644
--- a/lib/monkey/include/monkey/mk_core/mk_string.h
+++ b/lib/monkey/include/monkey/mk_core/mk_string.h
@@ -26,7 +26,7 @@
 #include "mk_list.h"
 #include "mk_macros.h"
 
-#if defined(_WIN32) || defined(_WIN64)
+#if (defined(_WIN32) || defined(_WIN64)) && !defined(__MINGW32__)
   #define snprintf _snprintf
   #define vsnprintf _vsnprintf
   #define strcasecmp _stricmp
diff --git a/lib/monkey/mk_core/deps/libevent/cmake/CheckFunctionExistsEx.c b/lib/monkey/mk_core/deps/libevent/cmake/CheckFunctionExistsEx.c
index 5ee3e5913..84bae9feb 100644
--- a/lib/monkey/mk_core/deps/libevent/cmake/CheckFunctionExistsEx.c
+++ b/lib/monkey/mk_core/deps/libevent/cmake/CheckFunctionExistsEx.c
@@ -11,7 +11,7 @@ int main(){
 #else
 int main(int ac, char*av[]){
 #endif
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__MINGW32__)
   void * p = &CHECK_FUNCTION_EXISTS;
 #else
   CHECK_FUNCTION_EXISTS();
diff --git a/lib/monkey/mk_core/mk_rconf.c b/lib/monkey/mk_core/mk_rconf.c
index 80e7e784e..5a4ee0064 100644
--- a/lib/monkey/mk_core/mk_rconf.c
+++ b/lib/monkey/mk_core/mk_rconf.c
@@ -23,7 +23,7 @@
 #include <string.h>
 #include <sys/types.h>
 #include <sys/stat.h>
-#ifndef _MSC_VER
+#ifndef _WIN32
 #include <glob.h>
 #endif
 
@@ -33,7 +33,7 @@
 #include <mk_core/mk_list.h>
 
 #ifdef _WIN32
-#include <Windows.h>
+#include <windows.h>
 #include <strsafe.h>
 #define PATH_MAX MAX_PATH
 #endif
@@ -558,7 +558,7 @@ static int mk_rconf_path_set(struct mk_rconf *conf, char *file)
     char *end;
     char path[PATH_MAX + 1];
 
-#ifdef _MSC_VER
+#ifdef _WIN32
     p = _fullpath(path, file, PATH_MAX + 1);
 #else
     p = realpath(file, path);
diff --git a/plugins/CMakeLists.txt b/plugins/CMakeLists.txt
index 6034a54b8..676050f1b 100644
--- a/plugins/CMakeLists.txt
+++ b/plugins/CMakeLists.txt
@@ -148,7 +148,9 @@ endif()
 
 if (FLB_SYSTEM_WINDOWS)
   REGISTER_IN_PLUGIN("in_winlog")
-  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W2")
+  if (MSVC)
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W2")
+  endif()
 else()
   REGISTER_IN_PLUGIN("in_serial")
 endif()
diff --git a/plugins/in_tail/CMakeLists.txt b/plugins/in_tail/CMakeLists.txt
index 4c83cd7eb..4191c974d 100644
--- a/plugins/in_tail/CMakeLists.txt
+++ b/plugins/in_tail/CMakeLists.txt
@@ -19,13 +19,13 @@ if(FLB_PARSER)
     )
 endif()
 
-if(MSVC)
+if(FLB_SYSTEM_WINDOWS)
   set(src
     ${src}
     win32/stat.c
     win32/io.c
     )
-  FLB_PLUGIN(in_tail "${src}" "Shlwapi")
+  FLB_PLUGIN(in_tail "${src}" "shlwapi")
 else()
   FLB_PLUGIN(in_tail "${src}" "")
 endif()
diff --git a/plugins/in_tail/tail_file.c b/plugins/in_tail/tail_file.c
index b0edc2308..48f92fdda 100644
--- a/plugins/in_tail/tail_file.c
+++ b/plugins/in_tail/tail_file.c
@@ -41,10 +41,6 @@
 #include "tail_multiline.h"
 #include "tail_scan.h"
 
-#ifdef FLB_SYSTEM_WINDOWS
-#include "win32.h"
-#endif
-
 static inline void consume_bytes(char *buf, int bytes, int length)
 {
     memmove(buf, buf + bytes, length - bytes);
diff --git a/plugins/in_tail/win32/io.c b/plugins/in_tail/win32/io.c
index a479ff731..043504f94 100644
--- a/plugins/in_tail/win32/io.c
+++ b/plugins/in_tail/win32/io.c
@@ -18,7 +18,7 @@
  *  limitations under the License.
  */
 
-#include <Windows.h>
+#include <windows.h>
 #include <stdlib.h>
 #include <stdint.h>
 #include <fcntl.h>
diff --git a/plugins/in_tail/win32/stat.c b/plugins/in_tail/win32/stat.c
index f15a45b83..34f032b21 100644
--- a/plugins/in_tail/win32/stat.c
+++ b/plugins/in_tail/win32/stat.c
@@ -18,7 +18,8 @@
  *  limitations under the License.
  */
 
-#include <Windows.h>
+#define _WIN32_WINNT _WIN32_WINNT_WS08
+#include <windows.h>
 #include <stdlib.h>
 #include <stdint.h>
 #include <io.h>
diff --git a/plugins/in_winlog/pack.c b/plugins/in_winlog/pack.c
index e2ed80bed..f444cb732 100644
--- a/plugins/in_winlog/pack.c
+++ b/plugins/in_winlog/pack.c
@@ -25,7 +25,6 @@
 #include <fluent-bit/flb_input_plugin.h>
 #include <msgpack.h>
 #include <sddl.h>
-#include <locale.h>
 #include "winlog.h"
 
 #define REGKEY_MAXLEN 256
@@ -78,25 +77,17 @@ static int pack_time(msgpack_packer *mp_pck, int time)
     size_t len;
     struct tm tm;
     char buf[64];
-    _locale_t locale;
 
     if (_localtime32_s(&tm, &time)) {
         flb_errno();
         return -1;
     }
 
-    locale = _get_current_locale();
-    if (locale == NULL) {
-        return -1;
-    }
-
-    len = _strftime_l(buf, 64, FMT_ISO8601, &tm, locale);
+    len = strftime(buf, 64, FMT_ISO8601, &tm);
     if (len == 0) {
         flb_errno();
-        _free_locale(locale);
         return -1;
     }
-    _free_locale(locale);
     msgpack_pack_str(mp_pck, len);
     msgpack_pack_str_body(mp_pck, buf, len);
 
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 76940076d..14e939321 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -61,7 +61,9 @@ if(FLB_SYSTEM_WINDOWS)
     ${src}
     flb_dlfcn_win32.c
     )
-  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W2")
+  if(MSVC)
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W2")
+  endif()
 endif()
 
 if(FLB_PARSER)
@@ -199,12 +201,21 @@ check_symbol_exists(accept4 "sys/socket.h" HAVE_ACCEPT4)
 
 # Core dependencies
 if(FLB_SYSTEM_WINDOWS)
-  set(FLB_DEPS
-    "ws2_32.lib"
-    "crypt32.lib"
-    "Bcrypt.lib"
-    "Shlwapi.lib"
-    )
+  if(MSVC)
+    set(FLB_DEPS
+      "ws2_32.lib"
+      "crypt32.lib"
+      "bcrypt.lib"
+      "shlwapi.lib"
+      )
+  else()
+    set(FLB_DEPS
+      "ws2_32.dll"
+      "crypt32.dll"
+      "bcrypt.dll"
+      "shlwapi.dll"
+      )
+  endif()
 else()
   set(FLB_DEPS
     ${FLB_DEPS}
@@ -330,12 +341,17 @@ if(FLB_SHARED_LIB)
     PROPERTIES OUTPUT_NAME fluent-bit)
 
   # Windows doesn't provide pthread (see winpthreads.c in mk_core).
-  if(CMAKE_SYSTEM_NAME MATCHES "Windows")
+  if(MSVC)
     target_link_libraries(fluent-bit-shared ${FLB_DEPS})
   else()
     target_link_libraries(fluent-bit-shared ${FLB_DEPS} -lpthread)
   endif()
 
+  if(FLB_SYSTEM_WINDOWS)
+    # Remove the default "lib" prefix on Windows.
+    set_target_properties(fluent-bit-shared PROPERTIES PREFIX "")
+  endif()
+
   if (MSVC)
     set_target_properties(fluent-bit-shared
       PROPERTIES PDB_NAME fluent-bit.dll)
diff --git a/src/flb_hash.c b/src/flb_hash.c
index 4c36da064..b00207242 100644
--- a/src/flb_hash.c
+++ b/src/flb_hash.c
@@ -25,6 +25,10 @@
 #include <fluent-bit/flb_str.h>
 #include <xxhash.h>
 
+#if defined(_WIN32) && defined(__MINGW32__)
+#define random() rand()
+#endif
+
 static inline void flb_hash_entry_free(struct flb_hash *ht,
                                        struct flb_hash_entry *entry)
 {
diff --git a/src/flb_network.c b/src/flb_network.c
index 6865943b1..2cb56bd30 100644
--- a/src/flb_network.c
+++ b/src/flb_network.c
@@ -28,11 +28,18 @@
 #include <errno.h>
 
 #ifdef FLB_SYSTEM_WINDOWS
+#include <sdkddkver.h>
+#define _WIN32_WINNT _WIN32_WINNT_WS08
+#include <winsock2.h>
 #define poll WSAPoll
 #else
 #include <sys/poll.h>
 #endif
 
+#if defined(FLB_SYSTEM_WINDOWS) && !defined(AI_NUMERICSERV)
+#define AI_NUMERICSERV 0x0400
+#endif
+
 #include <fluent-bit/flb_info.h>
 #include <fluent-bit/flb_compat.h>
 #include <fluent-bit/flb_info.h>
diff --git a/src/flb_sosreport.c b/src/flb_sosreport.c
index 7df35b764..a10d61e41 100644
--- a/src/flb_sosreport.c
+++ b/src/flb_sosreport.c
@@ -29,7 +29,7 @@
 #include <fluent-bit/flb_utils.h>
 #include <fluent-bit/flb_kv.h>
 
-#ifndef _MSC_VER
+#ifndef _WIN32
 #include <sys/utsname.h>
 #endif
 
@@ -108,7 +108,7 @@ static void print_properties(struct mk_list *props)
     }
 }
 
-#ifdef _MSC_VER
+#ifdef _WIN32
 /* A definition table of SYSTEM_INFO.wProcessorArchitecture.
  *
  * This is a streight-forward translation of the official manual.
@@ -189,7 +189,7 @@ int flb_sosreport(struct flb_config *config)
     printf("    Built Flags\t\t%s\n", FLB_INFO_FLAGS);
     printf("\n");
 
-#ifndef _MSC_VER
+#ifndef _WIN32
     struct utsname uts;
     uname(&uts);
 
diff --git a/src/win32/winsvc.c b/src/win32/winsvc.c
index d7289c66e..abe0ffdac 100644
--- a/src/win32/winsvc.c
+++ b/src/win32/winsvc.c
@@ -18,8 +18,8 @@
  *  limitations under the License.
  */
 
-#include <Windows.h>
-#include <Shlwapi.h>
+#include <windows.h>
+#include <shlwapi.h>
 
 struct flb_config;
 extern struct flb_config *config;
