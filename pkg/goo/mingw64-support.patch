diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9eca7a696..048570a9c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -493,7 +493,7 @@ if(FLB_TLS)
   add_subdirectory(${FLB_PATH_LIB_MBEDTLS} EXCLUDE_FROM_ALL)
 
   # Link OpenSSL statically on Windows.
-  if (FLB_SYSTEM_WINDOWS)
+  if (FLB_SYSTEM_WINDOWS AND MSVC)
     set(OPENSSL_USE_STATIC_LIBS ON)
     set(OPENSSL_MSVC_STATIC_RT  ON)
   endif()
diff --git a/cmake/luajit.cmake b/cmake/luajit.cmake
index 7741805a9..63d697510 100644
--- a/cmake/luajit.cmake
+++ b/cmake/luajit.cmake
@@ -11,6 +11,10 @@ add_library(libluajit STATIC IMPORTED GLOBAL)
 set(LUAJIT_SRC ${CMAKE_CURRENT_SOURCE_DIR}/${FLB_PATH_LIB_LUAJIT})
 set(LUAJIT_DEST ${CMAKE_CURRENT_BINARY_DIR})
 
+if(NOT DEFINED CMAKE_HOST_C_COMPILER)
+  set(CMAKE_HOST_C_COMPILER, ${CMAKE_C_COMPILER})
+endif()
+
 if (CMAKE_SYSTEM_NAME MATCHES "Darwin")
   set(CFLAGS "${CFLAGS} -isysroot ${CMAKE_OSX_SYSROOT} -fno-stack-check")
 
@@ -30,6 +34,10 @@ else()
   set(DEPLOYMENT_TARGET "")
 endif()
 
+if (CMAKE_SYSTEM_NAME MATCHES "Windows")
+  set(TARGET_SYS_PARAM "TARGET_SYS=${CMAKE_SYSTEM_NAME}")
+endif()
+
 # luajit (UNIX)
 # =============
 ExternalProject_Add(luajit
@@ -37,8 +45,8 @@ ExternalProject_Add(luajit
   EXCLUDE_FROM_ALL TRUE
   SOURCE_DIR ${LUAJIT_SRC}
   CONFIGURE_COMMAND ./configure
-  BUILD_COMMAND $(MAKE) CC=${CMAKE_C_COMPILER} ${DEPLOYMENT_TARGET} CFLAGS=${CFLAGS} BUILDMODE=static "XCFLAGS=-fPIC"
-  INSTALL_COMMAND cp src/libluajit.a "${LUAJIT_DEST}/lib/libluajit.a")
+  BUILD_COMMAND $(MAKE) ${TARGET_SYS_PARAM} HOST_CC=${CMAKE_HOST_C_COMPILER} CC=${CMAKE_C_COMPILER} ${DEPLOYMENT_TARGET} CFLAGS=${CFLAGS} BUILDMODE=static "XCFLAGS=-fPIC" Q=
+  INSTALL_COMMAND ${CMAKE_COMMAND} -E copy src/libluajit.a "${LUAJIT_DEST}/lib/libluajit.a")
 
 # luajit (Windows)
 # ================
diff --git a/include/fluent-bit/flb_compat.h b/include/fluent-bit/flb_compat.h
index 37f3f9c66..6b6097b6a 100644
--- a/include/fluent-bit/flb_compat.h
+++ b/include/fluent-bit/flb_compat.h
@@ -27,17 +27,12 @@
 #ifndef FLB_COMPAT_H
 #define FLB_COMPAT_H
 
-/*
- * libmonkey exposes compat macros for <unistd.h>, which some platforms lack,
- * so include the header here.
- */
-#include <monkey/mk_core.h>
-
 #ifdef FLB_SYSTEM_WINDOWS
 #define WIN32_LEAN_AND_MEAN
 #include <winsock2.h>
+#include <ws2tcpip.h>
 #include <windows.h>
-#include <Wincrypt.h> /* flb_io_tls.c */
+#include <wincrypt.h> /* flb_io_tls.c */
 
 #include <monkey/mk_core/mk_sleep.h>
 #include <fluent-bit/flb_dlfcn_win32.h>
@@ -62,12 +57,14 @@
 #define strncasecmp _strnicmp
 #define timegm _mkgmtime
 
+#ifndef __MINGW32__
 static inline int getpagesize(void)
 {
     SYSTEM_INFO info;
     GetSystemInfo(&info);
     return info.dwPageSize;
 }
+#endif
 
 static inline struct tm *gmtime_r(const time_t *timep, struct tm *result)
 {
@@ -122,11 +119,13 @@ static inline char* realpath(char *path, char *buf)
     return _fullpath(NULL, path, 0);
 }
 
+#ifdef _MSC_VER
 static inline int usleep(LONGLONG usec)
 {
     // Convert into 100ns unit.
     return nanosleep(usec * 10);
 }
+#endif
 #else
 #include <netdb.h>
 #include <netinet/in.h>
@@ -139,4 +138,10 @@ static inline int usleep(LONGLONG usec)
 #define FLB_DIRCHAR '/'
 #endif
 
+/*
+ * libmonkey exposes compat macros for <unistd.h>, which some platforms lack,
+ * so include the header here.
+ */
+#include <monkey/mk_core.h>
+
 #endif
diff --git a/include/fluent-bit/flb_langinfo.h b/include/fluent-bit/flb_langinfo.h
index 6da306829..54331bc9b 100644
--- a/include/fluent-bit/flb_langinfo.h
+++ b/include/fluent-bit/flb_langinfo.h
@@ -26,7 +26,7 @@
 #ifndef FLB_LANGINFO_H
 #define FLB_LANGINFO_H
 
-#ifndef _MSC_VER
+#ifndef _WIN32
 #include <langinfo.h>
 #else
 
diff --git a/lib/avro/src/errors.c b/lib/avro/src/errors.c
index 8abd8c832..0eabedf23 100644
--- a/lib/avro/src/errors.c
+++ b/lib/avro/src/errors.c
@@ -52,7 +52,7 @@ static void make_error_data_key()
     pthread_key_create(&error_data_key, free);
 }
 #elif defined _WIN32
-#include <Windows.h>
+#include <windows.h>
 
 static __declspec( thread ) struct avro_error_data_t TLS_ERROR_DATA = { "", "", NULL, NULL };
 
diff --git a/lib/c-ares-809d5e84/CMakeLists.txt b/lib/c-ares-809d5e84/CMakeLists.txt
index a423b5a2a..5ae46dfcc 100644
--- a/lib/c-ares-809d5e84/CMakeLists.txt
+++ b/lib/c-ares-809d5e84/CMakeLists.txt
@@ -233,7 +233,7 @@ IF (HAVE_LIBRT)
 	LIST (APPEND CARES_DEPENDENT_LIBS rt)
 ENDIF ()
 IF (WIN32)
-	LIST (APPEND CARES_DEPENDENT_LIBS ws2_32 Advapi32)
+	LIST (APPEND CARES_DEPENDENT_LIBS ws2_32 advapi32)
 ENDIF ()
 
 
diff --git a/lib/chunkio/include/chunkio/chunkio_compat.h b/lib/chunkio/include/chunkio/chunkio_compat.h
index 3e4951b98..8043b36c2 100644
--- a/lib/chunkio/include/chunkio/chunkio_compat.h
+++ b/lib/chunkio/include/chunkio/chunkio_compat.h
@@ -32,6 +32,7 @@
 #include <direct.h>
 #pragma comment(lib, "ws2_32.lib")
 
+#ifndef __MINGW32__
 /** mode flags for access() */
 #define R_OK 04
 #define W_OK 02
@@ -40,10 +41,12 @@
 
 #define PATH_MAX MAX_PATH
 #define S_ISREG(m) (((m) & S_IFMT) == S_IFREG)
-#define strerror_r(errno,buf,len) strerror_s(buf,len,errno)
 
 typedef SSIZE_T ssize_t;
 typedef unsigned mode_t;
+#endif
+
+#define strerror_r(errno,buf,len) strerror_s(buf,len,errno)
 
 static inline char* dirname(const char *path)
 {
@@ -77,6 +80,7 @@ static inline int cio_getpagesize(void)
     return system_info.dwPageSize;
 }
 #else
+#include <unistd.h>
 static inline int cio_getpagesize(void)
 {
     return getpagesize();
diff --git a/lib/chunkio/src/CMakeLists.txt b/lib/chunkio/src/CMakeLists.txt
index a4fc2d37b..db58e1add 100644
--- a/lib/chunkio/src/CMakeLists.txt
+++ b/lib/chunkio/src/CMakeLists.txt
@@ -22,8 +22,8 @@ if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
     )
   set(libs
     ${libs}
-    Shell32.lib
-    Shlwapi.lib)
+    shell32.lib
+    shlwapi.lib)
 else()
   set(src
     ${src}
diff --git a/lib/chunkio/src/cio_os.c b/lib/chunkio/src/cio_os.c
index b368215fa..767ff1fd4 100644
--- a/lib/chunkio/src/cio_os.c
+++ b/lib/chunkio/src/cio_os.c
@@ -27,8 +27,8 @@
 
 #include <chunkio/chunkio_compat.h>
 
-#ifdef _WIN32
-#include <Shlobj.h>
+#if defined(_WIN32) && !defined(__MINGW32__)
+#include <shlobj.h>
 #endif
 
 /* Check if a path is a directory */
diff --git a/lib/chunkio/src/cio_utils.c b/lib/chunkio/src/cio_utils.c
index 16d4af3da..d481bc2a8 100644
--- a/lib/chunkio/src/cio_utils.c
+++ b/lib/chunkio/src/cio_utils.c
@@ -25,7 +25,7 @@
 #include <sys/stat.h>
 #include <fcntl.h>
 #include <errno.h>
-#ifndef _MSC_VER
+#ifndef _WIN32
 #include <fts.h>
 #endif
 
@@ -33,7 +33,7 @@
 #include <chunkio/chunkio_compat.h>
 #include <chunkio/cio_log.h>
 
-#ifndef _MSC_VER
+#ifndef _WIN32
 /*
  * Taken from StackOverflow:
  *
@@ -145,10 +145,3 @@ int cio_utils_read_file(const char *path, char **buf, size_t *size)
 
     return 0;
 }
-
-#ifdef CIO_HAVE_GETPAGESIZE
-int cio_getpagesize()
-{
-    return getpagesize();
-}
-#endif
diff --git a/lib/chunkio/src/win32/dirent.c b/lib/chunkio/src/win32/dirent.c
index 2ed39ed15..7d1a6584f 100644
--- a/lib/chunkio/src/win32/dirent.c
+++ b/lib/chunkio/src/win32/dirent.c
@@ -22,7 +22,7 @@
  * Win32's FIndFirstFile/FindNextFile API.
  */
 
-#include <Windows.h>
+#include <windows.h>
 #include <shlwapi.h>
 
 #include "dirent.h"
diff --git a/lib/monkey/CMakeLists.txt b/lib/monkey/CMakeLists.txt
index f11894f3d..29d400363 100644
--- a/lib/monkey/CMakeLists.txt
+++ b/lib/monkey/CMakeLists.txt
@@ -214,6 +214,18 @@ if(HAVE_REGEX)
   MK_DEFINITION(MK_HAVE_REGEX)
 endif()
 
+# sockaddr_un support
+check_c_source_compiles("
+  #include <afunix.h>
+  int main() {
+     struct sockaddr_un socket;
+     return 0;
+  }" HAVE_SOCKADDR_UN)
+
+if(HAVE_SOCKADDR_UN)
+  MK_DEFINITION(MK_HAVE_SOCKADDR_UN)
+endif()
+
 
 # ============================================
 # =========== CONFIGURATION FILES=============
diff --git a/lib/monkey/include/monkey/mk_config.h b/lib/monkey/include/monkey/mk_config.h
index f650f4242..bd3bb7167 100644
--- a/lib/monkey/include/monkey/mk_config.h
+++ b/lib/monkey/include/monkey/mk_config.h
@@ -27,7 +27,9 @@
 #include "../../deps/rbtree/rbtree.h"
 
 #ifdef _WIN32
+#ifdef _MSC_VER
 typedef uint32_t mode_t;
+#endif
 typedef uint32_t uid_t;
 typedef uint32_t gid_t;
 #endif
diff --git a/lib/monkey/include/monkey/mk_core/external/winpthreads.h b/lib/monkey/include/monkey/mk_core/external/winpthreads.h
index 97045a69a..f28366d2c 100644
--- a/lib/monkey/include/monkey/mk_core/external/winpthreads.h
+++ b/lib/monkey/include/monkey/mk_core/external/winpthreads.h
@@ -101,7 +101,7 @@ extern "C" {
 #define PTHREAD_BARRIER_SERIAL_THREAD 1
 
 /* Windows doesn't have this, so declare it ourselves. */
-#if (_MSC_VER < 1900)
+#if defined(_MSC_VER) && (_MSC_VER < 1900)
 struct timespec
 {
   /* long long in windows is the same as long in unix for 64bit */
diff --git a/lib/monkey/include/monkey/mk_core/external/winuio.h b/lib/monkey/include/monkey/mk_core/external/winuio.h
index 4ae747888..5c61df6ac 100644
--- a/lib/monkey/include/monkey/mk_core/external/winuio.h
+++ b/lib/monkey/include/monkey/mk_core/external/winuio.h
@@ -8,7 +8,7 @@
 #else
 #include <errno.h>
 #include <io.h>
-#include <BaseTsd.h>
+#include <basetsd.h>
 #include <winsock2.h>
 #include <ws2tcpip.h>
 typedef SSIZE_T ssize_t;
diff --git a/lib/monkey/include/monkey/mk_core/mk_event_select.h b/lib/monkey/include/monkey/mk_core/mk_event_select.h
index b69c0ba38..e80091ca4 100644
--- a/lib/monkey/include/monkey/mk_core/mk_event_select.h
+++ b/lib/monkey/include/monkey/mk_core/mk_event_select.h
@@ -21,7 +21,7 @@
 #define MK_EVENT_SELECT_H
 
 #ifdef _WIN32
-#include <Winsock2.h>
+#include <winsock2.h>
 #else
 #include <sys/select.h>
 #endif
diff --git a/lib/monkey/include/monkey/mk_core/mk_macros.h b/lib/monkey/include/monkey/mk_core/mk_macros.h
index f5179faa1..7d6e998b7 100644
--- a/lib/monkey/include/monkey/mk_core/mk_macros.h
+++ b/lib/monkey/include/monkey/mk_core/mk_macros.h
@@ -166,7 +166,7 @@
   #define MK_EXPORT __declspec(dllexport)
 #endif
 
-#ifdef _WIN32
+#ifdef _MSC_VERSION
     #define MK_INLINE __forceinline
 #else
     #define MK_INLINE inline __attribute__((always_inline))
diff --git a/lib/monkey/include/monkey/mk_core/mk_string.h b/lib/monkey/include/monkey/mk_core/mk_string.h
index cdbe6d505..65c032de9 100644
--- a/lib/monkey/include/monkey/mk_core/mk_string.h
+++ b/lib/monkey/include/monkey/mk_core/mk_string.h
@@ -26,7 +26,7 @@
 #include "mk_list.h"
 #include "mk_macros.h"
 
-#if defined(_WIN32) || defined(_WIN64)
+#if (defined(_WIN32) || defined(_WIN64)) && !defined(__MINGW32__)
   #define snprintf _snprintf
   #define vsnprintf _vsnprintf
   #define strcasecmp _stricmp
diff --git a/lib/monkey/include/monkey/mk_scheduler.h b/lib/monkey/include/monkey/mk_scheduler.h
index b28a93323..c3ef45f3f 100644
--- a/lib/monkey/include/monkey/mk_scheduler.h
+++ b/lib/monkey/include/monkey/mk_scheduler.h
@@ -37,7 +37,7 @@
 #define MK_SCHED_SIGNAL_FREE_ALL         0xFFEE0000
 #define MK_SCHED_SIGNAL_EVENT_LOOP_BREAK 0xEEFFAACC
 
-#ifdef _WIN32
+#ifdef _MSC_VER
     /* The pid field in the mk_sched_worker structure is ignored in platforms other than
      * linux and mac os so it can be safely plugged in this meaningless way
      */
diff --git a/lib/monkey/include/monkey/mk_socket.h b/lib/monkey/include/monkey/mk_socket.h
index 67d290f08..8130d9acd 100644
--- a/lib/monkey/include/monkey/mk_socket.h
+++ b/lib/monkey/include/monkey/mk_socket.h
@@ -24,8 +24,19 @@
 
 #ifdef _WIN32
 #include <winsock2.h>
+#if MK_HAVE_SOCKADDR_UN
 #include <afunix.h>
 #else
+/* Support older MinGW versions. */
+#ifndef UNIX_PATH_MAX
+#define UNIX_PATH_MAX 108
+struct sockaddr_un {
+  ADDRESS_FAMILY sun_family;
+  char sun_path[UNIX_PATH_MAX];
+};
+#endif
+#endif
+#else
 #include <sys/socket.h>
 #include <arpa/inet.h>
 #include <netdb.h>
diff --git a/lib/monkey/mk_core/CMakeLists.txt b/lib/monkey/mk_core/CMakeLists.txt
index 2dc6708d4..a85deb15b 100644
--- a/lib/monkey/mk_core/CMakeLists.txt
+++ b/lib/monkey/mk_core/CMakeLists.txt
@@ -153,4 +153,7 @@ target_link_libraries(mk_core ${CMAKE_THREAD_LIBS_INIT})
 
 if (CMAKE_SYSTEM_NAME MATCHES "Windows")
   target_link_libraries(mk_core event)
+  if (NOT MSVC)
+    target_link_libraries(mk_core -lws2_32)
+  endif()
 endif()
diff --git a/lib/monkey/mk_core/deps/libevent/CMakeLists.txt b/lib/monkey/mk_core/deps/libevent/CMakeLists.txt
index 7a839decf..9135099ab 100644
--- a/lib/monkey/mk_core/deps/libevent/CMakeLists.txt
+++ b/lib/monkey/mk_core/deps/libevent/CMakeLists.txt
@@ -746,7 +746,11 @@ if(WIN32)
     list(APPEND HDR_PRIVATE WIN32-Code/getopt.h)
 
     set(EVENT__DNS_USE_FTIME_FOR_ID 1)
-    set(LIB_PLATFORM ws2_32)
+    if(MSVC)
+      set(LIB_PLATFORM ws2_32)
+    else()
+      set(LIB_PLATFORM -lws2_32)
+    endif()
     add_definitions(
             -D_CRT_SECURE_NO_WARNINGS
             -D_CRT_NONSTDC_NO_DEPRECATE)
diff --git a/lib/monkey/mk_core/deps/libevent/cmake/CheckFunctionExistsEx.c b/lib/monkey/mk_core/deps/libevent/cmake/CheckFunctionExistsEx.c
index 5ee3e5913..84bae9feb 100644
--- a/lib/monkey/mk_core/deps/libevent/cmake/CheckFunctionExistsEx.c
+++ b/lib/monkey/mk_core/deps/libevent/cmake/CheckFunctionExistsEx.c
@@ -11,7 +11,7 @@ int main(){
 #else
 int main(int ac, char*av[]){
 #endif
-#ifdef _WIN32
+#if defined(_WIN32) && !defined(__MINGW32__)
   void * p = &CHECK_FUNCTION_EXISTS;
 #else
   CHECK_FUNCTION_EXISTS();
diff --git a/lib/monkey/mk_core/deps/libevent/include/event2/util.h b/lib/monkey/mk_core/deps/libevent/include/event2/util.h
index defe00a3a..bf144cfe7 100644
--- a/lib/monkey/mk_core/deps/libevent/include/event2/util.h
+++ b/lib/monkey/mk_core/deps/libevent/include/event2/util.h
@@ -53,8 +53,8 @@ extern "C" {
 #ifdef EVENT__HAVE_STDDEF_H
 #include <stddef.h>
 #endif
-#ifdef _MSC_VER
-#include <BaseTsd.h>
+#ifdef _WIN32
+#include <basetsd.h>
 #endif
 #include <stdarg.h>
 #ifdef EVENT__HAVE_NETDB_H
diff --git a/lib/monkey/mk_core/mk_event_select.c b/lib/monkey/mk_core/mk_event_select.c
index be118ae3b..b592733bd 100644
--- a/lib/monkey/mk_core/mk_event_select.c
+++ b/lib/monkey/mk_core/mk_event_select.c
@@ -18,7 +18,7 @@
  */
 
 #ifdef _WIN32
-#include <Winsock2.h>
+#include <winsock2.h>
 #else
 #include <sys/select.h>
 #endif
diff --git a/lib/monkey/mk_core/mk_rconf.c b/lib/monkey/mk_core/mk_rconf.c
index 621ff2d3a..f57c60a61 100644
--- a/lib/monkey/mk_core/mk_rconf.c
+++ b/lib/monkey/mk_core/mk_rconf.c
@@ -23,7 +23,7 @@
 #include <string.h>
 #include <sys/types.h>
 #include <sys/stat.h>
-#ifndef _MSC_VER
+#ifndef _WIN32
 #include <glob.h>
 #endif
 
@@ -33,7 +33,7 @@
 #include <mk_core/mk_list.h>
 
 #ifdef _WIN32
-#include <Windows.h>
+#include <windows.h>
 #include <strsafe.h>
 #define PATH_MAX MAX_PATH
 #endif
@@ -589,7 +589,7 @@ static int mk_rconf_path_set(struct mk_rconf *conf, char *file)
     char *end;
     char path[PATH_MAX + 1];
 
-#ifdef _MSC_VER
+#ifdef _WIN32
     p = _fullpath(path, file, PATH_MAX + 1);
 #else
     p = realpath(file, path);
diff --git a/lib/monkey/mk_core/mk_utils.c b/lib/monkey/mk_core/mk_utils.c
index af7330733..2b2dcbc0b 100644
--- a/lib/monkey/mk_core/mk_utils.c
+++ b/lib/monkey/mk_core/mk_utils.c
@@ -22,6 +22,9 @@
 
 #include <stdio.h>
 #include <stdlib.h>
+#ifdef __MINGW32__
+#define _POSIX_THREAD_SAFE_FUNCTIONS
+#endif
 #include <time.h>
 #include <errno.h>
 #include <stdarg.h>
@@ -34,7 +37,7 @@
 
 #if defined (__linux__)
 #include <sys/prctl.h>
-#elif defined (_WIN32)
+#elif defined (_MSC_VER)
 #include <winsock2.h>
 
 #ifndef localtime_r
diff --git a/lib/monkey/mk_server/mk_net.c b/lib/monkey/mk_server/mk_net.c
index ff6c1355d..99443bfcf 100644
--- a/lib/monkey/mk_server/mk_net.c
+++ b/lib/monkey/mk_server/mk_net.c
@@ -26,7 +26,9 @@
 
 #ifdef _WIN32
 #include <winsock2.h>
+#if MK_HAVE_AFUNIX
 #include <afunix.h>
+#endif
 #else
 #include <sys/socket.h>
 #include <netinet/tcp.h>
diff --git a/plugins/CMakeLists.txt b/plugins/CMakeLists.txt
index 12f27bcdb..295c6b4f2 100644
--- a/plugins/CMakeLists.txt
+++ b/plugins/CMakeLists.txt
@@ -201,7 +201,9 @@ if (FLB_SYSTEM_WINDOWS)
   REGISTER_IN_PLUGIN("in_winstat")
   REGISTER_IN_PLUGIN("in_winevtlog")
   REGISTER_IN_PLUGIN("in_windows_exporter_metrics")
-  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W2")
+  if (MSVC)
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W2")
+  endif()
 else()
   REGISTER_IN_PLUGIN("in_serial")
 endif()
diff --git a/plugins/in_tail/CMakeLists.txt b/plugins/in_tail/CMakeLists.txt
index 31d865218..83ee195c4 100644
--- a/plugins/in_tail/CMakeLists.txt
+++ b/plugins/in_tail/CMakeLists.txt
@@ -25,13 +25,13 @@ if(FLB_PARSER)
     )
 endif()
 
-if(MSVC)
+if(FLB_SYSTEM_WINDOWS)
   set(src
     ${src}
     win32/stat.c
     win32/io.c
     )
-  FLB_PLUGIN(in_tail "${src}" "Shlwapi")
+  FLB_PLUGIN(in_tail "${src}" "shlwapi")
 else()
   FLB_PLUGIN(in_tail "${src}" "")
 endif()
diff --git a/plugins/in_tail/tail_file.c b/plugins/in_tail/tail_file.c
index 89a8c525b..a144be33f 100644
--- a/plugins/in_tail/tail_file.c
+++ b/plugins/in_tail/tail_file.c
@@ -40,10 +40,6 @@
 #include "tail_multiline.h"
 #include "tail_scan.h"
 
-#ifdef FLB_SYSTEM_WINDOWS
-#include "win32.h"
-#endif
-
 #include <xxhash.h>
 
 static inline void consume_bytes(char *buf, int bytes, int length)
diff --git a/plugins/in_tail/win32/io.c b/plugins/in_tail/win32/io.c
index 45928b04a..9336d1690 100644
--- a/plugins/in_tail/win32/io.c
+++ b/plugins/in_tail/win32/io.c
@@ -17,7 +17,7 @@
  *  limitations under the License.
  */
 
-#include <Windows.h>
+#include <windows.h>
 #include <stdlib.h>
 #include <stdint.h>
 #include <fcntl.h>
diff --git a/plugins/in_tail/win32/stat.c b/plugins/in_tail/win32/stat.c
index c2b14605a..52dce6473 100644
--- a/plugins/in_tail/win32/stat.c
+++ b/plugins/in_tail/win32/stat.c
@@ -17,7 +17,8 @@
  *  limitations under the License.
  */
 
-#include <Windows.h>
+#define _WIN32_WINNT _WIN32_WINNT_WS08
+#include <windows.h>
 #include <stdlib.h>
 #include <stdint.h>
 #include <io.h>
diff --git a/plugins/in_winevtlog/pack.c b/plugins/in_winevtlog/pack.c
index 68bb79122..39bfa1589 100644
--- a/plugins/in_winevtlog/pack.c
+++ b/plugins/in_winevtlog/pack.c
@@ -25,7 +25,6 @@
 #include <fluent-bit/flb_input_plugin.h>
 #include <msgpack.h>
 #include <sddl.h>
-#include <locale.h>
 #include "winevtlog.h"
 
 #define FORMAT_ISO8601 "%Y-%m-%d %H:%M:%S %z"
@@ -190,16 +189,11 @@ static int pack_systemtime(msgpack_packer *mp_pck, SYSTEMTIME *st)
 {
     CHAR buf[64];
     size_t len = 0;
-    _locale_t locale;
     TIME_ZONE_INFORMATION tzi;
     SYSTEMTIME st_local;
 
     GetTimeZoneInformation(&tzi);
 
-    locale = _get_current_locale();
-    if (locale == NULL) {
-        return -1;
-    }
     if (st != NULL) {
         SystemTimeToTzSpecificLocalTime(&tzi, st, &st_local);
 
@@ -210,13 +204,11 @@ static int pack_systemtime(msgpack_packer *mp_pck, SYSTEMTIME *st)
                         st_local.wMonth-1,
                         st_local.wYear-1900,
                         st_local.wDayOfWeek, 0, 0};
-        len = _strftime_l(buf, 64, FORMAT_ISO8601, &tm, locale);
+        len = strftime(buf, 64, FORMAT_ISO8601, &tm);
         if (len == 0) {
             flb_errno();
-            _free_locale(locale);
             return -1;
         }
-        _free_locale(locale);
         msgpack_pack_str(mp_pck, len);
         msgpack_pack_str_body(mp_pck, buf, len);
     }
@@ -234,25 +226,18 @@ static int pack_filetime(msgpack_packer *mp_pck, ULONGLONG filetime)
     size_t len = 0;
     FILETIME ft, ft_local;
     SYSTEMTIME st;
-    _locale_t locale;
 
-    locale = _get_current_locale();
-    if (locale == NULL) {
-        return -1;
-    }
     timestamp.QuadPart = filetime;
     ft.dwHighDateTime = timestamp.HighPart;
     ft.dwLowDateTime = timestamp.LowPart;
     FileTimeToLocalFileTime(&ft, &ft_local);
     if (FileTimeToSystemTime(&ft_local, &st)) {
         struct tm tm = {st.wSecond, st.wMinute, st.wHour, st.wDay, st.wMonth-1, st.wYear-1900, st.wDayOfWeek, 0, 0};
-        len = _strftime_l(buf, 64, FORMAT_ISO8601, &tm, locale);
+        len = strftime(buf, 64, FORMAT_ISO8601, &tm);
         if (len == 0) {
             flb_errno();
-            _free_locale(locale);
             return -1;
         }
-        _free_locale(locale);
         msgpack_pack_str(mp_pck, len);
         msgpack_pack_str_body(mp_pck, buf, len);
     }
diff --git a/plugins/in_winevtlog/winevtlog.h b/plugins/in_winevtlog/winevtlog.h
index d5db6eb1e..f4d1b44d2 100644
--- a/plugins/in_winevtlog/winevtlog.h
+++ b/plugins/in_winevtlog/winevtlog.h
@@ -21,7 +21,13 @@
 #ifndef FLB_WINEVTLOG_H
 #define FLB_WINEVTLOG_H
 
+#define _WIN32_WINNT _WIN32_WINNT_WS08
 #include <winevt.h>
+#ifdef __MINGW32__
+#define EVT_VARIANT_TYPE_MASK 0x7f
+#define EVT_VARIANT_TYPE_ARRAY 128
+#include <ole2.h>
+#endif
 
 struct winevtlog_config {
     unsigned int interval_sec;
diff --git a/plugins/in_winlog/pack.c b/plugins/in_winlog/pack.c
index 4547d5514..896cb535c 100644
--- a/plugins/in_winlog/pack.c
+++ b/plugins/in_winlog/pack.c
@@ -24,7 +24,6 @@
 #include <fluent-bit/flb_input_plugin.h>
 #include <msgpack.h>
 #include <sddl.h>
-#include <locale.h>
 #include "winlog.h"
 
 #define REGKEY_MAXLEN 256
@@ -84,25 +83,17 @@ static int pack_time(msgpack_packer *mp_pck, int time)
     size_t len;
     struct tm tm;
     char buf[64];
-    _locale_t locale;
 
     if (_localtime32_s(&tm, &time)) {
         flb_errno();
         return -1;
     }
 
-    locale = _get_current_locale();
-    if (locale == NULL) {
-        return -1;
-    }
-
-    len = _strftime_l(buf, 64, FMT_ISO8601, &tm, locale);
+    len = strftime(buf, 64, FMT_ISO8601, &tm);
     if (len == 0) {
         flb_errno();
-        _free_locale(locale);
         return -1;
     }
-    _free_locale(locale);
     msgpack_pack_str(mp_pck, len);
     msgpack_pack_str_body(mp_pck, buf, len);
 
diff --git a/plugins/in_winstat/CMakeLists.txt b/plugins/in_winstat/CMakeLists.txt
index ed36a5615..af200b631 100644
--- a/plugins/in_winstat/CMakeLists.txt
+++ b/plugins/in_winstat/CMakeLists.txt
@@ -1,4 +1,8 @@
 set(src
   winstat.c)
 
-FLB_PLUGIN(in_winstat "${src}" "")
+if(FLB_SYSTEM_WINDOWS AND NOT MSVC)
+  set(WINSTAT_DEPS -lpsapi)
+endif()
+
+FLB_PLUGIN(in_winstat "${src}" ${WINSTAT_DEPS})
diff --git a/plugins/out_file/file.c b/plugins/out_file/file.c
index 3539b507b..d512ebebe 100644
--- a/plugins/out_file/file.c
+++ b/plugins/out_file/file.c
@@ -31,8 +31,8 @@
 #include <fcntl.h>
 
 #ifdef FLB_SYSTEM_WINDOWS
-#include <Shlobj.h>
-#include <Shlwapi.h>
+#include <shlobj.h>
+#include <shlwapi.h>
 #endif
 
 #include "file.h"
diff --git a/plugins/out_s3/s3.c b/plugins/out_s3/s3.c
index bba11849d..083254b02 100644
--- a/plugins/out_s3/s3.c
+++ b/plugins/out_s3/s3.c
@@ -375,7 +375,11 @@ static int init_seq_index(void *context) {
     }
 
     /* Create directory path if it doesn't exist */
+#ifdef _WIN32
+    ret = mkdir(ctx->metadata_dir);
+#else
     ret = mkdir(ctx->metadata_dir, 0700);
+#endif
     if (ret < 0 && errno != EEXIST) {
         flb_plg_error(ctx->ins, "Failed to create metadata directory");
         return -1;
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 630f875bf..a10451a2d 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -90,7 +90,9 @@ if(FLB_SYSTEM_WINDOWS)
     ${src}
     flb_dlfcn_win32.c
     )
-  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W2")
+  if(MSVC)
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W2")
+  endif()
 endif()
 
 if(FLB_PARSER)
@@ -236,12 +238,21 @@ check_symbol_exists(accept4 "sys/socket.h" HAVE_ACCEPT4)
 
 # Core dependencies
 if(FLB_SYSTEM_WINDOWS)
-  set(FLB_DEPS
-    "ws2_32.lib"
-    "crypt32.lib"
-    "Bcrypt.lib"
-    "Shlwapi.lib"
-    )
+  if(MSVC)
+    set(FLB_DEPS
+      "ws2_32.lib"
+      "crypt32.lib"
+      "bcrypt.lib"
+      "shlwapi.lib"
+      )
+  else()
+    set(FLB_DEPS
+      "ws2_32.dll"
+      "crypt32.dll"
+      "bcrypt.dll"
+      "shlwapi.dll"
+      )
+  endif()
 else()
   set(FLB_DEPS
     ${FLB_DEPS}
@@ -397,12 +408,17 @@ if(FLB_SHARED_LIB)
     PROPERTIES OUTPUT_NAME fluent-bit)
 
   # Windows doesn't provide pthread (see winpthreads.c in mk_core).
-  if(CMAKE_SYSTEM_NAME MATCHES "Windows")
+  if(MSVC)
     target_link_libraries(fluent-bit-shared ${FLB_DEPS})
   else()
     target_link_libraries(fluent-bit-shared ${FLB_DEPS} -lpthread)
   endif()
 
+  if(FLB_SYSTEM_WINDOWS)
+    # Remove the default "lib" prefix on Windows.
+    set_target_properties(fluent-bit-shared PROPERTIES PREFIX "")
+  endif()
+
   if (MSVC)
     set_target_properties(fluent-bit-shared
       PROPERTIES PDB_NAME fluent-bit.dll)
@@ -463,6 +479,10 @@ if(FLB_BINARY)
 
   target_link_libraries(fluent-bit-bin fluent-bit-static ${CMAKE_THREAD_LIBS_INIT})
 
+  if(FLB_SYSTEM_WINDOWS AND NOT MSVC)
+    target_link_libraries(fluent-bit-bin -lws2_32 -lpsapi)
+  endif()
+
   set_target_properties(fluent-bit-bin
     PROPERTIES
     OUTPUT_NAME ${FLB_OUT_NAME}
diff --git a/src/config_format/flb_cf_fluentbit.c b/src/config_format/flb_cf_fluentbit.c
index 08b878fab..c8ec54ce1 100644
--- a/src/config_format/flb_cf_fluentbit.c
+++ b/src/config_format/flb_cf_fluentbit.c
@@ -30,12 +30,12 @@
 #include <ctype.h>
 #include <sys/types.h>
 #include <sys/stat.h>
-#ifndef _MSC_VER
+#ifndef _WIN32
 #include <glob.h>
 #endif
 
 #ifdef _WIN32
-#include <Windows.h>
+#include <windows.h>
 #include <strsafe.h>
 #define PATH_MAX MAX_PATH
 #endif
diff --git a/src/config_format/flb_cf_yaml.c b/src/config_format/flb_cf_yaml.c
index cdda77be2..4d9e9d4b0 100644
--- a/src/config_format/flb_cf_yaml.c
+++ b/src/config_format/flb_cf_yaml.c
@@ -30,12 +30,12 @@
 #include <ctype.h>
 #include <sys/types.h>
 #include <sys/stat.h>
-#ifndef _MSC_VER
+#ifndef _WIN32
 #include <glob.h>
 #endif
 
 #ifdef _WIN32
-#include <Windows.h>
+#include <windows.h>
 #include <strsafe.h>
 #define PATH_MAX MAX_PATH
 #endif
diff --git a/src/flb_hash.c b/src/flb_hash.c
index fe3035f90..92e764671 100644
--- a/src/flb_hash.c
+++ b/src/flb_hash.c
@@ -24,6 +24,10 @@
 #include <fluent-bit/flb_str.h>
 #include <xxhash.h>
 
+#if defined(_WIN32) && defined(__MINGW32__)
+#define random() rand()
+#endif
+
 static inline void flb_hash_entry_free(struct flb_hash *ht,
                                        struct flb_hash_entry *entry)
 {
diff --git a/src/flb_network.c b/src/flb_network.c
index 992eb1db0..6a89d26bd 100644
--- a/src/flb_network.c
+++ b/src/flb_network.c
@@ -28,11 +28,18 @@
 #include <ctype.h>
 
 #ifdef FLB_SYSTEM_WINDOWS
+#include <sdkddkver.h>
+#define _WIN32_WINNT _WIN32_WINNT_WS08
+#include <winsock2.h>
 #define poll WSAPoll
 #else
 #include <sys/poll.h>
 #endif
 
+#if defined(FLB_SYSTEM_WINDOWS) && !defined(AI_NUMERICSERV)
+#define AI_NUMERICSERV 0x0400
+#endif
+
 #include <fluent-bit/flb_info.h>
 #include <fluent-bit/flb_compat.h>
 #include <fluent-bit/flb_info.h>
diff --git a/src/flb_sosreport.c b/src/flb_sosreport.c
index 7bbd79aef..2768163f1 100644
--- a/src/flb_sosreport.c
+++ b/src/flb_sosreport.c
@@ -28,7 +28,7 @@
 #include <fluent-bit/flb_utils.h>
 #include <fluent-bit/flb_kv.h>
 
-#ifndef _MSC_VER
+#ifndef _WIN32
 #include <sys/utsname.h>
 #endif
 
@@ -107,7 +107,7 @@ static void print_properties(struct mk_list *props)
     }
 }
 
-#ifdef _MSC_VER
+#ifdef _WIN32
 /* A definition table of SYSTEM_INFO.wProcessorArchitecture.
  *
  * This is a streight-forward translation of the official manual.
@@ -188,7 +188,7 @@ int flb_sosreport(struct flb_config *config)
     printf("    Built Flags\t\t%s\n", FLB_INFO_FLAGS);
     printf("\n");
 
-#ifndef _MSC_VER
+#ifndef _WIN32
     struct utsname uts;
     uname(&uts);
 
diff --git a/src/win32/winsvc.c b/src/win32/winsvc.c
index 9e0942ee5..b82f2780b 100644
--- a/src/win32/winsvc.c
+++ b/src/win32/winsvc.c
@@ -17,8 +17,8 @@
  *  limitations under the License.
  */
 
-#include <Windows.h>
-#include <Shlwapi.h>
+#include <windows.h>
+#include <shlwapi.h>
 
 struct flb_config;
 extern struct flb_config *config;
