// This is a simplified implementation of the Cloud Logging query language [1].
// The Logging query language is itself a more complex implementation of
// AIP-160 ("Filtering") [2], which is defined by an EBNF grammar [3].
// We do not implement every feature of either the Logging query language or
// AIP-160, but rather we implement a subset of the former.
//  [1] https://cloud.google.com/logging/docs/view/logging-query-language
//  [2] https://google.aip.dev/160
//  [3] https://google.aip.dev/assets/misc/ebnf-filtering.txt

dot : '.' ;
has : ':' ;
_or  : 'O' 'R' ;
_and : 'A' 'N' 'D' ;
not : 'N' 'O' 'T' ;
or : _or ;
and : _and ;

lparen : '(' ;
rparen : ')' ;
comma : ',' ;
less_than : '<' ;
greater_than : '>' ;
greater_equals : '>' '=' ;
less_equals : '<' '=' ;
not_equals : '!' '=' ;
matches_regexp : '=' '~' ;
not_matches_regexp : '!' '~' ;
equals : '=' ;
minus : '-' ;
plus : '+' ;
tilde : '~' ;
_quote : '"' ;
backslash : '\\' ;

orOp : {_ws_character} _or {_ws_character} ;
andOp : {_ws_character} _and {_ws_character} ;

ws : _ws_character {_ws_character} ;

_ws_character: ' ' | '\r' | '\t' | '\u000C' | '\u00A0' | '\n';

_character
  : _ws_character
  | '!'
  | '#' - '['  // Exclude '\'
  | ']' - '~'
  | _characters_from_u_00a1
  | _text_esc
  | '\\' .
  | '\\'  /* A raw backslash (not followed by anything). Lower priority than escape sequences.*/
;

text
  : (_start_char | _number_prefix | _text_esc) {_mid_char | _text_esc}
  ;

_number_prefix
  : ['-'] _digit
  ;

_text_esc
  : _escaped_char
  | _unicode_esc
  | _octal_esc
  | _hex_esc
  ;

_characters_from_u_00a1 : '\u00a1' - '\ufffe' ;

_unicode_esc
    : '\\' 'u' _hex_digit _hex_digit _hex_digit _hex_digit
    ;

_octal_esc
  : '\\' ('0'-'3') ('0'-'7') ('0'-'7')
  | '\\' ('0'-'7') ('0'-'7')
  | '\\' ('0'-'7')
  ;

_hex_esc
  : '\\' 'x' _hex_digit _hex_digit
  ;

_digit
  : '0' - '9'
  ;

_hex_digit
  : (_digit | 'a'-'f' | 'A'-'F')
  ;

_exclamation : '!' ; // XXX

_start_char
  : _exclamation
  | '#' - '\''
  | '*'
  | '/'
  | ';'
  | '?'
  | '@'
  | 'A' - 'Z'
  | '['
  | ']'
  | '^' - '}'
  | _characters_from_u_00a1
  ;

_mid_char
  : _start_char
  | _digit
  | '+'
  | '-'
  ;

_escaped_char
  : '\\' ','
  | '\\' ':'
  | '\\' '='
  | '\\' '<'
  | '\\' '>'
  | '\\' '+'
  | '\\' '~'
  | '\\' '"'
  | '\\' '\\'
  | '\\' '.'
  | '\\' '*'
  ;

string : '"' {_character} '"' ;

<<
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import (
	"github.com/GoogleCloudPlatform/ops-agent/confgenerator/filter/internal/ast"
	"github.com/GoogleCloudPlatform/ops-agent/confgenerator/filter/internal/generated/token"
)
>>

Filter
: Expression << ast.Simplify($0) >>
| ws Expression << ast.Simplify($1) >>
| Expression ws << ast.Simplify($0) >>
| ws Expression ws << ast.Simplify($1) >>
;

Expression
: AmbiguousSequence << ast.NewConjunction($0) >>
| Expression andOp AmbiguousSequence << $0.(ast.Conjunction).Append($2) >>
;

AmbiguousSequence
: AmbiguousFactor << ast.NewConjunction($0) >>
| AmbiguousSequence ws AmbiguousFactor << $0.(ast.Conjunction).Append($2) >>
;

AmbiguousFactor
: Term << ast.NewDisjunction($0) >>
| AmbiguousFactor orOp Term << $0.(ast.Disjunction).Append($2) >>
;

Term
: Primitive
| not Primitive << &ast.Negation{$1.(ast.Expression)}, nil >>
| not ws Primitive << &ast.Negation{$2.(ast.Expression)}, nil >>
| minus Primitive << &ast.Negation{$1.(ast.Expression)}, nil >>
;

Primitive
: Restriction
| Composite
;

Restriction
: Comparable << ast.NewRestriction($0, "GLOBAL", nil) >>
| Comparable Comparator Arg << ast.NewRestriction($0, $1, $2) >>
;

Comparable
: Member
// | Function
;

Member
: Item << ast.Target{$0.(string)}, nil >>
| Member dot ItemKeyword << append($0.(ast.Target), $2.(string)), nil >>
;

Composite
: lparen Expression rparen << $1, nil >>
| lparen Expression ws rparen << $1, nil >>
| lparen ws Expression rparen << $2, nil >>
| lparen ws Expression ws rparen << $2, nil >>
;

Arg
: Comparable
// | Composite
;

Item
: Value
;

Value
: text << ast.ParseText($0) >>
| Phrase
;

Phrase
: string << ast.ParseString($0) >>
;

ItemKeyword
: Item
| Keyword << string($0.(*token.Token).Lit), nil >>
;

Keyword
: or
| and
| not
;

Comparator
: Comparison
| ws Comparison << $1, nil >>
| Comparison ws
| ws Comparison ws << $1, nil >>
;

Comparison
: less_equals
| less_than
| greater_equals
| greater_than
| not_equals
| equals
| has
| matches_regexp
| not_matches_regexp
;
