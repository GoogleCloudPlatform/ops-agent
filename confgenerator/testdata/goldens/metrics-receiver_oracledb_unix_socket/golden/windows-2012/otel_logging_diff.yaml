  strings.Join({
  	... // 21824 identical bytes
  	"ements:\n    - context: metric\n      statements:\n      - extract_",
  	"count_metric(true) where name == \"grpc.client.attempt.duration\"\n",
- 	"receivers:\n  hostmetrics/hostmetrics:\n    collection_interval: 6",
- 	"0s\n    scrapers:\n      cpu: {}\n      disk: {}\n      filesystem: ",
- 	"{}\n      load: {}\n      memory: {}\n      network: {}\n      pagin",
- 	"g: {}\n      process:\n        metrics:\n          process.handles:",
- 	"\n            enabled: true\n        mute_process_all_errors: true",
- 	"\n        mute_process_exe_error: true\n        mute_process_name_",
- 	"error: true\n      processes: {}\n  otlpjsonfile/ops_agent:\n    in",
- 	"clude:\n    - enabled_receivers_otlp.json\n    - feature_tracking_",
- 	"otlp.json\n    poll_interval: 1m0s\n    replay_file: true\n  promet",
- 	"heus/agent_prometheus:\n    config:\n      scrape_configs:\n      -",
- 	" job_name: logging-collector\n        metrics_path: /metrics\n    ",
- 	"    scrape_interval: 1m\n        static_configs:\n        - target",
- 	"s:\n          - 0.0.0.0:20202\n      - job_name: otel-collector\n  ",
- 	"      scrape_interval: 1m\n        static_configs:\n        - targ",
- 	"ets:\n          - 0.0.0.0:20201\n  sqlquery/oracledb:\n    collecti",
- 	"on_interval: 60s\n    datasource: oracle://@localhost:1521/?SID=d",
- 	"b19c&UNIX+SOCKET=%2Ftmp%2Foracle%2Fsocket\n    driver: oracle\n   ",
- 	" queries:\n    - metrics:\n      - attribute_columns:\n        - DA",
- 	"TABASE_ID\n        - GLOBAL_NAME\n        - TABLESPACE_NAME\n      ",
- 	"  - CONTENTS\n        data_type: sum\n        description: The siz",
- 	"e of tablespaces in the database.\n        metric_name: oracle.ta",
- 	"blespace.size\n        monotonic: false\n        static_attributes",
- 	":\n          db.system: oracle\n          state: free\n        unit",
- 	": by\n        value_column: FREE_SPACE\n        value_type: int\n  ",
- 	"    - attribute_columns:\n        - DATABASE_ID\n        - GLOBAL_",
- 	"NAME\n        - TABLESPACE_NAME\n        - CONTENTS\n        data_t",
- 	"ype: sum\n        description: The size of tablespaces in the dat",
- 	"abase.\n        metric_name: oracle.tablespace.size\n        monot",
- 	"onic: false\n        static_attributes:\n          db.system: orac",
- 	"le\n          state: used\n        unit: by\n        value_column: ",
- 	"USED_SPACE\n        value_type: int\n      sql: \"SELECT (SELECT DB",
- 	"ID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM",
- 	` sys.GLOBAL_NAME) GLOBAL_NAME, ts.TABLESPACE_NAME, ts.CONTENTS,\`,
- 	`n\t\t\t\t(select sum(df.bytes) from sys.dba_data_files df where `,
- 	"df.tablespace_name=ts.tablespace_name)-(select sum(fs.bytes) fro",
- 	"m sys.dba_free_space fs where fs.tablespace_name=ts.tablespace_n",
- 	`ame) AS USED_SPACE,\n\t\t\t\t(select sum(fs.bytes) from sys.dba_`,
- 	"free_space fs where fs.tablespace_name=ts.tablespace_name) AS FR",
- 	`EE_SPACE\n\t\t\tFROM sys.dba_tablespaces ts\n\t\t\tWHERE ts.cont`,
- 	`ents <> 'TEMPORARY'\n\t\t\tUNION ALL\n\t\t\tSELECT (SELECT DBID `,
- 	"FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sy",
- 	"s.GLOBAL_NAME) GLOBAL_NAME, ts.NAME TABLESPACE_NAME, 'TEMPORARY'",
- 	` as CONTENTS,\n\t\t\t\t\tSUM(ss.USED_BLOCKS * t.BLOCK_SIZE) USED`,
- 	`_SPACE,\n\t\t\t\t\tSUM(t.BYTES) - SUM(ss.USED_BLOCKS * t.BLOCK_S`,
- 	`IZE) FREE_SPACE\n\t\t\tFROM SYS.V_$$sort_segment ss\n\t\t\tJOIN `,
- 	`sys.v_$$tablespace ts\n\t\t\tON ss.TABLESPACE_NAME = ts.NAME\n\t`,
- 	`\t\tJOIN sys.v_$$tempfile t\n\t\t\tON t.TS# = ss.TS#\n\t\t\tGROU`,
- 	"P BY ts.NAME\"\n    - metrics:\n      - attribute_columns:\n        ",
- 	"- DATABASE_ID\n        - GLOBAL_NAME\n        - STATUS\n        - C",
- 	"ONTENTS\n        data_type: sum\n        description: The number o",
- 	"f tablespaces in the database.\n        metric_name: oracle.table",
- 	"space.count\n        monotonic: false\n        static_attributes:\n",
- 	"          db.system: oracle\n        unit: \"{tablespaces}\"\n      ",
- 	"  value_column: COUNT\n        value_type: int\n      sql: SELECT ",
- 	"(SELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL",
- 	"_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, CONTENTS, STATUS, COUNT",
- 	"(*) COUNT FROM sys.dba_tablespaces GROUP BY STATUS, CONTENTS\n   ",
- 	" - metrics:\n      - attribute_columns:\n        - DATABASE_ID\n   ",
- 	"     - GLOBAL_NAME\n        data_type: sum\n        description: T",
- 	"he number of seconds since the last RMAN backup.\n        metric_",
- 	"name: oracle.backup.latest\n        monotonic: true\n        stati",
- 	"c_attributes:\n          db.system: oracle\n        unit: s\n      ",
- 	"  value_column: LATEST_BACKUP\n        value_type: int\n      sql:",
- 	" SELECT (SELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELEC",
- 	"T GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, (SELECT round(c",
- 	"ase when max(start_time) is null then -1 when sysdate - max(star",
- 	"t_time) > 0 then (sysdate - max(start_time)) * 86400 else 0 end)",
- 	" FROM SYS.V_$$rman_backup_job_details ) LATEST_BACKUP FROM DUAL\n",
- 	"    - metrics:\n      - attribute_columns:\n        - DATABASE_ID\n",
- 	"        - GLOBAL_NAME\n        - INSTANCE_ID\n        data_type: s",
- 	"um\n        description: The current number of processes.\n       ",
- 	" metric_name: oracle.process.count\n        monotonic: false\n    ",
- 	"    static_attributes:\n          db.system: oracle\n        unit:",
- 	" \"{processes}\"\n        value_column: PROCESSES_UTIL\n        valu",
- 	"e_type: int\n      - attribute_columns:\n        - DATABASE_ID\n   ",
- 	"     - GLOBAL_NAME\n        - INSTANCE_ID\n        data_type: sum\n",
- 	"        description: The maximum number of processes allowed.\n  ",
- 	"      metric_name: oracle.process.limit\n        monotonic: false",
- 	"\n        static_attributes:\n          db.system: oracle\n        ",
- 	"unit: \"{processes}\"\n        value_column: PROCESSES_LIMIT_VAL\n  ",
- 	"      value_type: int\n      - attribute_columns:\n        - DATAB",
- 	"ASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        data_",
- 	"type: sum\n        description: The current number of sessions.\n ",
- 	"       metric_name: oracle.session.count\n        monotonic: fals",
- 	"e\n        static_attributes:\n          db.system: oracle\n       ",
- 	" unit: \"{sessions}\"\n        value_column: SESSIONS_UTIL\n        ",
- 	"value_type: int\n      - attribute_columns:\n        - DATABASE_ID",
- 	"\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        data_type: ",
- 	"sum\n        description: The maximum number of sessions allowed.",
- 	"\n        metric_name: oracle.session.limit\n        monotonic: fa",
- 	"lse\n        static_attributes:\n          db.system: oracle\n     ",
- 	"   unit: \"{sessions}\"\n        value_column: SESSIONS_LIMIT_VAL\n ",
- 	"       value_type: int\n      sql: |-\n        SELECT DATABASE_ID,",
- 	" GLOBAL_NAME, INST_ID INSTANCE_ID, MAX(PROCESSES_UTIL) PROCESSES",
- 	"_UTIL, MAX(PROCESSES_LIMIT_VAL) PROCESSES_LIMIT_VAL, MAX(SESSION",
- 	"S_UTIL) SESSIONS_UTIL, MAX(SESSIONS_LIMIT_VAL) SESSIONS_LIMIT_VA",
- 	"L\n        \t\t\tFROM (SELECT (SELECT DBID FROM SYS.GV_$$DATABASE) D",
- 	"ATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAM",
- 	"E, INST_ID, PROCESSES_UTIL, PROCESSES_LIMIT_VAL, SESSIONS_UTIL, ",
- 	"SESSIONS_LIMIT_VAL\n        \t\t\tFROM (SELECT * FROM SYS.GV_$$resou",
- 	"rce_limit\n        \t\t\t\tWHERE RESOURCE_NAME IN ('processes', 'sess",
- 	"ions'))\n        \t\t\t\tPIVOT(\n        \t\t\t\t\tMAX(TRIM(CURRENT_UTILIZA",
- 	"TION)) UTIL,\n        \t\t\t\t\tMAX(TRIM(LIMIT_VALUE)) LIMIT_VAL\n     ",
- 	"   \t\t\t\t\tFOR RESOURCE_NAME\n        \t\t\t\t\tIN (\n        \t\t\t\t\t\t'proce",
- 	"sses' PROCESSES,\n        \t\t\t\t\t\t'sessions' SESSIONS\n        \t\t\t\t\t",
- 	")\n        \t\t\t\t)\n        \t\t\t)\n        \t\t\tGROUP BY DATABASE_ID, GL",
- 	"OBAL_NAME, INST_ID\n    - metrics:\n      - attribute_columns:\n   ",
- 	"     - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n ",
- 	"       - PROGRAM\n        data_type: sum\n        description: The",
- 	" programmable global area memory allocated by process.\n        m",
- 	"etric_name: oracle.process.pga_memory.size\n        monotonic: fa",
- 	"lse\n        static_attributes:\n          db.system: oracle\n     ",
- 	"     state: used\n        unit: by\n        value_column: USED_MEM",
- 	"\n        value_type: int\n      - attribute_columns:\n        - DA",
- 	"TABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        - ",
- 	"PROGRAM\n        data_type: sum\n        description: The programm",
- 	"able global area memory allocated by process.\n        metric_nam",
- 	"e: oracle.process.pga_memory.size\n        monotonic: false\n     ",
- 	"   static_attributes:\n          db.system: oracle\n          stat",
- 	"e: free\n        unit: by\n        value_column: FREE_MEM\n        ",
- 	"value_type: int\n      sql: SELECT (SELECT DBID FROM SYS.GV_$$DAT",
- 	"ABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GL",
- 	"OBAL_NAME, INST_ID INSTANCE_ID, PROGRAM, SUM(PGA_USED_MEM) USED_",
- 	"MEM, SUM(PGA_ALLOC_MEM) - SUM(PGA_USED_MEM) FREE_MEM FROM SYS.GV",
- 	"_$$PROCESS WHERE PROGRAM <> 'PSEUDO' GROUP BY PROGRAM, INST_ID\n ",
- 	"   - metrics:\n      - attribute_columns:\n        - DATABASE_ID\n ",
- 	"       - GLOBAL_NAME\n        - INSTANCE_ID\n        - WAIT_CLASS\n",
- 	"        data_type: sum\n        description: The number of wait e",
- 	"vents experienced.\n        metric_name: oracle.wait.count\n      ",
- 	"  monotonic: true\n        static_attributes:\n          db.system",
- 	": oracle\n          type: foreground\n        unit: \"{events}\"\n   ",
- 	"     value_column: TOTAL_WAITS_FG\n        value_type: int\n      ",
- 	"- attribute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME",
- 	"\n        - INSTANCE_ID\n        - WAIT_CLASS\n        data_type: s",
- 	"um\n        description: The number of wait events experienced.\n ",
- 	"       metric_name: oracle.wait.count\n        monotonic: true\n  ",
- 	"      static_attributes:\n          db.system: oracle\n          t",
- 	"ype: background\n        unit: \"{events}\"\n        value_column: T",
- 	"OTAL_WAITS_BG\n        value_type: int\n      - attribute_columns:",
- 	"\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_",
- 	"ID\n        - WAIT_CLASS\n        data_type: sum\n        descripti",
- 	"on: The amount of time waited for wait events.\n        metric_na",
- 	"me: oracle.wait.time\n        monotonic: true\n        static_attr",
- 	"ibutes:\n          db.system: oracle\n          type: foreground\n ",
- 	"       unit: cs\n        value_column: TIME_WAITED_FG\n        val",
- 	"ue_type: int\n      - attribute_columns:\n        - DATABASE_ID\n  ",
- 	"      - GLOBAL_NAME\n        - INSTANCE_ID\n        - WAIT_CLASS\n ",
- 	"       data_type: sum\n        description: The amount of time wa",
- 	"ited for wait events.\n        metric_name: oracle.wait.time\n    ",
- 	"    monotonic: true\n        static_attributes:\n          db.syst",
- 	"em: oracle\n          type: background\n        unit: cs\n        v",
- 	"alue_column: TIME_WAITED_BG\n        value_type: int\n      - attr",
- 	"ibute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n     ",
- 	"   - INSTANCE_ID\n        - WAIT_CLASS\n        data_type: sum\n   ",
- 	"     description: The number of timeouts for wait events.\n      ",
- 	"  metric_name: oracle.wait.timeouts\n        monotonic: true\n    ",
- 	"    static_attributes:\n          db.system: oracle\n          typ",
- 	"e: foreground\n        unit: \"{timeouts}\"\n        value_column: T",
- 	"OTAL_TIMEOUTS_FG\n        value_type: int\n      - attribute_colum",
- 	"ns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTAN",
- 	"CE_ID\n        - WAIT_CLASS\n        data_type: sum\n        descri",
- 	"ption: The number of timeouts for wait events.\n        metric_na",
- 	"me: oracle.wait.timeouts\n        monotonic: true\n        static_",
- 	"attributes:\n          db.system: oracle\n          type: backgrou",
- 	"nd\n        unit: \"{timeouts}\"\n        value_column: TOTAL_TIMEOU",
- 	"TS_BG\n        value_type: int\n      sql: SELECT (SELECT DBID FRO",
- 	"M SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.G",
- 	"LOBAL_NAME) GLOBAL_NAME, INST_ID INSTANCE_ID, WAIT_CLASS, SUM(to",
- 	"tal_waits_fg) AS TOTAL_WAITS_FG, SUM(total_waits)-SUM(total_wait",
- 	"s_fg) AS TOTAL_WAITS_BG, SUM(total_timeouts_fg) AS TOTAL_TIMEOUT",
- 	"S_FG, SUM(total_timeouts)-SUM(TOTAL_TIMEOUTS_FG) AS TOTAL_TIMEOU",
- 	"TS_BG, SUM(time_waited_fg) AS TIME_WAITED_FG, SUM(time_waited)-S",
- 	"UM(TIME_WAITED_FG) AS TIME_WAITED_BG FROM SYS.GV_$$system_event ",
- 	"WHERE wait_class <> 'Idle' GROUP BY INST_ID, WAIT_CLASS\n    - me",
- 	"trics:\n      - attribute_columns:\n        - DATABASE_ID\n        ",
- 	"- GLOBAL_NAME\n        - INSTANCE_ID\n        data_type: gauge\n   ",
- 	"     description: The average sql service response time.\n       ",
- 	" metric_name: oracle.service.response_time\n        static_attrib",
- 	"utes:\n          db.system: oracle\n        unit: cs\n        value",
- 	"_column: RESPONSE_TIME\n        value_type: double\n      - attrib",
- 	"ute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n       ",
- 	" - INSTANCE_ID\n        data_type: gauge\n        description: Rat",
- 	"io of buffer cache hits to requests.\n        metric_name: oracle",
- 	".buffer.cache.ratio\n        static_attributes:\n          db.syst",
- 	"em: oracle\n        unit: \"%\"\n        value_column: BUFFER_HIT_RA",
- 	"TIO\n        value_type: double\n      - attribute_columns:\n      ",
- 	"  - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n    ",
- 	"    data_type: gauge\n        description: Ratio of row cache hit",
- 	"s to requests.\n        metric_name: oracle.row.cache.ratio\n     ",
- 	"   static_attributes:\n          db.system: oracle\n        unit: ",
- 	"\"%\"\n        value_column: ROW_HIT_RATIO\n        value_type: doub",
- 	"le\n      sql: |-\n        SELECT DATABASE_ID, GLOBAL_NAME, INST_I",
- 	"D INSTANCE_ID, MAX(RESPONSE_TIME) RESPONSE_TIME, MAX(BUFFER_HIT_",
- 	"RATIO) BUFFER_HIT_RATIO, MAX(ROW_HIT_RATIO) ROW_HIT_RATIO\n      ",
- 	`  			FROM (SELECT (SELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_`,
- 	"ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, INST_",
- 	"ID, END_TIME, RESPONSE_TIME, BUFFER_HIT_RATIO, ROW_HIT_RATIO\n   ",
- 	"     \t\t\tFROM (SELECT * FROM SYS.GV_$$sysmetric\n        \t\t\t\tWHERE",
- 	" METRIC_NAME IN ('SQL Service Response Time', 'Buffer Cache Hit ",
- 	"Ratio', 'Row Cache Hit Ratio')\n        \t\t\t\tAND GROUP_ID = 2)\n   ",
- 	"     \t\t\t\tPIVOT(\n        \t\t\t\t\tMAX(VALUE)\n        \t\t\t\t\tFOR METRIC_",
- 	"NAME\n        \t\t\t\t\tIN (\n        \t\t\t\t\t\t'SQL Service Response Time'",
- 	" RESPONSE_TIME,\n        \t\t\t\t\t\t'Buffer Cache Hit Ratio' BUFFER_HI",
- 	"T_RATIO,\n        \t\t\t\t\t\t'Row Cache Hit Ratio' ROW_HIT_RATIO\n     ",
- 	"   \t\t\t\t\t)\n        \t\t\t\t)\n        \t\t\t)\n        \t\t\tGROUP BY DATABAS",
- 	"E_ID, GLOBAL_NAME, INST_ID\n    - metrics:",
+ 	"  transform/windows__event__log_0:\n    error_mode: ignore\n    lo",
+ 	"g_statements:\n    - context: log\n      statements:\n      - delet",
+ 	`e_key(cache, "__field_0") where (cache != nil and cache["__field`,
+ 	"_0\"] != nil)\n      - set(cache[\"__field_0\"], body[\"channel\"]) wh",
+ 	"ere (body != nil and body[\"channel\"] != nil)\n      - delete_key(",
+ 	`cache, "__field_1") where (cache != nil and cache["__field_1"] !`,
+ 	"= nil)\n      - set(cache[\"__field_1\"], body[\"computer\"]) where (",
+ 	"body != nil and body[\"computer\"] != nil)\n      - delete_key(cach",
+ 	`e, "__field_2") where (cache != nil and cache["__field_2"] != ni`,
+ 	"l)\n      - set(cache[\"__field_2\"], body[\"event_data\"][\"binary\"])",
+ 	` where (body != nil and body["event_data"] != nil and body["even`,
+ 	"t_data\"][\"binary\"] != nil)\n      - delete_key(cache, \"__field_3\"",
+ 	") where (cache != nil and cache[\"__field_3\"] != nil)\n      - set",
+ 	`(cache["__field_3"], body["event_id"]["id"]) where (body != nil `,
+ 	"and body[\"event_id\"] != nil and body[\"event_id\"][\"id\"] != nil)\n ",
+ 	`     - delete_key(cache, "__field_4") where (cache != nil and ca`,
+ 	"che[\"__field_4\"] != nil)\n      - set(cache[\"__field_4\"], body[\"l",
+ 	"evel\"]) where (body != nil and body[\"level\"] != nil)\n      - del",
+ 	`ete_key(cache, "__field_5") where (cache != nil and cache["__fie`,
+ 	"ld_5\"] != nil)\n      - set(cache[\"__field_5\"], body[\"message\"]) ",
+ 	"where (body != nil and body[\"message\"] != nil)\n      - delete_ke",
+ 	`y(cache, "__field_6") where (cache != nil and cache["__field_6"]`,
+ 	" != nil)\n      - set(cache[\"__field_6\"], body[\"event_id\"][\"quali",
+ 	`fiers"]) where (body != nil and body["event_id"] != nil and body`,
+ 	"[\"event_id\"][\"qualifiers\"] != nil)\n      - delete_key(cache, \"__",
+ 	"field_7\") where (cache != nil and cache[\"__field_7\"] != nil)\n   ",
+ 	`   - set(cache["__field_7"], body["record_id"]) where (body != n`,
+ 	"il and body[\"record_id\"] != nil)\n      - delete_key(cache, \"__fi",
+ 	"eld_8\") where (cache != nil and cache[\"__field_8\"] != nil)\n     ",
+ 	` - set(cache["__field_8"], body["security"]["user_id"]) where (b`,
+ 	`ody != nil and body["security"] != nil and body["security"]["use`,
+ 	"r_id\"] != nil)\n      - delete_key(cache, \"__field_9\") where (cac",
+ 	"he != nil and cache[\"__field_9\"] != nil)\n      - set(cache[\"__fi",
+ 	`eld_9"], body["provider"]["name"]) where (body != nil and body["`,
+ 	"provider\"] != nil and body[\"provider\"][\"name\"] != nil)\n      - d",
+ 	`elete_key(cache, "__field_10") where (cache != nil and cache["__`,
+ 	"field_10\"] != nil)\n      - set(cache[\"__field_10\"], body[\"event_",
+ 	`data"]["data"]) where (body != nil and body["event_data"] != nil`,
+ 	" and body[\"event_data\"][\"data\"] != nil)\n      - delete_key(cache",
+ 	`, "__field_11") where (cache != nil and cache["__field_11"] != n`,
+ 	"il)\n      - set(cache[\"__field_11\"], body[\"system_time\"]) where ",
+ 	"(body != nil and body[\"system_time\"] != nil)\n      - set(cache[\"",
+ 	"body\"], body)\n      - keep_keys(body, [])\n      - delete_key(cac",
+ 	"he, \"value\") where (cache != nil and cache[\"value\"] != nil)\n    ",
+ 	"  - set(cache[\"value\"], cache[\"__field_0\"])\n      - set(body[\"Ch",
+ 	`annel"], cache["value"]) where (cache != nil and cache["value"] `,
+ 	"!= nil)\n      - delete_key(cache, \"value\") where (cache != nil a",
+ 	"nd cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__f",
+ 	"ield_1\"])\n      - set(body[\"ComputerName\"], cache[\"value\"]) wher",
+ 	"e (cache != nil and cache[\"value\"] != nil)\n      - delete_key(ca",
+ 	"che, \"value\") where (cache != nil and cache[\"value\"] != nil)\n   ",
+ 	"   - set(cache[\"value\"], cache[\"__field_2\"])\n      - set(cache[\"",
+ 	"value\"], \"\") where cache[\"value\"] == nil\n      - set(cache[\"valu",
+ 	"e\"], ConvertCase(cache[\"value\"], \"lower\"))\n      - set(body[\"Dat",
+ 	`a"], cache["value"]) where (cache != nil and cache["value"] != n`,
+ 	"il)\n      - delete_key(cache, \"value\") where (cache != nil and c",
+ 	"ache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field",
+ 	"_3\"])\n      - set(body[\"EventID\"], cache[\"value\"]) where (cache ",
+ 	"!= nil and cache[\"value\"] != nil)\n      - delete_key(cache, \"val",
+ 	"ue\") where (cache != nil and cache[\"value\"] != nil)\n      - set(",
+ 	"cache[\"value\"], cache[\"__field_4\"])\n      - set(cache[\"value\"], ",
+ 	`"SuccessAudit") where ((cache != nil and cache["body"] != nil an`,
+ 	`d cache["body"]["keywords"] != nil) and cache["body"]["keywords"`,
+ 	`][0] != nil and cache["body"]["keywords"][0] == "Audit Success")`,
+ 	"\n      - set(cache[\"value\"], \"FailureAudit\") where ((cache != ni",
+ 	`l and cache["body"] != nil and cache["body"]["keywords"] != nil)`,
+ 	` and cache["body"]["keywords"][0] != nil and cache["body"]["keyw`,
+ 	"ords\"][0] == \"Audit Failure\")\n      - set(body[\"EventType\"], cac",
+ 	"he[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n    ",
+ 	`  - delete_key(cache, "value") where (cache != nil and cache["va`,
+ 	"lue\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_5\"])\n  ",
+ 	`    - set(body["Message"], cache["value"]) where (cache != nil a`,
+ 	"nd cache[\"value\"] != nil)\n      - delete_key(cache, \"value\") whe",
+ 	"re (cache != nil and cache[\"value\"] != nil)\n      - set(cache[\"v",
+ 	"alue\"], cache[\"__field_6\"])\n      - set(body[\"Qualifiers\"], cach",
+ 	"e[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n     ",
+ 	` - delete_key(cache, "value") where (cache != nil and cache["val`,
+ 	"ue\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_7\"])\n   ",
+ 	`   - set(body["RecordNumber"], cache["value"]) where (cache != n`,
+ 	"il and cache[\"value\"] != nil)\n      - delete_key(cache, \"value\")",
+ 	" where (cache != nil and cache[\"value\"] != nil)\n      - set(cach",
+ 	"e[\"value\"], cache[\"__field_8\"])\n      - set(cache[\"value\"], \"\") ",
+ 	"where cache[\"value\"] == nil\n      - set(body[\"Sid\"], cache[\"valu",
+ 	"e\"]) where (cache != nil and cache[\"value\"] != nil)\n      - dele",
+ 	`te_key(cache, "value") where (cache != nil and cache["value"] !=`,
+ 	" nil)\n      - set(cache[\"value\"], cache[\"__field_9\"])\n      - se",
+ 	`t(cache["value"], cache["body"]["provider"]["event_source"]) whe`,
+ 	`re ((cache != nil and cache["body"] != nil and cache["body"]["pr`,
+ 	`ovider"] != nil and cache["body"]["provider"]["event_source"] !=`,
+ 	` nil) and (not cache["body"]["provider"]["event_source"] == ""))`,
+ 	"\n      - set(body[\"SourceName\"], cache[\"value\"]) where (cache !=",
+ 	" nil and cache[\"value\"] != nil)\n      - delete_key(cache, \"value",
+ 	"\") where (cache != nil and cache[\"value\"] != nil)\n      - set(ca",
+ 	"che[\"value\"], cache[\"__field_10\"])\n      - set(cache[\"value\"], T",
+ 	"oValues(cache[\"value\"]))\n      - set(body[\"StringInserts\"], cach",
+ 	"e[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n     ",
+ 	` - delete_key(cache, "value") where (cache != nil and cache["val`,
+ 	"ue\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_11\"])\n  ",
+ 	`    - set(cache["value"], FormatTime(Time(cache["value"], "%Y-%m`,
+ 	"-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n      - set(body[\"TimeGen",
+ 	`erated"], cache["value"]) where (cache != nil and cache["value"]`,
+ 	" != nil)\n      - delete_key(cache, \"value\") where (cache != nil ",
+ 	"and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__",
+ 	"field_11\"])\n      - set(cache[\"value\"], FormatTime(Time(cache[\"v",
+ 	"alue\"], \"%Y-%m-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n      - set",
+ 	`(body["TimeWritten"], cache["value"]) where (cache != nil and ca`,
+ 	"che[\"value\"] != nil)\n  transform/windows__event__log_1:\n    erro",
+ 	"r_mode: ignore\n    log_statements:\n    - context: log\n      stat",
+ 	"ements:\n      - delete_key(cache, \"__field_0\") where (cache != n",
+ 	"il and cache[\"__field_0\"] != nil)\n      - set(cache[\"__field_0\"]",
+ 	`, attributes["compute.googleapis.com/instance_group_manager/name`,
+ 	`"]) where (attributes != nil and attributes["compute.googleapis.`,
+ 	"com/instance_group_manager/name\"] != nil)\n      - delete_key(cac",
+ 	`he, "__field_1") where (cache != nil and cache["__field_1"] != n`,
+ 	"il)\n      - set(cache[\"__field_1\"], attributes[\"compute.googleap",
+ 	`is.com/instance_group_manager/zone"]) where (attributes != nil a`,
+ 	`nd attributes["compute.googleapis.com/instance_group_manager/zon`,
+ 	"e\"] != nil)\n      - delete_key(cache, \"__field_2\") where (cache ",
+ 	"!= nil and cache[\"__field_2\"] != nil)\n      - set(cache[\"__field",
+ 	`_2"], attributes["compute.googleapis.com/resource_name"]) where `,
+ 	`(attributes != nil and attributes["compute.googleapis.com/resour`,
+ 	"ce_name\"] != nil)\n      - delete_key(cache, \"__field_3\") where (",
+ 	"cache != nil and cache[\"__field_3\"] != nil)\n      - set(cache[\"_",
+ 	`_field_3"], attributes["gcp.log_name"]) where (attributes != nil`,
+ 	" and attributes[\"gcp.log_name\"] != nil)\n      - delete_key(cache",
+ 	", \"value\") where (cache != nil and cache[\"value\"] != nil)\n      ",
+ 	"- set(cache[\"value\"], cache[\"__field_0\"])\n      - set(cache[\"val",
+ 	"ue\"], \"test-mig\") where cache[\"value\"] == nil\n      - set(attrib",
+ 	`utes["compute.googleapis.com/instance_group_manager/name"], cach`,
+ 	"e[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n     ",
+ 	` - delete_key(cache, "value") where (cache != nil and cache["val`,
+ 	"ue\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_1\"])\n   ",
+ 	`   - set(cache["value"], "test-zone") where cache["value"] == ni`,
+ 	"l\n      - set(attributes[\"compute.googleapis.com/instance_group_",
+ 	`manager/zone"], cache["value"]) where (cache != nil and cache["v`,
+ 	"alue\"] != nil)\n      - delete_key(cache, \"value\") where (cache !",
+ 	"= nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cac",
+ 	"he[\"__field_2\"])\n      - set(cache[\"value\"], \"\") where cache[\"va",
+ 	"lue\"] == nil\n      - set(attributes[\"compute.googleapis.com/reso",
+ 	`urce_name"], cache["value"]) where (cache != nil and cache["valu`,
+ 	"e\"] != nil)\n      - delete_key(cache, \"value\") where (cache != n",
+ 	"il and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[",
+ 	"\"__field_3\"])\n      - set(cache[\"value\"], \"windows_event_log\") w",
+ 	"here cache[\"value\"] == nil\n      - set(attributes[\"gcp.log_name\"",
+ 	`], cache["value"]) where (cache != nil and cache["value"] != nil`,
+ 	")\n  transform/windows__event__log_1_0:\n    error_mode: ignore\n  ",
+ 	"  log_statements:\n    - context: log\n      statements:\n      - d",
+ 	`elete_key(cache, "__field_0") where (cache != nil and cache["__f`,
+ 	"ield_0\"] != nil)\n      - set(cache[\"__field_0\"], body[\"channel\"]",
+ 	") where (body != nil and body[\"channel\"] != nil)\n      - delete_",
+ 	`key(cache, "__field_1") where (cache != nil and cache["__field_1`,
+ 	"\"] != nil)\n      - set(cache[\"__field_1\"], body[\"computer\"]) whe",
+ 	"re (body != nil and body[\"computer\"] != nil)\n      - delete_key(",
+ 	`cache, "__field_2") where (cache != nil and cache["__field_2"] !`,
+ 	"= nil)\n      - set(cache[\"__field_2\"], body[\"event_data\"][\"binar",
+ 	`y"]) where (body != nil and body["event_data"] != nil and body["`,
+ 	"event_data\"][\"binary\"] != nil)\n      - delete_key(cache, \"__fiel",
+ 	"d_3\") where (cache != nil and cache[\"__field_3\"] != nil)\n      -",
+ 	` set(cache["__field_3"], body["event_id"]["id"]) where (body != `,
+ 	`nil and body["event_id"] != nil and body["event_id"]["id"] != ni`,
+ 	"l)\n      - delete_key(cache, \"__field_4\") where (cache != nil an",
+ 	"d cache[\"__field_4\"] != nil)\n      - set(cache[\"__field_4\"], bod",
+ 	"y[\"level\"]) where (body != nil and body[\"level\"] != nil)\n      -",
+ 	` delete_key(cache, "__field_5") where (cache != nil and cache["_`,
+ 	"_field_5\"] != nil)\n      - set(cache[\"__field_5\"], body[\"message",
+ 	"\"]) where (body != nil and body[\"message\"] != nil)\n      - delet",
+ 	`e_key(cache, "__field_6") where (cache != nil and cache["__field`,
+ 	"_6\"] != nil)\n      - set(cache[\"__field_6\"], body[\"event_id\"][\"q",
+ 	`ualifiers"]) where (body != nil and body["event_id"] != nil and `,
+ 	"body[\"event_id\"][\"qualifiers\"] != nil)\n      - delete_key(cache,",
+ 	` "__field_7") where (cache != nil and cache["__field_7"] != nil)`,
+ 	"\n      - set(cache[\"__field_7\"], body[\"record_id\"]) where (body ",
+ 	"!= nil and body[\"record_id\"] != nil)\n      - delete_key(cache, \"",
+ 	"__field_8\") where (cache != nil and cache[\"__field_8\"] != nil)\n ",
+ 	`     - set(cache["__field_8"], body["security"]["user_id"]) wher`,
+ 	`e (body != nil and body["security"] != nil and body["security"][`,
+ 	"\"user_id\"] != nil)\n      - delete_key(cache, \"__field_9\") where ",
+ 	"(cache != nil and cache[\"__field_9\"] != nil)\n      - set(cache[\"",
+ 	`__field_9"], body["provider"]["name"]) where (body != nil and bo`,
+ 	"dy[\"provider\"] != nil and body[\"provider\"][\"name\"] != nil)\n     ",
+ 	` - delete_key(cache, "__field_10") where (cache != nil and cache`,
+ 	"[\"__field_10\"] != nil)\n      - set(cache[\"__field_10\"], body[\"ev",
+ 	`ent_data"]["data"]) where (body != nil and body["event_data"] !=`,
+ 	" nil and body[\"event_data\"][\"data\"] != nil)\n      - delete_key(c",
+ 	`ache, "__field_11") where (cache != nil and cache["__field_11"] `,
+ 	"!= nil)\n      - set(cache[\"__field_11\"], body[\"system_time\"]) wh",
+ 	"ere (body != nil and body[\"system_time\"] != nil)\n      - set(cac",
+ 	"he[\"body\"], body)\n      - keep_keys(body, [])\n      - delete_key",
+ 	"(cache, \"value\") where (cache != nil and cache[\"value\"] != nil)\n",
+ 	"      - set(cache[\"value\"], cache[\"__field_0\"])\n      - set(body",
+ 	`["Channel"], cache["value"]) where (cache != nil and cache["valu`,
+ 	"e\"] != nil)\n      - delete_key(cache, \"value\") where (cache != n",
+ 	"il and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[",
+ 	"\"__field_1\"])\n      - set(body[\"ComputerName\"], cache[\"value\"]) ",
+ 	"where (cache != nil and cache[\"value\"] != nil)\n      - delete_ke",
+ 	`y(cache, "value") where (cache != nil and cache["value"] != nil)`,
+ 	"\n      - set(cache[\"value\"], cache[\"__field_2\"])\n      - set(cac",
+ 	"he[\"value\"], \"\") where cache[\"value\"] == nil\n      - set(cache[\"",
+ 	"value\"], ConvertCase(cache[\"value\"], \"lower\"))\n      - set(body[",
+ 	`"Data"], cache["value"]) where (cache != nil and cache["value"] `,
+ 	"!= nil)\n      - delete_key(cache, \"value\") where (cache != nil a",
+ 	"nd cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__f",
+ 	"ield_3\"])\n      - set(body[\"EventID\"], cache[\"value\"]) where (ca",
+ 	"che != nil and cache[\"value\"] != nil)\n      - delete_key(cache, ",
+ 	"\"value\") where (cache != nil and cache[\"value\"] != nil)\n      - ",
+ 	"set(cache[\"value\"], cache[\"__field_4\"])\n      - set(cache[\"value",
+ 	`"], "SuccessAudit") where ((cache != nil and cache["body"] != ni`,
+ 	`l and cache["body"]["keywords"] != nil) and cache["body"]["keywo`,
+ 	`rds"][0] != nil and cache["body"]["keywords"][0] == "Audit Succe`,
+ 	"ss\")\n      - set(cache[\"value\"], \"FailureAudit\") where ((cache !",
+ 	`= nil and cache["body"] != nil and cache["body"]["keywords"] != `,
+ 	`nil) and cache["body"]["keywords"][0] != nil and cache["body"]["`,
+ 	"keywords\"][0] == \"Audit Failure\")\n      - set(body[\"EventType\"],",
+ 	" cache[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n",
+ 	`      - delete_key(cache, "value") where (cache != nil and cache`,
+ 	"[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_5\"]",
+ 	")\n      - set(body[\"Message\"], cache[\"value\"]) where (cache != n",
+ 	"il and cache[\"value\"] != nil)\n      - delete_key(cache, \"value\")",
+ 	" where (cache != nil and cache[\"value\"] != nil)\n      - set(cach",
+ 	"e[\"value\"], cache[\"__field_6\"])\n      - set(body[\"Qualifiers\"], ",
+ 	"cache[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n ",
+ 	`     - delete_key(cache, "value") where (cache != nil and cache[`,
+ 	"\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_7\"])",
+ 	"\n      - set(body[\"RecordNumber\"], cache[\"value\"]) where (cache ",
+ 	"!= nil and cache[\"value\"] != nil)\n      - delete_key(cache, \"val",
+ 	"ue\") where (cache != nil and cache[\"value\"] != nil)\n      - set(",
+ 	"cache[\"value\"], cache[\"__field_8\"])\n      - set(cache[\"value\"], ",
+ 	"\"\") where cache[\"value\"] == nil\n      - set(body[\"Sid\"], cache[\"",
+ 	"value\"]) where (cache != nil and cache[\"value\"] != nil)\n      - ",
+ 	`delete_key(cache, "value") where (cache != nil and cache["value"`,
+ 	"] != nil)\n      - set(cache[\"value\"], cache[\"__field_9\"])\n      ",
+ 	`- set(cache["value"], cache["body"]["provider"]["event_source"])`,
+ 	` where ((cache != nil and cache["body"] != nil and cache["body"]`,
+ 	`["provider"] != nil and cache["body"]["provider"]["event_source"`,
+ 	`] != nil) and (not cache["body"]["provider"]["event_source"] == `,
+ 	"\"\"))\n      - set(body[\"SourceName\"], cache[\"value\"]) where (cach",
+ 	"e != nil and cache[\"value\"] != nil)\n      - delete_key(cache, \"v",
+ 	"alue\") where (cache != nil and cache[\"value\"] != nil)\n      - se",
+ 	"t(cache[\"value\"], cache[\"__field_10\"])\n      - set(cache[\"value\"",
+ 	"], ToValues(cache[\"value\"]))\n      - set(body[\"StringInserts\"], ",
+ 	"cache[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n ",
+ 	`     - delete_key(cache, "value") where (cache != nil and cache[`,
+ 	"\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_11\"]",
+ 	")\n      - set(cache[\"value\"], FormatTime(Time(cache[\"value\"], \"%",
+ 	"Y-%m-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n      - set(body[\"Tim",
+ 	`eGenerated"], cache["value"]) where (cache != nil and cache["val`,
+ 	"ue\"] != nil)\n      - delete_key(cache, \"value\") where (cache != ",
+ 	"nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache",
+ 	"[\"__field_11\"])\n      - set(cache[\"value\"], FormatTime(Time(cach",
+ 	"e[\"value\"], \"%Y-%m-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n      -",
+ 	` set(body["TimeWritten"], cache["value"]) where (cache != nil an`,
+ 	"d cache[\"value\"] != nil)\n  transform/windows__event__log_1_1:\n  ",
+ 	"  error_mode: ignore\n    log_statements:\n    - context: log\n    ",
+ 	"  statements:\n      - delete_key(cache, \"__field_0\") where (cach",
+ 	"e != nil and cache[\"__field_0\"] != nil)\n      - set(cache[\"__fie",
+ 	`ld_0"], attributes["compute.googleapis.com/instance_group_manage`,
+ 	`r/name"]) where (attributes != nil and attributes["compute.googl`,
+ 	"eapis.com/instance_group_manager/name\"] != nil)\n      - delete_k",
+ 	`ey(cache, "__field_1") where (cache != nil and cache["__field_1"`,
+ 	"] != nil)\n      - set(cache[\"__field_1\"], attributes[\"compute.go",
+ 	`ogleapis.com/instance_group_manager/zone"]) where (attributes !=`,
+ 	` nil and attributes["compute.googleapis.com/instance_group_manag`,
+ 	"er/zone\"] != nil)\n      - delete_key(cache, \"__field_2\") where (",
+ 	"cache != nil and cache[\"__field_2\"] != nil)\n      - set(cache[\"_",
+ 	`_field_2"], attributes["compute.googleapis.com/resource_name"]) `,
+ 	`where (attributes != nil and attributes["compute.googleapis.com/`,
+ 	"resource_name\"] != nil)\n      - delete_key(cache, \"__field_3\") w",
+ 	"here (cache != nil and cache[\"__field_3\"] != nil)\n      - set(ca",
+ 	`che["__field_3"], attributes["gcp.log_name"]) where (attributes `,
+ 	"!= nil and attributes[\"gcp.log_name\"] != nil)\n      - delete_key",
+ 	"(cache, \"value\") where (cache != nil and cache[\"value\"] != nil)\n",
+ 	"      - set(cache[\"value\"], cache[\"__field_0\"])\n      - set(cach",
+ 	"e[\"value\"], \"test-mig\") where cache[\"value\"] == nil\n      - set(",
+ 	`attributes["compute.googleapis.com/instance_group_manager/name"]`,
+ 	`, cache["value"]) where (cache != nil and cache["value"] != nil)`,
+ 	"\n      - delete_key(cache, \"value\") where (cache != nil and cach",
+ 	"e[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_1\"",
+ 	"])\n      - set(cache[\"value\"], \"test-zone\") where cache[\"value\"]",
+ 	" == nil\n      - set(attributes[\"compute.googleapis.com/instance_",
+ 	`group_manager/zone"], cache["value"]) where (cache != nil and ca`,
+ 	"che[\"value\"] != nil)\n      - delete_key(cache, \"value\") where (c",
+ 	"ache != nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"",
+ 	"], cache[\"__field_2\"])\n      - set(cache[\"value\"], \"\") where cac",
+ 	"he[\"value\"] == nil\n      - set(attributes[\"compute.googleapis.co",
+ 	`m/resource_name"], cache["value"]) where (cache != nil and cache`,
+ 	"[\"value\"] != nil)\n      - delete_key(cache, \"value\") where (cach",
+ 	"e != nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"], ",
+ 	"cache[\"__field_3\"])\n      - set(cache[\"value\"], \"windows_event_l",
+ 	"og\") where cache[\"value\"] == nil\n      - set(attributes[\"gcp.log",
+ 	`_name"], cache["value"]) where (cache != nil and cache["value"] `,
+ 	"!= nil)\n  transform/windows__event__log_2_0:\n    error_mode: ign",
+ 	"ore\n    log_statements:\n    - context: log\n      statements:\n   ",
+ 	`   - delete_key(cache, "__field_0") where (cache != nil and cach`,
+ 	"e[\"__field_0\"] != nil)\n      - set(cache[\"__field_0\"], body[\"cha",
+ 	"nnel\"]) where (body != nil and body[\"channel\"] != nil)\n      - d",
+ 	`elete_key(cache, "__field_1") where (cache != nil and cache["__f`,
+ 	"ield_1\"] != nil)\n      - set(cache[\"__field_1\"], body[\"computer\"",
+ 	"]) where (body != nil and body[\"computer\"] != nil)\n      - delet",
+ 	`e_key(cache, "__field_2") where (cache != nil and cache["__field`,
+ 	"_2\"] != nil)\n      - set(cache[\"__field_2\"], body[\"event_data\"][",
+ 	`"binary"]) where (body != nil and body["event_data"] != nil and `,
+ 	"body[\"event_data\"][\"binary\"] != nil)\n      - delete_key(cache, \"",
+ 	"__field_3\") where (cache != nil and cache[\"__field_3\"] != nil)\n ",
+ 	`     - set(cache["__field_3"], body["event_id"]["id"]) where (bo`,
+ 	`dy != nil and body["event_id"] != nil and body["event_id"]["id"]`,
+ 	" != nil)\n      - delete_key(cache, \"__field_4\") where (cache != ",
+ 	"nil and cache[\"__field_4\"] != nil)\n      - set(cache[\"__field_4\"",
+ 	"], body[\"level\"]) where (body != nil and body[\"level\"] != nil)\n ",
+ 	`     - delete_key(cache, "__field_5") where (cache != nil and ca`,
+ 	"che[\"__field_5\"] != nil)\n      - set(cache[\"__field_5\"], body[\"m",
+ 	"essage\"]) where (body != nil and body[\"message\"] != nil)\n      -",
+ 	` delete_key(cache, "__field_6") where (cache != nil and cache["_`,
+ 	"_field_6\"] != nil)\n      - set(cache[\"__field_6\"], body[\"event_i",
+ 	`d"]["qualifiers"]) where (body != nil and body["event_id"] != ni`,
+ 	"l and body[\"event_id\"][\"qualifiers\"] != nil)\n      - delete_key(",
+ 	`cache, "__field_7") where (cache != nil and cache["__field_7"] !`,
+ 	"= nil)\n      - set(cache[\"__field_7\"], body[\"record_id\"]) where ",
+ 	"(body != nil and body[\"record_id\"] != nil)\n      - delete_key(ca",
+ 	`che, "__field_8") where (cache != nil and cache["__field_8"] != `,
+ 	"nil)\n      - set(cache[\"__field_8\"], body[\"security\"][\"user_id\"]",
+ 	`) where (body != nil and body["security"] != nil and body["secur`,
+ 	"ity\"][\"user_id\"] != nil)\n      - delete_key(cache, \"__field_9\") ",
+ 	"where (cache != nil and cache[\"__field_9\"] != nil)\n      - set(c",
+ 	`ache["__field_9"], body["provider"]["name"]) where (body != nil `,
+ 	`and body["provider"] != nil and body["provider"]["name"] != nil)`,
+ 	"\n      - delete_key(cache, \"__field_10\") where (cache != nil and",
+ 	" cache[\"__field_10\"] != nil)\n      - set(cache[\"__field_10\"], bo",
+ 	`dy["event_data"]["data"]) where (body != nil and body["event_dat`,
+ 	"a\"] != nil and body[\"event_data\"][\"data\"] != nil)\n      - delete",
+ 	`_key(cache, "__field_11") where (cache != nil and cache["__field`,
+ 	"_11\"] != nil)\n      - set(cache[\"__field_11\"], body[\"system_time",
+ 	"\"]) where (body != nil and body[\"system_time\"] != nil)\n      - s",
+ 	"et(cache[\"body\"], body)\n      - keep_keys(body, [])\n      - dele",
+ 	`te_key(cache, "value") where (cache != nil and cache["value"] !=`,
+ 	" nil)\n      - set(cache[\"value\"], cache[\"__field_0\"])\n      - se",
+ 	`t(body["Channel"], cache["value"]) where (cache != nil and cache`,
+ 	"[\"value\"] != nil)\n      - delete_key(cache, \"value\") where (cach",
+ 	"e != nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"], ",
+ 	"cache[\"__field_1\"])\n      - set(body[\"ComputerName\"], cache[\"val",
+ 	"ue\"]) where (cache != nil and cache[\"value\"] != nil)\n      - del",
+ 	`ete_key(cache, "value") where (cache != nil and cache["value"] !`,
+ 	"= nil)\n      - set(cache[\"value\"], cache[\"__field_2\"])\n      - s",
+ 	"et(cache[\"value\"], \"\") where cache[\"value\"] == nil\n      - set(c",
+ 	"ache[\"value\"], ConvertCase(cache[\"value\"], \"lower\"))\n      - set",
+ 	`(body["Data"], cache["value"]) where (cache != nil and cache["va`,
+ 	"lue\"] != nil)\n      - delete_key(cache, \"value\") where (cache !=",
+ 	" nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cach",
+ 	"e[\"__field_3\"])\n      - set(body[\"EventID\"], cache[\"value\"]) whe",
+ 	"re (cache != nil and cache[\"value\"] != nil)\n      - delete_key(c",
+ 	"ache, \"value\") where (cache != nil and cache[\"value\"] != nil)\n  ",
+ 	"    - set(cache[\"value\"], cache[\"__field_4\"])\n      - set(cache[",
+ 	`"value"], "SuccessAudit") where ((cache != nil and cache["body"]`,
+ 	` != nil and cache["body"]["keywords"] != nil) and cache["body"][`,
+ 	`"keywords"][0] != nil and cache["body"]["keywords"][0] == "Audit`,
+ 	" Success\")\n      - set(cache[\"value\"], \"FailureAudit\") where ((c",
+ 	`ache != nil and cache["body"] != nil and cache["body"]["keywords`,
+ 	`"] != nil) and cache["body"]["keywords"][0] != nil and cache["bo`,
+ 	"dy\"][\"keywords\"][0] == \"Audit Failure\")\n      - set(body[\"EventT",
+ 	`ype"], cache["value"]) where (cache != nil and cache["value"] !=`,
+ 	" nil)\n      - delete_key(cache, \"value\") where (cache != nil and",
+ 	" cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__fie",
+ 	"ld_5\"])\n      - set(body[\"Message\"], cache[\"value\"]) where (cach",
+ 	"e != nil and cache[\"value\"] != nil)\n      - delete_key(cache, \"v",
+ 	"alue\") where (cache != nil and cache[\"value\"] != nil)\n      - se",
+ 	"t(cache[\"value\"], cache[\"__field_6\"])\n      - set(body[\"Qualifie",
+ 	`rs"], cache["value"]) where (cache != nil and cache["value"] != `,
+ 	"nil)\n      - delete_key(cache, \"value\") where (cache != nil and ",
+ 	"cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__fiel",
+ 	"d_7\"])\n      - set(body[\"RecordNumber\"], cache[\"value\"]) where (",
+ 	"cache != nil and cache[\"value\"] != nil)\n      - delete_key(cache",
+ 	", \"value\") where (cache != nil and cache[\"value\"] != nil)\n      ",
+ 	"- set(cache[\"value\"], cache[\"__field_8\"])\n      - set(cache[\"val",
+ 	"ue\"], \"\") where cache[\"value\"] == nil\n      - set(body[\"Sid\"], c",
+ 	"ache[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n  ",
+ 	`    - delete_key(cache, "value") where (cache != nil and cache["`,
+ 	"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_9\"])\n",
+ 	`      - set(cache["value"], cache["body"]["provider"]["event_sou`,
+ 	`rce"]) where ((cache != nil and cache["body"] != nil and cache["`,
+ 	`body"]["provider"] != nil and cache["body"]["provider"]["event_s`,
+ 	`ource"] != nil) and (not cache["body"]["provider"]["event_source`,
+ 	"\"] == \"\"))\n      - set(body[\"SourceName\"], cache[\"value\"]) where",
+ 	" (cache != nil and cache[\"value\"] != nil)\n      - delete_key(cac",
+ 	"he, \"value\") where (cache != nil and cache[\"value\"] != nil)\n    ",
+ 	"  - set(cache[\"value\"], cache[\"__field_10\"])\n      - set(cache[\"",
+ 	"value\"], ToValues(cache[\"value\"]))\n      - set(body[\"StringInser",
+ 	`ts"], cache["value"]) where (cache != nil and cache["value"] != `,
+ 	"nil)\n      - delete_key(cache, \"value\") where (cache != nil and ",
+ 	"cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__fiel",
+ 	"d_11\"])\n      - set(cache[\"value\"], FormatTime(Time(cache[\"value",
+ 	"\"], \"%Y-%m-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n      - set(bod",
+ 	`y["TimeGenerated"], cache["value"]) where (cache != nil and cach`,
+ 	"e[\"value\"] != nil)\n      - delete_key(cache, \"value\") where (cac",
+ 	"he != nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"],",
+ 	" cache[\"__field_11\"])\n      - set(cache[\"value\"], FormatTime(Tim",
+ 	"e(cache[\"value\"], \"%Y-%m-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n ",
+ 	`     - set(body["TimeWritten"], cache["value"]) where (cache != `,
+ 	"nil and cache[\"value\"] != nil)\n  transform/windows__event__log_2",
+ 	"_1:\n    error_mode: ignore\n    log_statements:\n    - context: lo",
+ 	"g\n      statements:\n      - delete_key(cache, \"__field_0\") where",
+ 	" (cache != nil and cache[\"__field_0\"] != nil)\n      - set(cache[",
+ 	`"__field_0"], attributes["compute.googleapis.com/instance_group_`,
+ 	`manager/name"]) where (attributes != nil and attributes["compute`,
+ 	".googleapis.com/instance_group_manager/name\"] != nil)\n      - de",
+ 	`lete_key(cache, "__field_1") where (cache != nil and cache["__fi`,
+ 	"eld_1\"] != nil)\n      - set(cache[\"__field_1\"], attributes[\"comp",
+ 	`ute.googleapis.com/instance_group_manager/zone"]) where (attribu`,
+ 	`tes != nil and attributes["compute.googleapis.com/instance_group`,
+ 	"_manager/zone\"] != nil)\n      - delete_key(cache, \"__field_2\") w",
+ 	"here (cache != nil and cache[\"__field_2\"] != nil)\n      - set(ca",
+ 	`che["__field_2"], attributes["compute.googleapis.com/resource_na`,
+ 	`me"]) where (attributes != nil and attributes["compute.googleapi`,
+ 	"s.com/resource_name\"] != nil)\n      - delete_key(cache, \"__field",
+ 	"_3\") where (cache != nil and cache[\"__field_3\"] != nil)\n      - ",
+ 	`set(cache["__field_3"], attributes["gcp.log_name"]) where (attri`,
+ 	"butes != nil and attributes[\"gcp.log_name\"] != nil)\n      - dele",
+ 	`te_key(cache, "value") where (cache != nil and cache["value"] !=`,
+ 	" nil)\n      - set(cache[\"value\"], cache[\"__field_0\"])\n      - se",
+ 	"t(cache[\"value\"], \"test-mig\") where cache[\"value\"] == nil\n      ",
+ 	`- set(attributes["compute.googleapis.com/instance_group_manager/`,
+ 	`name"], cache["value"]) where (cache != nil and cache["value"] !`,
+ 	"= nil)\n      - delete_key(cache, \"value\") where (cache != nil an",
+ 	"d cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__fi",
+ 	"eld_1\"])\n      - set(cache[\"value\"], \"test-zone\") where cache[\"v",
+ 	"alue\"] == nil\n      - set(attributes[\"compute.googleapis.com/ins",
+ 	`tance_group_manager/zone"], cache["value"]) where (cache != nil `,
+ 	"and cache[\"value\"] != nil)\n      - delete_key(cache, \"value\") wh",
+ 	"ere (cache != nil and cache[\"value\"] != nil)\n      - set(cache[\"",
+ 	"value\"], cache[\"__field_2\"])\n      - set(cache[\"value\"], \"\") whe",
+ 	"re cache[\"value\"] == nil\n      - set(attributes[\"compute.googlea",
+ 	`pis.com/resource_name"], cache["value"]) where (cache != nil and`,
+ 	" cache[\"value\"] != nil)\n      - delete_key(cache, \"value\") where",
+ 	" (cache != nil and cache[\"value\"] != nil)\n      - set(cache[\"val",
+ 	"ue\"], cache[\"__field_3\"])\n      - set(cache[\"value\"], \"windows_e",
+ 	"vent_log\") where cache[\"value\"] == nil\n      - set(attributes[\"g",
+ 	`cp.log_name"], cache["value"]) where (cache != nil and cache["va`,
+ 	"lue\"] != nil)\nreceivers:\n  hostmetrics/hostmetrics:\n    collecti",
+ 	"on_interval: 60s\n    scrapers:\n      cpu: {}\n      disk: {}\n    ",
+ 	"  filesystem: {}\n      load: {}\n      memory: {}\n      network: ",
+ 	"{}\n      paging: {}\n      process:\n        metrics:\n          pr",
+ 	"ocess.handles:\n            enabled: true\n        mute_process_al",
+ 	"l_errors: true\n        mute_process_exe_error: true\n        mute",
+ 	"_process_name_error: true\n      processes: {}\n  otlpjsonfile/ops",
+ 	"_agent:\n    include:\n    - enabled_receivers_otlp.json\n    - fea",
+ 	"ture_tracking_otlp.json\n    poll_interval: 1m0s\n    replay_file:",
+ 	" true\n  prometheus/agent_prometheus:\n    config:\n      scrape_co",
+ 	"nfigs:\n      - job_name: logging-collector\n        metrics_path:",
+ 	" /metrics\n        scrape_interval: 1m\n        static_configs:\n  ",
+ 	"      - targets:\n          - 0.0.0.0:20202\n      - job_name: ote",
+ 	"l-collector\n        scrape_interval: 1m\n        static_configs:\n",
+ 	"        - targets:\n          - 0.0.0.0:20201\n  sqlquery/oracledb",
+ 	":\n    collection_interval: 60s\n    datasource: oracle://@localho",
+ 	"st:1521/?SID=db19c&UNIX+SOCKET=%2Ftmp%2Foracle%2Fsocket\n    driv",
+ 	"er: oracle\n    queries:\n    - metrics:\n      - attribute_columns",
+ 	":\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - TABLESPA",
+ 	"CE_NAME\n        - CONTENTS\n        data_type: sum\n        descri",
+ 	"ption: The size of tablespaces in the database.\n        metric_n",
+ 	"ame: oracle.tablespace.size\n        monotonic: false\n        sta",
+ 	"tic_attributes:\n          db.system: oracle\n          state: fre",
+ 	"e\n        unit: by\n        value_column: FREE_SPACE\n        valu",
+ 	"e_type: int\n      - attribute_columns:\n        - DATABASE_ID\n   ",
+ 	"     - GLOBAL_NAME\n        - TABLESPACE_NAME\n        - CONTENTS\n",
+ 	"        data_type: sum\n        description: The size of tablespa",
+ 	"ces in the database.\n        metric_name: oracle.tablespace.size",
+ 	"\n        monotonic: false\n        static_attributes:\n          d",
+ 	"b.system: oracle\n          state: used\n        unit: by\n        ",
+ 	"value_column: USED_SPACE\n        value_type: int\n      sql: \"SEL",
+ 	"ECT (SELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GL",
+ 	"OBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, ts.TABLESPACE_NAME,",
+ 	` ts.CONTENTS,\n\t\t\t\t(select sum(df.bytes) from sys.dba_data_f`,
+ 	"iles df where df.tablespace_name=ts.tablespace_name)-(select sum",
+ 	"(fs.bytes) from sys.dba_free_space fs where fs.tablespace_name=t",
+ 	`s.tablespace_name) AS USED_SPACE,\n\t\t\t\t(select sum(fs.bytes)`,
+ 	" from sys.dba_free_space fs where fs.tablespace_name=ts.tablespa",
+ 	`ce_name) AS FREE_SPACE\n\t\t\tFROM sys.dba_tablespaces ts\n\t\t\`,
+ 	`tWHERE ts.contents <> 'TEMPORARY'\n\t\t\tUNION ALL\n\t\t\tSELECT`,
+ 	" (SELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBA",
+ 	"L_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, ts.NAME TABLESPACE_NAM",
+ 	`E, 'TEMPORARY' as CONTENTS,\n\t\t\t\t\tSUM(ss.USED_BLOCKS * t.BL`,
+ 	`OCK_SIZE) USED_SPACE,\n\t\t\t\t\tSUM(t.BYTES) - SUM(ss.USED_BLOC`,
+ 	`KS * t.BLOCK_SIZE) FREE_SPACE\n\t\t\tFROM SYS.V_$$sort_segment s`,
+ 	`s\n\t\t\tJOIN sys.v_$$tablespace ts\n\t\t\tON ss.TABLESPACE_NAME`,
+ 	` = ts.NAME\n\t\t\tJOIN sys.v_$$tempfile t\n\t\t\tON t.TS# = ss.T`,
+ 	"S#\\n\\t\\t\\tGROUP BY ts.NAME\"\n    - metrics:\n      - attribute_col",
+ 	"umns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - STAT",
+ 	"US\n        - CONTENTS\n        data_type: sum\n        description",
+ 	": The number of tablespaces in the database.\n        metric_name",
+ 	": oracle.tablespace.count\n        monotonic: false\n        stati",
+ 	"c_attributes:\n          db.system: oracle\n        unit: \"{tables",
+ 	"paces}\"\n        value_column: COUNT\n        value_type: int\n    ",
+ 	"  sql: SELECT (SELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, ",
+ 	"(SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, CONTENTS,",
+ 	" STATUS, COUNT(*) COUNT FROM sys.dba_tablespaces GROUP BY STATUS",
+ 	", CONTENTS\n    - metrics:\n      - attribute_columns:\n        - D",
+ 	"ATABASE_ID\n        - GLOBAL_NAME\n        data_type: sum\n        ",
+ 	"description: The number of seconds since the last RMAN backup.\n ",
+ 	"       metric_name: oracle.backup.latest\n        monotonic: true",
+ 	"\n        static_attributes:\n          db.system: oracle\n        ",
+ 	"unit: s\n        value_column: LATEST_BACKUP\n        value_type: ",
+ 	"int\n      sql: SELECT (SELECT DBID FROM SYS.GV_$$DATABASE) DATAB",
+ 	"ASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, (",
+ 	"SELECT round(case when max(start_time) is null then -1 when sysd",
+ 	"ate - max(start_time) > 0 then (sysdate - max(start_time)) * 864",
+ 	"00 else 0 end) FROM SYS.V_$$rman_backup_job_details ) LATEST_BAC",
+ 	"KUP FROM DUAL\n    - metrics:\n      - attribute_columns:\n        ",
+ 	"- DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n      ",
+ 	"  data_type: sum\n        description: The current number of proc",
+ 	"esses.\n        metric_name: oracle.process.count\n        monoton",
+ 	"ic: false\n        static_attributes:\n          db.system: oracle",
+ 	"\n        unit: \"{processes}\"\n        value_column: PROCESSES_UTI",
+ 	"L\n        value_type: int\n      - attribute_columns:\n        - D",
+ 	"ATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        d",
+ 	"ata_type: sum\n        description: The maximum number of process",
+ 	"es allowed.\n        metric_name: oracle.process.limit\n        mo",
+ 	"notonic: false\n        static_attributes:\n          db.system: o",
+ 	"racle\n        unit: \"{processes}\"\n        value_column: PROCESSE",
+ 	"S_LIMIT_VAL\n        value_type: int\n      - attribute_columns:\n ",
+ 	"       - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID",
+ 	"\n        data_type: sum\n        description: The current number ",
+ 	"of sessions.\n        metric_name: oracle.session.count\n        m",
+ 	"onotonic: false\n        static_attributes:\n          db.system: ",
+ 	"oracle\n        unit: \"{sessions}\"\n        value_column: SESSIONS",
+ 	"_UTIL\n        value_type: int\n      - attribute_columns:\n       ",
+ 	" - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n     ",
+ 	"   data_type: sum\n        description: The maximum number of ses",
+ 	"sions allowed.\n        metric_name: oracle.session.limit\n       ",
+ 	" monotonic: false\n        static_attributes:\n          db.system",
+ 	": oracle\n        unit: \"{sessions}\"\n        value_column: SESSIO",
+ 	"NS_LIMIT_VAL\n        value_type: int\n      sql: |-\n        SELEC",
+ 	"T DATABASE_ID, GLOBAL_NAME, INST_ID INSTANCE_ID, MAX(PROCESSES_U",
+ 	"TIL) PROCESSES_UTIL, MAX(PROCESSES_LIMIT_VAL) PROCESSES_LIMIT_VA",
+ 	"L, MAX(SESSIONS_UTIL) SESSIONS_UTIL, MAX(SESSIONS_LIMIT_VAL) SES",
+ 	"SIONS_LIMIT_VAL\n        \t\t\tFROM (SELECT (SELECT DBID FROM SYS.GV",
+ 	"_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NA",
+ 	"ME) GLOBAL_NAME, INST_ID, PROCESSES_UTIL, PROCESSES_LIMIT_VAL, S",
+ 	"ESSIONS_UTIL, SESSIONS_LIMIT_VAL\n        \t\t\tFROM (SELECT * FROM ",
+ 	"SYS.GV_$$resource_limit\n        \t\t\t\tWHERE RESOURCE_NAME IN ('pro",
+ 	"cesses', 'sessions'))\n        \t\t\t\tPIVOT(\n        \t\t\t\t\tMAX(TRIM(C",
+ 	"URRENT_UTILIZATION)) UTIL,\n        \t\t\t\t\tMAX(TRIM(LIMIT_VALUE)) L",
+ 	"IMIT_VAL\n        \t\t\t\t\tFOR RESOURCE_NAME\n        \t\t\t\t\tIN (\n      ",
+ 	"  \t\t\t\t\t\t'processes' PROCESSES,\n        \t\t\t\t\t\t'sessions' SESSIONS",
+ 	"\n        \t\t\t\t\t)\n        \t\t\t\t)\n        \t\t\t)\n        \t\t\tGROUP BY D",
+ 	"ATABASE_ID, GLOBAL_NAME, INST_ID\n    - metrics:\n      - attribut",
+ 	"e_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n        -",
+ 	" INSTANCE_ID\n        - PROGRAM\n        data_type: sum\n        de",
+ 	"scription: The programmable global area memory allocated by proc",
+ 	"ess.\n        metric_name: oracle.process.pga_memory.size\n       ",
+ 	" monotonic: false\n        static_attributes:\n          db.system",
+ 	": oracle\n          state: used\n        unit: by\n        value_co",
+ 	"lumn: USED_MEM\n        value_type: int\n      - attribute_columns",
+ 	":\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE",
+ 	"_ID\n        - PROGRAM\n        data_type: sum\n        description",
+ 	": The programmable global area memory allocated by process.\n    ",
+ 	"    metric_name: oracle.process.pga_memory.size\n        monotoni",
+ 	"c: false\n        static_attributes:\n          db.system: oracle\n",
+ 	"          state: free\n        unit: by\n        value_column: FRE",
+ 	"E_MEM\n        value_type: int\n      sql: SELECT (SELECT DBID FRO",
+ 	"M SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.G",
+ 	"LOBAL_NAME) GLOBAL_NAME, INST_ID INSTANCE_ID, PROGRAM, SUM(PGA_U",
+ 	"SED_MEM) USED_MEM, SUM(PGA_ALLOC_MEM) - SUM(PGA_USED_MEM) FREE_M",
+ 	"EM FROM SYS.GV_$$PROCESS WHERE PROGRAM <> 'PSEUDO' GROUP BY PROG",
+ 	"RAM, INST_ID\n    - metrics:\n      - attribute_columns:\n        -",
+ 	" DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n       ",
+ 	" - WAIT_CLASS\n        data_type: sum\n        description: The nu",
+ 	"mber of wait events experienced.\n        metric_name: oracle.wai",
+ 	"t.count\n        monotonic: true\n        static_attributes:\n     ",
+ 	"     db.system: oracle\n          type: foreground\n        unit: ",
+ 	"\"{events}\"\n        value_column: TOTAL_WAITS_FG\n        value_ty",
+ 	"pe: int\n      - attribute_columns:\n        - DATABASE_ID\n       ",
+ 	" - GLOBAL_NAME\n        - INSTANCE_ID\n        - WAIT_CLASS\n      ",
+ 	"  data_type: sum\n        description: The number of wait events ",
+ 	"experienced.\n        metric_name: oracle.wait.count\n        mono",
+ 	"tonic: true\n        static_attributes:\n          db.system: orac",
+ 	"le\n          type: background\n        unit: \"{events}\"\n        v",
+ 	"alue_column: TOTAL_WAITS_BG\n        value_type: int\n      - attr",
+ 	"ibute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n     ",
+ 	"   - INSTANCE_ID\n        - WAIT_CLASS\n        data_type: sum\n   ",
+ 	"     description: The amount of time waited for wait events.\n   ",
+ 	"     metric_name: oracle.wait.time\n        monotonic: true\n     ",
+ 	"   static_attributes:\n          db.system: oracle\n          type",
+ 	": foreground\n        unit: cs\n        value_column: TIME_WAITED_",
+ 	"FG\n        value_type: int\n      - attribute_columns:\n        - ",
+ 	"DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        ",
+ 	"- WAIT_CLASS\n        data_type: sum\n        description: The amo",
+ 	"unt of time waited for wait events.\n        metric_name: oracle.",
+ 	"wait.time\n        monotonic: true\n        static_attributes:\n   ",
+ 	"       db.system: oracle\n          type: background\n        unit",
+ 	": cs\n        value_column: TIME_WAITED_BG\n        value_type: in",
+ 	"t\n      - attribute_columns:\n        - DATABASE_ID\n        - GLO",
+ 	"BAL_NAME\n        - INSTANCE_ID\n        - WAIT_CLASS\n        data",
+ 	"_type: sum\n        description: The number of timeouts for wait ",
+ 	"events.\n        metric_name: oracle.wait.timeouts\n        monoto",
+ 	"nic: true\n        static_attributes:\n          db.system: oracle",
+ 	"\n          type: foreground\n        unit: \"{timeouts}\"\n        v",
+ 	"alue_column: TOTAL_TIMEOUTS_FG\n        value_type: int\n      - a",
+ 	"ttribute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n  ",
+ 	"      - INSTANCE_ID\n        - WAIT_CLASS\n        data_type: sum\n",
+ 	"        description: The number of timeouts for wait events.\n   ",
+ 	"     metric_name: oracle.wait.timeouts\n        monotonic: true\n ",
+ 	"       static_attributes:\n          db.system: oracle\n          ",
+ 	"type: background\n        unit: \"{timeouts}\"\n        value_column",
+ 	": TOTAL_TIMEOUTS_BG\n        value_type: int\n      sql: SELECT (S",
+ 	"ELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_N",
+ 	"AME FROM sys.GLOBAL_NAME) GLOBAL_NAME, INST_ID INSTANCE_ID, WAIT",
+ 	"_CLASS, SUM(total_waits_fg) AS TOTAL_WAITS_FG, SUM(total_waits)-",
+ 	"SUM(total_waits_fg) AS TOTAL_WAITS_BG, SUM(total_timeouts_fg) AS",
+ 	" TOTAL_TIMEOUTS_FG, SUM(total_timeouts)-SUM(TOTAL_TIMEOUTS_FG) A",
+ 	"S TOTAL_TIMEOUTS_BG, SUM(time_waited_fg) AS TIME_WAITED_FG, SUM(",
+ 	"time_waited)-SUM(TIME_WAITED_FG) AS TIME_WAITED_BG FROM SYS.GV_$",
+ 	"$system_event WHERE wait_class <> 'Idle' GROUP BY INST_ID, WAIT_",
+ 	"CLASS\n    - metrics:\n      - attribute_columns:\n        - DATABA",
+ 	"SE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        data_t",
+ 	"ype: gauge\n        description: The average sql service response",
+ 	" time.\n        metric_name: oracle.service.response_time\n       ",
+ 	" static_attributes:\n          db.system: oracle\n        unit: cs",
+ 	"\n        value_column: RESPONSE_TIME\n        value_type: double\n",
+ 	"      - attribute_columns:\n        - DATABASE_ID\n        - GLOBA",
+ 	"L_NAME\n        - INSTANCE_ID\n        data_type: gauge\n        de",
+ 	"scription: Ratio of buffer cache hits to requests.\n        metri",
+ 	"c_name: oracle.buffer.cache.ratio\n        static_attributes:\n   ",
+ 	"       db.system: oracle\n        unit: \"%\"\n        value_column:",
+ 	" BUFFER_HIT_RATIO\n        value_type: double\n      - attribute_c",
+ 	"olumns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - IN",
+ 	"STANCE_ID\n        data_type: gauge\n        description: Ratio of",
+ 	" row cache hits to requests.\n        metric_name: oracle.row.cac",
+ 	"he.ratio\n        static_attributes:\n          db.system: oracle\n",
+ 	"        unit: \"%\"\n        value_column: ROW_HIT_RATIO\n        va",
+ 	"lue_type: double\n      sql: |-\n        SELECT DATABASE_ID, GLOBA",
+ 	"L_NAME, INST_ID INSTANCE_ID, MAX(RESPONSE_TIME) RESPONSE_TIME, M",
+ 	"AX(BUFFER_HIT_RATIO) BUFFER_HIT_RATIO, MAX(ROW_HIT_RATIO) ROW_HI",
+ 	"T_RATIO\n        \t\t\tFROM (SELECT (SELECT DBID FROM SYS.GV_$$DATAB",
+ 	"ASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOB",
+ 	"AL_NAME, INST_ID, END_TIME, RESPONSE_TIME, BUFFER_HIT_RATIO, ROW",
+ 	"_HIT_RATIO\n        \t\t\tFROM (SELECT * FROM SYS.GV_$$sysmetric\n   ",
+ 	`     				WHERE METRIC_NAME IN ('SQL Service Response Time', 'Buf`,
+ 	"fer Cache Hit Ratio', 'Row Cache Hit Ratio')\n        \t\t\t\tAND GRO",
+ 	"UP_ID = 2)\n        \t\t\t\tPIVOT(\n        \t\t\t\t\tMAX(VALUE)\n        \t\t",
+ 	"\t\t\tFOR METRIC_NAME\n        \t\t\t\t\tIN (\n        \t\t\t\t\t\t'SQL Service ",
+ 	"Response Time' RESPONSE_TIME,\n        \t\t\t\t\t\t'Buffer Cache Hit Ra",
+ 	"tio' BUFFER_HIT_RATIO,\n        \t\t\t\t\t\t'Row Cache Hit Ratio' ROW_H",
+ 	"IT_RATIO\n        \t\t\t\t\t)\n        \t\t\t\t)\n        \t\t\t)\n        \t\t\tGR",
+ 	"OUP BY DATABASE_ID, GLOBAL_NAME, INST_ID\n    - metrics:\n      - ",
+ 	"attribute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n ",
+ 	"       - INSTANCE_ID\n        data_type: sum\n        description:",
+ 	" The total number of cursors.\n        metric_name: oracle.cursor",
+ 	".count\n        monotonic: true\n        static_attributes:\n      ",
+ 	"    db.system: oracle\n        unit: \"{cursors}\"\n        value_co",
+ 	"lumn: CURSORS_CUMULATIVE\n        value_type: int",
  	... // 7639 identical, 6264 removed, and 7099 inserted bytes
  }, "")
