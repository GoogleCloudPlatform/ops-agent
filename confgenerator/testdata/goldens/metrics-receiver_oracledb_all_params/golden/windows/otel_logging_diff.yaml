  strings.Join({
  	... // 21824 identical bytes
  	"ements:\n    - context: metric\n      statements:\n      - extract_",
  	"count_metric(true) where name == \"grpc.client.attempt.duration\"\n",
- 	"receivers:\n  hostmetrics/hostmetrics:\n    collection_interval: 6",
- 	"0s\n    scrapers:\n      cpu: {}\n      disk: {}\n      filesystem: ",
- 	"{}\n      load: {}\n      memory: {}\n      network: {}\n      pagin",
- 	"g: {}\n      process:\n        metrics:\n          process.handles:",
- 	"\n            enabled: true\n        mute_process_all_errors: true",
- 	"\n        mute_process_exe_error: true\n        mute_process_name_",
- 	"error: true\n      processes: {}\n  otlpjsonfile/ops_agent:\n    in",
- 	"clude:\n    - enabled_receivers_otlp.json\n    - feature_tracking_",
- 	"otlp.json\n    poll_interval: 1m0s\n    replay_file: true\n  promet",
- 	"heus/agent_prometheus:\n    config:\n      scrape_configs:\n      -",
- 	" job_name: logging-collector\n        metrics_path: /metrics\n    ",
- 	"    scrape_interval: 1m\n        static_configs:\n        - target",
- 	"s:\n          - 0.0.0.0:20202\n      - job_name: otel-collector\n  ",
- 	"      scrape_interval: 1m\n        static_configs:\n        - targ",
- 	"ets:\n          - 0.0.0.0:20201\n  sqlquery/oracledb:\n    collecti",
- 	"on_interval: 60s\n    datasource: oracle://sys:p%40ssword@myhost.",
- 	"domain:1111/db19c.domain?SSL=ENABLE&SSL+VERIFY=ENABLE&WALLET=%2F",
- 	"my%2Foracle%2Fwallet%2Fpath+here%2F\n    driver: oracle\n    queri",
- 	"es:\n    - metrics:\n      - attribute_columns:\n        - DATABASE",
- 	"_ID\n        - GLOBAL_NAME\n        - TABLESPACE_NAME\n        - CO",
- 	"NTENTS\n        data_type: sum\n        description: The size of t",
- 	"ablespaces in the database.\n        metric_name: oracle.tablespa",
- 	"ce.size\n        monotonic: false\n        static_attributes:\n    ",
- 	"      db.system: oracle\n          state: free\n        unit: by\n ",
- 	"       value_column: FREE_SPACE\n        value_type: int\n      - ",
- 	"attribute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n ",
- 	"       - TABLESPACE_NAME\n        - CONTENTS\n        data_type: s",
- 	"um\n        description: The size of tablespaces in the database.",
- 	"\n        metric_name: oracle.tablespace.size\n        monotonic: ",
- 	"false\n        static_attributes:\n          db.system: oracle\n   ",
- 	"       state: used\n        unit: by\n        value_column: USED_S",
- 	"PACE\n        value_type: int\n      sql: \"SELECT (SELECT DBID FRO",
- 	"M SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.G",
- 	`LOBAL_NAME) GLOBAL_NAME, ts.TABLESPACE_NAME, ts.CONTENTS,\n\t\t\`,
- 	`t\t(select sum(df.bytes) from sys.dba_data_files df where df.tab`,
- 	"lespace_name=ts.tablespace_name)-(select sum(fs.bytes) from sys.",
- 	"dba_free_space fs where fs.tablespace_name=ts.tablespace_name) A",
- 	`S USED_SPACE,\n\t\t\t\t(select sum(fs.bytes) from sys.dba_free_s`,
- 	"pace fs where fs.tablespace_name=ts.tablespace_name) AS FREE_SPA",
- 	`CE\n\t\t\tFROM sys.dba_tablespaces ts\n\t\t\tWHERE ts.contents <`,
- 	`> 'TEMPORARY'\n\t\t\tUNION ALL\n\t\t\tSELECT (SELECT DBID FROM S`,
- 	"YS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOB",
- 	"AL_NAME) GLOBAL_NAME, ts.NAME TABLESPACE_NAME, 'TEMPORARY' as CO",
- 	`NTENTS,\n\t\t\t\t\tSUM(ss.USED_BLOCKS * t.BLOCK_SIZE) USED_SPACE`,
- 	`,\n\t\t\t\t\tSUM(t.BYTES) - SUM(ss.USED_BLOCKS * t.BLOCK_SIZE) F`,
- 	`REE_SPACE\n\t\t\tFROM SYS.V_$$sort_segment ss\n\t\t\tJOIN sys.v_`,
- 	`$$tablespace ts\n\t\t\tON ss.TABLESPACE_NAME = ts.NAME\n\t\t\tJO`,
- 	`IN sys.v_$$tempfile t\n\t\t\tON t.TS# = ss.TS#\n\t\t\tGROUP BY t`,
- 	"s.NAME\"\n    - metrics:\n      - attribute_columns:\n        - DATA",
- 	"BASE_ID\n        - GLOBAL_NAME\n        - STATUS\n        - CONTENT",
- 	"S\n        data_type: sum\n        description: The number of tabl",
- 	"espaces in the database.\n        metric_name: oracle.tablespace.",
- 	"count\n        monotonic: false\n        static_attributes:\n      ",
- 	"    db.system: oracle\n        unit: \"{tablespaces}\"\n        valu",
- 	"e_column: COUNT\n        value_type: int\n      sql: SELECT (SELEC",
- 	"T DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME ",
- 	"FROM sys.GLOBAL_NAME) GLOBAL_NAME, CONTENTS, STATUS, COUNT(*) CO",
- 	"UNT FROM sys.dba_tablespaces GROUP BY STATUS, CONTENTS\n    - met",
- 	"rics:\n      - attribute_columns:\n        - DATABASE_ID\n        -",
- 	" GLOBAL_NAME\n        data_type: sum\n        description: The num",
- 	"ber of seconds since the last RMAN backup.\n        metric_name: ",
- 	"oracle.backup.latest\n        monotonic: true\n        static_attr",
- 	"ibutes:\n          db.system: oracle\n        unit: s\n        valu",
- 	"e_column: LATEST_BACKUP\n        value_type: int\n      sql: SELEC",
- 	"T (SELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOB",
- 	"AL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, (SELECT round(case wh",
- 	"en max(start_time) is null then -1 when sysdate - max(start_time",
- 	") > 0 then (sysdate - max(start_time)) * 86400 else 0 end) FROM ",
- 	"SYS.V_$$rman_backup_job_details ) LATEST_BACKUP FROM DUAL\n    - ",
- 	"metrics:\n      - attribute_columns:\n        - DATABASE_ID\n      ",
- 	"  - GLOBAL_NAME\n        - INSTANCE_ID\n        data_type: sum\n   ",
- 	"     description: The current number of processes.\n        metri",
- 	"c_name: oracle.process.count\n        monotonic: false\n        st",
- 	"atic_attributes:\n          db.system: oracle\n        unit: \"{pro",
- 	"cesses}\"\n        value_column: PROCESSES_UTIL\n        value_type",
- 	": int\n      - attribute_columns:\n        - DATABASE_ID\n        -",
- 	" GLOBAL_NAME\n        - INSTANCE_ID\n        data_type: sum\n      ",
- 	"  description: The maximum number of processes allowed.\n        ",
- 	"metric_name: oracle.process.limit\n        monotonic: false\n     ",
- 	"   static_attributes:\n          db.system: oracle\n        unit: ",
- 	"\"{processes}\"\n        value_column: PROCESSES_LIMIT_VAL\n        ",
- 	"value_type: int\n      - attribute_columns:\n        - DATABASE_ID",
- 	"\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        data_type: ",
- 	"sum\n        description: The current number of sessions.\n       ",
- 	" metric_name: oracle.session.count\n        monotonic: false\n    ",
- 	"    static_attributes:\n          db.system: oracle\n        unit:",
- 	" \"{sessions}\"\n        value_column: SESSIONS_UTIL\n        value_",
- 	"type: int\n      - attribute_columns:\n        - DATABASE_ID\n     ",
- 	"   - GLOBAL_NAME\n        - INSTANCE_ID\n        data_type: sum\n  ",
- 	"      description: The maximum number of sessions allowed.\n     ",
- 	"   metric_name: oracle.session.limit\n        monotonic: false\n  ",
- 	"      static_attributes:\n          db.system: oracle\n        uni",
- 	"t: \"{sessions}\"\n        value_column: SESSIONS_LIMIT_VAL\n       ",
- 	" value_type: int\n      sql: |-\n        SELECT DATABASE_ID, GLOBA",
- 	"L_NAME, INST_ID INSTANCE_ID, MAX(PROCESSES_UTIL) PROCESSES_UTIL,",
- 	" MAX(PROCESSES_LIMIT_VAL) PROCESSES_LIMIT_VAL, MAX(SESSIONS_UTIL",
- 	") SESSIONS_UTIL, MAX(SESSIONS_LIMIT_VAL) SESSIONS_LIMIT_VAL\n    ",
- 	`    			FROM (SELECT (SELECT DBID FROM SYS.GV_$$DATABASE) DATABAS`,
- 	"E_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, INS",
- 	"T_ID, PROCESSES_UTIL, PROCESSES_LIMIT_VAL, SESSIONS_UTIL, SESSIO",
- 	"NS_LIMIT_VAL\n        \t\t\tFROM (SELECT * FROM SYS.GV_$$resource_li",
- 	"mit\n        \t\t\t\tWHERE RESOURCE_NAME IN ('processes', 'sessions')",
- 	")\n        \t\t\t\tPIVOT(\n        \t\t\t\t\tMAX(TRIM(CURRENT_UTILIZATION))",
- 	" UTIL,\n        \t\t\t\t\tMAX(TRIM(LIMIT_VALUE)) LIMIT_VAL\n        \t\t\t",
- 	"\t\tFOR RESOURCE_NAME\n        \t\t\t\t\tIN (\n        \t\t\t\t\t\t'processes' ",
- 	"PROCESSES,\n        \t\t\t\t\t\t'sessions' SESSIONS\n        \t\t\t\t\t)\n    ",
- 	"    \t\t\t\t)\n        \t\t\t)\n        \t\t\tGROUP BY DATABASE_ID, GLOBAL_N",
- 	"AME, INST_ID\n    - metrics:\n      - attribute_columns:\n        -",
- 	" DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n       ",
- 	" - PROGRAM\n        data_type: sum\n        description: The progr",
- 	"ammable global area memory allocated by process.\n        metric_",
- 	"name: oracle.process.pga_memory.size\n        monotonic: false\n  ",
- 	"      static_attributes:\n          db.system: oracle\n          s",
- 	"tate: used\n        unit: by\n        value_column: USED_MEM\n     ",
- 	"   value_type: int\n      - attribute_columns:\n        - DATABASE",
- 	"_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        - PROGRA",
- 	"M\n        data_type: sum\n        description: The programmable g",
- 	"lobal area memory allocated by process.\n        metric_name: ora",
- 	"cle.process.pga_memory.size\n        monotonic: false\n        sta",
- 	"tic_attributes:\n          db.system: oracle\n          state: fre",
- 	"e\n        unit: by\n        value_column: FREE_MEM\n        value_",
- 	"type: int\n      sql: SELECT (SELECT DBID FROM SYS.GV_$$DATABASE)",
- 	" DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_N",
- 	"AME, INST_ID INSTANCE_ID, PROGRAM, SUM(PGA_USED_MEM) USED_MEM, S",
- 	"UM(PGA_ALLOC_MEM) - SUM(PGA_USED_MEM) FREE_MEM FROM SYS.GV_$$PRO",
- 	"CESS WHERE PROGRAM <> 'PSEUDO' GROUP BY PROGRAM, INST_ID\n    - m",
- 	"etrics:\n      - attribute_columns:\n        - DATABASE_ID\n       ",
- 	" - GLOBAL_NAME\n        - INSTANCE_ID\n        - WAIT_CLASS\n      ",
- 	"  data_type: sum\n        description: The number of wait events ",
- 	"experienced.\n        metric_name: oracle.wait.count\n        mono",
- 	"tonic: true\n        static_attributes:\n          db.system: orac",
- 	"le\n          type: foreground\n        unit: \"{events}\"\n        v",
- 	"alue_column: TOTAL_WAITS_FG\n        value_type: int\n      - attr",
- 	"ibute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n     ",
- 	"   - INSTANCE_ID\n        - WAIT_CLASS\n        data_type: sum\n   ",
- 	"     description: The number of wait events experienced.\n       ",
- 	" metric_name: oracle.wait.count\n        monotonic: true\n        ",
- 	"static_attributes:\n          db.system: oracle\n          type: b",
- 	"ackground\n        unit: \"{events}\"\n        value_column: TOTAL_W",
- 	"AITS_BG\n        value_type: int\n      - attribute_columns:\n     ",
- 	"   - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n   ",
- 	"     - WAIT_CLASS\n        data_type: sum\n        description: Th",
- 	"e amount of time waited for wait events.\n        metric_name: or",
- 	"acle.wait.time\n        monotonic: true\n        static_attributes",
- 	":\n          db.system: oracle\n          type: foreground\n       ",
- 	" unit: cs\n        value_column: TIME_WAITED_FG\n        value_typ",
- 	"e: int\n      - attribute_columns:\n        - DATABASE_ID\n        ",
- 	"- GLOBAL_NAME\n        - INSTANCE_ID\n        - WAIT_CLASS\n       ",
- 	" data_type: sum\n        description: The amount of time waited f",
- 	"or wait events.\n        metric_name: oracle.wait.time\n        mo",
- 	"notonic: true\n        static_attributes:\n          db.system: or",
- 	"acle\n          type: background\n        unit: cs\n        value_c",
- 	"olumn: TIME_WAITED_BG\n        value_type: int\n      - attribute_",
- 	"columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - I",
- 	"NSTANCE_ID\n        - WAIT_CLASS\n        data_type: sum\n        d",
- 	"escription: The number of timeouts for wait events.\n        metr",
- 	"ic_name: oracle.wait.timeouts\n        monotonic: true\n        st",
- 	"atic_attributes:\n          db.system: oracle\n          type: for",
- 	"eground\n        unit: \"{timeouts}\"\n        value_column: TOTAL_T",
- 	"IMEOUTS_FG\n        value_type: int\n      - attribute_columns:\n  ",
- 	"      - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n",
- 	"        - WAIT_CLASS\n        data_type: sum\n        description:",
- 	" The number of timeouts for wait events.\n        metric_name: or",
- 	"acle.wait.timeouts\n        monotonic: true\n        static_attrib",
- 	"utes:\n          db.system: oracle\n          type: background\n   ",
- 	"     unit: \"{timeouts}\"\n        value_column: TOTAL_TIMEOUTS_BG\n",
- 	"        value_type: int\n      sql: SELECT (SELECT DBID FROM SYS.",
- 	"GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_",
- 	"NAME) GLOBAL_NAME, INST_ID INSTANCE_ID, WAIT_CLASS, SUM(total_wa",
- 	"its_fg) AS TOTAL_WAITS_FG, SUM(total_waits)-SUM(total_waits_fg) ",
- 	"AS TOTAL_WAITS_BG, SUM(total_timeouts_fg) AS TOTAL_TIMEOUTS_FG, ",
- 	"SUM(total_timeouts)-SUM(TOTAL_TIMEOUTS_FG) AS TOTAL_TIMEOUTS_BG,",
- 	" SUM(time_waited_fg) AS TIME_WAITED_FG, SUM(time_waited)-SUM(TIM",
- 	"E_WAITED_FG) AS TIME_WAITED_BG FROM SYS.GV_$$system_event WHERE ",
- 	"wait_class <> 'Idle' GROUP BY INST_ID, WAIT_CLASS\n    - metrics:",
- 	"\n      - attribute_columns:\n        - DATABASE_ID\n        - GLOB",
- 	"AL_NAME\n        - INSTANCE_ID\n        data_type: gauge\n        d",
- 	"escription: The average sql service response time.\n        metri",
- 	"c_name: oracle.service.response_time\n        static_attributes:\n",
- 	"          db.system: oracle\n        unit: cs\n        value_colum",
- 	"n: RESPONSE_TIME\n        value_type: double\n      - attribute_co",
- 	"lumns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - INS",
- 	"TANCE_ID\n        data_type: gauge\n        description: Ratio of ",
- 	"buffer cache hits to requests.\n        metric_name: oracle.buffe",
- 	"r.cache.ratio\n        static_attributes:\n          db.system: or",
- 	"acle\n        unit: \"%\"\n        value_column: BUFFER_HIT_RATIO\n  ",
- 	"      value_type: double\n      - attribute_columns:\n        - DA",
- 	"TABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        da",
- 	"ta_type: gauge\n        description: Ratio of row cache hits to r",
- 	"equests.\n        metric_name: oracle.row.cache.ratio\n        sta",
- 	"tic_attributes:\n          db.system: oracle\n        unit: \"%\"\n  ",
- 	"      value_column: ROW_HIT_RATIO\n        value_type: double\n   ",
- 	"   sql: |-\n        SELECT DATABASE_ID, GLOBAL_NAME, INST_ID INST",
- 	"ANCE_ID, MAX(RESPONSE_TIME) RESPONSE_TIME, MAX(BUFFER_HIT_RATIO)",
- 	" BUFFER_HIT_RATIO, MAX(ROW_HIT_RATIO) ROW_HIT_RATIO\n        \t\t\tF",
- 	"ROM (SELECT (SELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (S",
- 	"ELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, INST_ID, EN",
- 	"D_TIME, RESPONSE_TIME, BUFFER_HIT_RATIO, ROW_HIT_RATIO\n        \t",
- 	"\t\tFROM (SELECT * FROM SYS.GV_$$sysmetric\n        \t\t\t\tWHERE METRI",
- 	"C_NAME IN ('SQL Service Response Time', 'Buffer Cache Hit Ratio'",
- 	", 'Row Cache Hit Ratio')\n        \t\t\t\tAND GROUP_ID = 2)\n        \t",
- 	"\t\t\tPIVOT(\n        \t\t\t\t\tMAX(VALUE)\n        \t\t\t\t\tFOR METRIC_NAME\n ",
- 	"       \t\t\t\t\tIN (\n        \t\t\t\t\t\t'SQL Service Response Time' RESPO",
- 	"NSE_TIME,\n        \t\t\t\t\t\t'Buffer Cache Hit Ratio' BUFFER_HIT_RATI",
- 	"O,\n        \t\t\t\t\t\t'Row Cache Hit Ratio' ROW_HIT_RATIO\n        \t\t\t",
- 	"\t\t)\n        \t\t\t\t)\n        \t\t\t)\n        \t\t\tGROUP BY DATABASE_ID, ",
- 	"GLOBAL_NAME, INST_ID\n    - metrics:",
+ 	"  transform/windows__event__log_0:\n    error_mode: ignore\n    lo",
+ 	"g_statements:\n    - context: log\n      statements:\n      - delet",
+ 	`e_key(cache, "__field_0") where (cache != nil and cache["__field`,
+ 	"_0\"] != nil)\n      - set(cache[\"__field_0\"], body[\"channel\"]) wh",
+ 	"ere (body != nil and body[\"channel\"] != nil)\n      - delete_key(",
+ 	`cache, "__field_1") where (cache != nil and cache["__field_1"] !`,
+ 	"= nil)\n      - set(cache[\"__field_1\"], body[\"computer\"]) where (",
+ 	"body != nil and body[\"computer\"] != nil)\n      - delete_key(cach",
+ 	`e, "__field_2") where (cache != nil and cache["__field_2"] != ni`,
+ 	"l)\n      - set(cache[\"__field_2\"], body[\"event_data\"][\"binary\"])",
+ 	` where (body != nil and body["event_data"] != nil and body["even`,
+ 	"t_data\"][\"binary\"] != nil)\n      - delete_key(cache, \"__field_3\"",
+ 	") where (cache != nil and cache[\"__field_3\"] != nil)\n      - set",
+ 	`(cache["__field_3"], body["event_id"]["id"]) where (body != nil `,
+ 	"and body[\"event_id\"] != nil and body[\"event_id\"][\"id\"] != nil)\n ",
+ 	`     - delete_key(cache, "__field_4") where (cache != nil and ca`,
+ 	"che[\"__field_4\"] != nil)\n      - set(cache[\"__field_4\"], body[\"l",
+ 	"evel\"]) where (body != nil and body[\"level\"] != nil)\n      - del",
+ 	`ete_key(cache, "__field_5") where (cache != nil and cache["__fie`,
+ 	"ld_5\"] != nil)\n      - set(cache[\"__field_5\"], body[\"message\"]) ",
+ 	"where (body != nil and body[\"message\"] != nil)\n      - delete_ke",
+ 	`y(cache, "__field_6") where (cache != nil and cache["__field_6"]`,
+ 	" != nil)\n      - set(cache[\"__field_6\"], body[\"event_id\"][\"quali",
+ 	`fiers"]) where (body != nil and body["event_id"] != nil and body`,
+ 	"[\"event_id\"][\"qualifiers\"] != nil)\n      - delete_key(cache, \"__",
+ 	"field_7\") where (cache != nil and cache[\"__field_7\"] != nil)\n   ",
+ 	`   - set(cache["__field_7"], body["record_id"]) where (body != n`,
+ 	"il and body[\"record_id\"] != nil)\n      - delete_key(cache, \"__fi",
+ 	"eld_8\") where (cache != nil and cache[\"__field_8\"] != nil)\n     ",
+ 	` - set(cache["__field_8"], body["security"]["user_id"]) where (b`,
+ 	`ody != nil and body["security"] != nil and body["security"]["use`,
+ 	"r_id\"] != nil)\n      - delete_key(cache, \"__field_9\") where (cac",
+ 	"he != nil and cache[\"__field_9\"] != nil)\n      - set(cache[\"__fi",
+ 	`eld_9"], body["provider"]["name"]) where (body != nil and body["`,
+ 	"provider\"] != nil and body[\"provider\"][\"name\"] != nil)\n      - d",
+ 	`elete_key(cache, "__field_10") where (cache != nil and cache["__`,
+ 	"field_10\"] != nil)\n      - set(cache[\"__field_10\"], body[\"event_",
+ 	`data"]["data"]) where (body != nil and body["event_data"] != nil`,
+ 	" and body[\"event_data\"][\"data\"] != nil)\n      - delete_key(cache",
+ 	`, "__field_11") where (cache != nil and cache["__field_11"] != n`,
+ 	"il)\n      - set(cache[\"__field_11\"], body[\"system_time\"]) where ",
+ 	"(body != nil and body[\"system_time\"] != nil)\n      - set(cache[\"",
+ 	"body\"], body)\n      - keep_keys(body, [])\n      - delete_key(cac",
+ 	"he, \"value\") where (cache != nil and cache[\"value\"] != nil)\n    ",
+ 	"  - set(cache[\"value\"], cache[\"__field_0\"])\n      - set(body[\"Ch",
+ 	`annel"], cache["value"]) where (cache != nil and cache["value"] `,
+ 	"!= nil)\n      - delete_key(cache, \"value\") where (cache != nil a",
+ 	"nd cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__f",
+ 	"ield_1\"])\n      - set(body[\"ComputerName\"], cache[\"value\"]) wher",
+ 	"e (cache != nil and cache[\"value\"] != nil)\n      - delete_key(ca",
+ 	"che, \"value\") where (cache != nil and cache[\"value\"] != nil)\n   ",
+ 	"   - set(cache[\"value\"], cache[\"__field_2\"])\n      - set(cache[\"",
+ 	"value\"], \"\") where cache[\"value\"] == nil\n      - set(cache[\"valu",
+ 	"e\"], ConvertCase(cache[\"value\"], \"lower\"))\n      - set(body[\"Dat",
+ 	`a"], cache["value"]) where (cache != nil and cache["value"] != n`,
+ 	"il)\n      - delete_key(cache, \"value\") where (cache != nil and c",
+ 	"ache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field",
+ 	"_3\"])\n      - set(body[\"EventID\"], cache[\"value\"]) where (cache ",
+ 	"!= nil and cache[\"value\"] != nil)\n      - delete_key(cache, \"val",
+ 	"ue\") where (cache != nil and cache[\"value\"] != nil)\n      - set(",
+ 	"cache[\"value\"], cache[\"__field_4\"])\n      - set(cache[\"value\"], ",
+ 	`"SuccessAudit") where ((cache != nil and cache["body"] != nil an`,
+ 	`d cache["body"]["keywords"] != nil) and cache["body"]["keywords"`,
+ 	`][0] != nil and cache["body"]["keywords"][0] == "Audit Success")`,
+ 	"\n      - set(cache[\"value\"], \"FailureAudit\") where ((cache != ni",
+ 	`l and cache["body"] != nil and cache["body"]["keywords"] != nil)`,
+ 	` and cache["body"]["keywords"][0] != nil and cache["body"]["keyw`,
+ 	"ords\"][0] == \"Audit Failure\")\n      - set(body[\"EventType\"], cac",
+ 	"he[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n    ",
+ 	`  - delete_key(cache, "value") where (cache != nil and cache["va`,
+ 	"lue\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_5\"])\n  ",
+ 	`    - set(body["Message"], cache["value"]) where (cache != nil a`,
+ 	"nd cache[\"value\"] != nil)\n      - delete_key(cache, \"value\") whe",
+ 	"re (cache != nil and cache[\"value\"] != nil)\n      - set(cache[\"v",
+ 	"alue\"], cache[\"__field_6\"])\n      - set(body[\"Qualifiers\"], cach",
+ 	"e[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n     ",
+ 	` - delete_key(cache, "value") where (cache != nil and cache["val`,
+ 	"ue\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_7\"])\n   ",
+ 	`   - set(body["RecordNumber"], cache["value"]) where (cache != n`,
+ 	"il and cache[\"value\"] != nil)\n      - delete_key(cache, \"value\")",
+ 	" where (cache != nil and cache[\"value\"] != nil)\n      - set(cach",
+ 	"e[\"value\"], cache[\"__field_8\"])\n      - set(cache[\"value\"], \"\") ",
+ 	"where cache[\"value\"] == nil\n      - set(body[\"Sid\"], cache[\"valu",
+ 	"e\"]) where (cache != nil and cache[\"value\"] != nil)\n      - dele",
+ 	`te_key(cache, "value") where (cache != nil and cache["value"] !=`,
+ 	" nil)\n      - set(cache[\"value\"], cache[\"__field_9\"])\n      - se",
+ 	`t(cache["value"], cache["body"]["provider"]["event_source"]) whe`,
+ 	`re ((cache != nil and cache["body"] != nil and cache["body"]["pr`,
+ 	`ovider"] != nil and cache["body"]["provider"]["event_source"] !=`,
+ 	` nil) and (not cache["body"]["provider"]["event_source"] == ""))`,
+ 	"\n      - set(body[\"SourceName\"], cache[\"value\"]) where (cache !=",
+ 	" nil and cache[\"value\"] != nil)\n      - delete_key(cache, \"value",
+ 	"\") where (cache != nil and cache[\"value\"] != nil)\n      - set(ca",
+ 	"che[\"value\"], cache[\"__field_10\"])\n      - set(cache[\"value\"], T",
+ 	"oValues(cache[\"value\"]))\n      - set(body[\"StringInserts\"], cach",
+ 	"e[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n     ",
+ 	` - delete_key(cache, "value") where (cache != nil and cache["val`,
+ 	"ue\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_11\"])\n  ",
+ 	`    - set(cache["value"], FormatTime(Time(cache["value"], "%Y-%m`,
+ 	"-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n      - set(body[\"TimeGen",
+ 	`erated"], cache["value"]) where (cache != nil and cache["value"]`,
+ 	" != nil)\n      - delete_key(cache, \"value\") where (cache != nil ",
+ 	"and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__",
+ 	"field_11\"])\n      - set(cache[\"value\"], FormatTime(Time(cache[\"v",
+ 	"alue\"], \"%Y-%m-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n      - set",
+ 	`(body["TimeWritten"], cache["value"]) where (cache != nil and ca`,
+ 	"che[\"value\"] != nil)\n  transform/windows__event__log_1:\n    erro",
+ 	"r_mode: ignore\n    log_statements:\n    - context: log\n      stat",
+ 	"ements:\n      - delete_key(cache, \"__field_0\") where (cache != n",
+ 	"il and cache[\"__field_0\"] != nil)\n      - set(cache[\"__field_0\"]",
+ 	`, attributes["compute.googleapis.com/instance_group_manager/name`,
+ 	`"]) where (attributes != nil and attributes["compute.googleapis.`,
+ 	"com/instance_group_manager/name\"] != nil)\n      - delete_key(cac",
+ 	`he, "__field_1") where (cache != nil and cache["__field_1"] != n`,
+ 	"il)\n      - set(cache[\"__field_1\"], attributes[\"compute.googleap",
+ 	`is.com/instance_group_manager/zone"]) where (attributes != nil a`,
+ 	`nd attributes["compute.googleapis.com/instance_group_manager/zon`,
+ 	"e\"] != nil)\n      - delete_key(cache, \"__field_2\") where (cache ",
+ 	"!= nil and cache[\"__field_2\"] != nil)\n      - set(cache[\"__field",
+ 	`_2"], attributes["compute.googleapis.com/resource_name"]) where `,
+ 	`(attributes != nil and attributes["compute.googleapis.com/resour`,
+ 	"ce_name\"] != nil)\n      - delete_key(cache, \"__field_3\") where (",
+ 	"cache != nil and cache[\"__field_3\"] != nil)\n      - set(cache[\"_",
+ 	`_field_3"], attributes["gcp.log_name"]) where (attributes != nil`,
+ 	" and attributes[\"gcp.log_name\"] != nil)\n      - delete_key(cache",
+ 	", \"value\") where (cache != nil and cache[\"value\"] != nil)\n      ",
+ 	"- set(cache[\"value\"], cache[\"__field_0\"])\n      - set(cache[\"val",
+ 	"ue\"], \"test-mig\") where cache[\"value\"] == nil\n      - set(attrib",
+ 	`utes["compute.googleapis.com/instance_group_manager/name"], cach`,
+ 	"e[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n     ",
+ 	` - delete_key(cache, "value") where (cache != nil and cache["val`,
+ 	"ue\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_1\"])\n   ",
+ 	`   - set(cache["value"], "test-zone") where cache["value"] == ni`,
+ 	"l\n      - set(attributes[\"compute.googleapis.com/instance_group_",
+ 	`manager/zone"], cache["value"]) where (cache != nil and cache["v`,
+ 	"alue\"] != nil)\n      - delete_key(cache, \"value\") where (cache !",
+ 	"= nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cac",
+ 	"he[\"__field_2\"])\n      - set(cache[\"value\"], \"\") where cache[\"va",
+ 	"lue\"] == nil\n      - set(attributes[\"compute.googleapis.com/reso",
+ 	`urce_name"], cache["value"]) where (cache != nil and cache["valu`,
+ 	"e\"] != nil)\n      - delete_key(cache, \"value\") where (cache != n",
+ 	"il and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[",
+ 	"\"__field_3\"])\n      - set(cache[\"value\"], \"windows_event_log\") w",
+ 	"here cache[\"value\"] == nil\n      - set(attributes[\"gcp.log_name\"",
+ 	`], cache["value"]) where (cache != nil and cache["value"] != nil`,
+ 	")\n  transform/windows__event__log_1_0:\n    error_mode: ignore\n  ",
+ 	"  log_statements:\n    - context: log\n      statements:\n      - d",
+ 	`elete_key(cache, "__field_0") where (cache != nil and cache["__f`,
+ 	"ield_0\"] != nil)\n      - set(cache[\"__field_0\"], body[\"channel\"]",
+ 	") where (body != nil and body[\"channel\"] != nil)\n      - delete_",
+ 	`key(cache, "__field_1") where (cache != nil and cache["__field_1`,
+ 	"\"] != nil)\n      - set(cache[\"__field_1\"], body[\"computer\"]) whe",
+ 	"re (body != nil and body[\"computer\"] != nil)\n      - delete_key(",
+ 	`cache, "__field_2") where (cache != nil and cache["__field_2"] !`,
+ 	"= nil)\n      - set(cache[\"__field_2\"], body[\"event_data\"][\"binar",
+ 	`y"]) where (body != nil and body["event_data"] != nil and body["`,
+ 	"event_data\"][\"binary\"] != nil)\n      - delete_key(cache, \"__fiel",
+ 	"d_3\") where (cache != nil and cache[\"__field_3\"] != nil)\n      -",
+ 	` set(cache["__field_3"], body["event_id"]["id"]) where (body != `,
+ 	`nil and body["event_id"] != nil and body["event_id"]["id"] != ni`,
+ 	"l)\n      - delete_key(cache, \"__field_4\") where (cache != nil an",
+ 	"d cache[\"__field_4\"] != nil)\n      - set(cache[\"__field_4\"], bod",
+ 	"y[\"level\"]) where (body != nil and body[\"level\"] != nil)\n      -",
+ 	` delete_key(cache, "__field_5") where (cache != nil and cache["_`,
+ 	"_field_5\"] != nil)\n      - set(cache[\"__field_5\"], body[\"message",
+ 	"\"]) where (body != nil and body[\"message\"] != nil)\n      - delet",
+ 	`e_key(cache, "__field_6") where (cache != nil and cache["__field`,
+ 	"_6\"] != nil)\n      - set(cache[\"__field_6\"], body[\"event_id\"][\"q",
+ 	`ualifiers"]) where (body != nil and body["event_id"] != nil and `,
+ 	"body[\"event_id\"][\"qualifiers\"] != nil)\n      - delete_key(cache,",
+ 	` "__field_7") where (cache != nil and cache["__field_7"] != nil)`,
+ 	"\n      - set(cache[\"__field_7\"], body[\"record_id\"]) where (body ",
+ 	"!= nil and body[\"record_id\"] != nil)\n      - delete_key(cache, \"",
+ 	"__field_8\") where (cache != nil and cache[\"__field_8\"] != nil)\n ",
+ 	`     - set(cache["__field_8"], body["security"]["user_id"]) wher`,
+ 	`e (body != nil and body["security"] != nil and body["security"][`,
+ 	"\"user_id\"] != nil)\n      - delete_key(cache, \"__field_9\") where ",
+ 	"(cache != nil and cache[\"__field_9\"] != nil)\n      - set(cache[\"",
+ 	`__field_9"], body["provider"]["name"]) where (body != nil and bo`,
+ 	"dy[\"provider\"] != nil and body[\"provider\"][\"name\"] != nil)\n     ",
+ 	` - delete_key(cache, "__field_10") where (cache != nil and cache`,
+ 	"[\"__field_10\"] != nil)\n      - set(cache[\"__field_10\"], body[\"ev",
+ 	`ent_data"]["data"]) where (body != nil and body["event_data"] !=`,
+ 	" nil and body[\"event_data\"][\"data\"] != nil)\n      - delete_key(c",
+ 	`ache, "__field_11") where (cache != nil and cache["__field_11"] `,
+ 	"!= nil)\n      - set(cache[\"__field_11\"], body[\"system_time\"]) wh",
+ 	"ere (body != nil and body[\"system_time\"] != nil)\n      - set(cac",
+ 	"he[\"body\"], body)\n      - keep_keys(body, [])\n      - delete_key",
+ 	"(cache, \"value\") where (cache != nil and cache[\"value\"] != nil)\n",
+ 	"      - set(cache[\"value\"], cache[\"__field_0\"])\n      - set(body",
+ 	`["Channel"], cache["value"]) where (cache != nil and cache["valu`,
+ 	"e\"] != nil)\n      - delete_key(cache, \"value\") where (cache != n",
+ 	"il and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[",
+ 	"\"__field_1\"])\n      - set(body[\"ComputerName\"], cache[\"value\"]) ",
+ 	"where (cache != nil and cache[\"value\"] != nil)\n      - delete_ke",
+ 	`y(cache, "value") where (cache != nil and cache["value"] != nil)`,
+ 	"\n      - set(cache[\"value\"], cache[\"__field_2\"])\n      - set(cac",
+ 	"he[\"value\"], \"\") where cache[\"value\"] == nil\n      - set(cache[\"",
+ 	"value\"], ConvertCase(cache[\"value\"], \"lower\"))\n      - set(body[",
+ 	`"Data"], cache["value"]) where (cache != nil and cache["value"] `,
+ 	"!= nil)\n      - delete_key(cache, \"value\") where (cache != nil a",
+ 	"nd cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__f",
+ 	"ield_3\"])\n      - set(body[\"EventID\"], cache[\"value\"]) where (ca",
+ 	"che != nil and cache[\"value\"] != nil)\n      - delete_key(cache, ",
+ 	"\"value\") where (cache != nil and cache[\"value\"] != nil)\n      - ",
+ 	"set(cache[\"value\"], cache[\"__field_4\"])\n      - set(cache[\"value",
+ 	`"], "SuccessAudit") where ((cache != nil and cache["body"] != ni`,
+ 	`l and cache["body"]["keywords"] != nil) and cache["body"]["keywo`,
+ 	`rds"][0] != nil and cache["body"]["keywords"][0] == "Audit Succe`,
+ 	"ss\")\n      - set(cache[\"value\"], \"FailureAudit\") where ((cache !",
+ 	`= nil and cache["body"] != nil and cache["body"]["keywords"] != `,
+ 	`nil) and cache["body"]["keywords"][0] != nil and cache["body"]["`,
+ 	"keywords\"][0] == \"Audit Failure\")\n      - set(body[\"EventType\"],",
+ 	" cache[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n",
+ 	`      - delete_key(cache, "value") where (cache != nil and cache`,
+ 	"[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_5\"]",
+ 	")\n      - set(body[\"Message\"], cache[\"value\"]) where (cache != n",
+ 	"il and cache[\"value\"] != nil)\n      - delete_key(cache, \"value\")",
+ 	" where (cache != nil and cache[\"value\"] != nil)\n      - set(cach",
+ 	"e[\"value\"], cache[\"__field_6\"])\n      - set(body[\"Qualifiers\"], ",
+ 	"cache[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n ",
+ 	`     - delete_key(cache, "value") where (cache != nil and cache[`,
+ 	"\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_7\"])",
+ 	"\n      - set(body[\"RecordNumber\"], cache[\"value\"]) where (cache ",
+ 	"!= nil and cache[\"value\"] != nil)\n      - delete_key(cache, \"val",
+ 	"ue\") where (cache != nil and cache[\"value\"] != nil)\n      - set(",
+ 	"cache[\"value\"], cache[\"__field_8\"])\n      - set(cache[\"value\"], ",
+ 	"\"\") where cache[\"value\"] == nil\n      - set(body[\"Sid\"], cache[\"",
+ 	"value\"]) where (cache != nil and cache[\"value\"] != nil)\n      - ",
+ 	`delete_key(cache, "value") where (cache != nil and cache["value"`,
+ 	"] != nil)\n      - set(cache[\"value\"], cache[\"__field_9\"])\n      ",
+ 	`- set(cache["value"], cache["body"]["provider"]["event_source"])`,
+ 	` where ((cache != nil and cache["body"] != nil and cache["body"]`,
+ 	`["provider"] != nil and cache["body"]["provider"]["event_source"`,
+ 	`] != nil) and (not cache["body"]["provider"]["event_source"] == `,
+ 	"\"\"))\n      - set(body[\"SourceName\"], cache[\"value\"]) where (cach",
+ 	"e != nil and cache[\"value\"] != nil)\n      - delete_key(cache, \"v",
+ 	"alue\") where (cache != nil and cache[\"value\"] != nil)\n      - se",
+ 	"t(cache[\"value\"], cache[\"__field_10\"])\n      - set(cache[\"value\"",
+ 	"], ToValues(cache[\"value\"]))\n      - set(body[\"StringInserts\"], ",
+ 	"cache[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n ",
+ 	`     - delete_key(cache, "value") where (cache != nil and cache[`,
+ 	"\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_11\"]",
+ 	")\n      - set(cache[\"value\"], FormatTime(Time(cache[\"value\"], \"%",
+ 	"Y-%m-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n      - set(body[\"Tim",
+ 	`eGenerated"], cache["value"]) where (cache != nil and cache["val`,
+ 	"ue\"] != nil)\n      - delete_key(cache, \"value\") where (cache != ",
+ 	"nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache",
+ 	"[\"__field_11\"])\n      - set(cache[\"value\"], FormatTime(Time(cach",
+ 	"e[\"value\"], \"%Y-%m-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n      -",
+ 	` set(body["TimeWritten"], cache["value"]) where (cache != nil an`,
+ 	"d cache[\"value\"] != nil)\n  transform/windows__event__log_1_1:\n  ",
+ 	"  error_mode: ignore\n    log_statements:\n    - context: log\n    ",
+ 	"  statements:\n      - delete_key(cache, \"__field_0\") where (cach",
+ 	"e != nil and cache[\"__field_0\"] != nil)\n      - set(cache[\"__fie",
+ 	`ld_0"], attributes["compute.googleapis.com/instance_group_manage`,
+ 	`r/name"]) where (attributes != nil and attributes["compute.googl`,
+ 	"eapis.com/instance_group_manager/name\"] != nil)\n      - delete_k",
+ 	`ey(cache, "__field_1") where (cache != nil and cache["__field_1"`,
+ 	"] != nil)\n      - set(cache[\"__field_1\"], attributes[\"compute.go",
+ 	`ogleapis.com/instance_group_manager/zone"]) where (attributes !=`,
+ 	` nil and attributes["compute.googleapis.com/instance_group_manag`,
+ 	"er/zone\"] != nil)\n      - delete_key(cache, \"__field_2\") where (",
+ 	"cache != nil and cache[\"__field_2\"] != nil)\n      - set(cache[\"_",
+ 	`_field_2"], attributes["compute.googleapis.com/resource_name"]) `,
+ 	`where (attributes != nil and attributes["compute.googleapis.com/`,
+ 	"resource_name\"] != nil)\n      - delete_key(cache, \"__field_3\") w",
+ 	"here (cache != nil and cache[\"__field_3\"] != nil)\n      - set(ca",
+ 	`che["__field_3"], attributes["gcp.log_name"]) where (attributes `,
+ 	"!= nil and attributes[\"gcp.log_name\"] != nil)\n      - delete_key",
+ 	"(cache, \"value\") where (cache != nil and cache[\"value\"] != nil)\n",
+ 	"      - set(cache[\"value\"], cache[\"__field_0\"])\n      - set(cach",
+ 	"e[\"value\"], \"test-mig\") where cache[\"value\"] == nil\n      - set(",
+ 	`attributes["compute.googleapis.com/instance_group_manager/name"]`,
+ 	`, cache["value"]) where (cache != nil and cache["value"] != nil)`,
+ 	"\n      - delete_key(cache, \"value\") where (cache != nil and cach",
+ 	"e[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_1\"",
+ 	"])\n      - set(cache[\"value\"], \"test-zone\") where cache[\"value\"]",
+ 	" == nil\n      - set(attributes[\"compute.googleapis.com/instance_",
+ 	`group_manager/zone"], cache["value"]) where (cache != nil and ca`,
+ 	"che[\"value\"] != nil)\n      - delete_key(cache, \"value\") where (c",
+ 	"ache != nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"",
+ 	"], cache[\"__field_2\"])\n      - set(cache[\"value\"], \"\") where cac",
+ 	"he[\"value\"] == nil\n      - set(attributes[\"compute.googleapis.co",
+ 	`m/resource_name"], cache["value"]) where (cache != nil and cache`,
+ 	"[\"value\"] != nil)\n      - delete_key(cache, \"value\") where (cach",
+ 	"e != nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"], ",
+ 	"cache[\"__field_3\"])\n      - set(cache[\"value\"], \"windows_event_l",
+ 	"og\") where cache[\"value\"] == nil\n      - set(attributes[\"gcp.log",
+ 	`_name"], cache["value"]) where (cache != nil and cache["value"] `,
+ 	"!= nil)\n  transform/windows__event__log_2_0:\n    error_mode: ign",
+ 	"ore\n    log_statements:\n    - context: log\n      statements:\n   ",
+ 	`   - delete_key(cache, "__field_0") where (cache != nil and cach`,
+ 	"e[\"__field_0\"] != nil)\n      - set(cache[\"__field_0\"], body[\"cha",
+ 	"nnel\"]) where (body != nil and body[\"channel\"] != nil)\n      - d",
+ 	`elete_key(cache, "__field_1") where (cache != nil and cache["__f`,
+ 	"ield_1\"] != nil)\n      - set(cache[\"__field_1\"], body[\"computer\"",
+ 	"]) where (body != nil and body[\"computer\"] != nil)\n      - delet",
+ 	`e_key(cache, "__field_2") where (cache != nil and cache["__field`,
+ 	"_2\"] != nil)\n      - set(cache[\"__field_2\"], body[\"event_data\"][",
+ 	`"binary"]) where (body != nil and body["event_data"] != nil and `,
+ 	"body[\"event_data\"][\"binary\"] != nil)\n      - delete_key(cache, \"",
+ 	"__field_3\") where (cache != nil and cache[\"__field_3\"] != nil)\n ",
+ 	`     - set(cache["__field_3"], body["event_id"]["id"]) where (bo`,
+ 	`dy != nil and body["event_id"] != nil and body["event_id"]["id"]`,
+ 	" != nil)\n      - delete_key(cache, \"__field_4\") where (cache != ",
+ 	"nil and cache[\"__field_4\"] != nil)\n      - set(cache[\"__field_4\"",
+ 	"], body[\"level\"]) where (body != nil and body[\"level\"] != nil)\n ",
+ 	`     - delete_key(cache, "__field_5") where (cache != nil and ca`,
+ 	"che[\"__field_5\"] != nil)\n      - set(cache[\"__field_5\"], body[\"m",
+ 	"essage\"]) where (body != nil and body[\"message\"] != nil)\n      -",
+ 	` delete_key(cache, "__field_6") where (cache != nil and cache["_`,
+ 	"_field_6\"] != nil)\n      - set(cache[\"__field_6\"], body[\"event_i",
+ 	`d"]["qualifiers"]) where (body != nil and body["event_id"] != ni`,
+ 	"l and body[\"event_id\"][\"qualifiers\"] != nil)\n      - delete_key(",
+ 	`cache, "__field_7") where (cache != nil and cache["__field_7"] !`,
+ 	"= nil)\n      - set(cache[\"__field_7\"], body[\"record_id\"]) where ",
+ 	"(body != nil and body[\"record_id\"] != nil)\n      - delete_key(ca",
+ 	`che, "__field_8") where (cache != nil and cache["__field_8"] != `,
+ 	"nil)\n      - set(cache[\"__field_8\"], body[\"security\"][\"user_id\"]",
+ 	`) where (body != nil and body["security"] != nil and body["secur`,
+ 	"ity\"][\"user_id\"] != nil)\n      - delete_key(cache, \"__field_9\") ",
+ 	"where (cache != nil and cache[\"__field_9\"] != nil)\n      - set(c",
+ 	`ache["__field_9"], body["provider"]["name"]) where (body != nil `,
+ 	`and body["provider"] != nil and body["provider"]["name"] != nil)`,
+ 	"\n      - delete_key(cache, \"__field_10\") where (cache != nil and",
+ 	" cache[\"__field_10\"] != nil)\n      - set(cache[\"__field_10\"], bo",
+ 	`dy["event_data"]["data"]) where (body != nil and body["event_dat`,
+ 	"a\"] != nil and body[\"event_data\"][\"data\"] != nil)\n      - delete",
+ 	`_key(cache, "__field_11") where (cache != nil and cache["__field`,
+ 	"_11\"] != nil)\n      - set(cache[\"__field_11\"], body[\"system_time",
+ 	"\"]) where (body != nil and body[\"system_time\"] != nil)\n      - s",
+ 	"et(cache[\"body\"], body)\n      - keep_keys(body, [])\n      - dele",
+ 	`te_key(cache, "value") where (cache != nil and cache["value"] !=`,
+ 	" nil)\n      - set(cache[\"value\"], cache[\"__field_0\"])\n      - se",
+ 	`t(body["Channel"], cache["value"]) where (cache != nil and cache`,
+ 	"[\"value\"] != nil)\n      - delete_key(cache, \"value\") where (cach",
+ 	"e != nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"], ",
+ 	"cache[\"__field_1\"])\n      - set(body[\"ComputerName\"], cache[\"val",
+ 	"ue\"]) where (cache != nil and cache[\"value\"] != nil)\n      - del",
+ 	`ete_key(cache, "value") where (cache != nil and cache["value"] !`,
+ 	"= nil)\n      - set(cache[\"value\"], cache[\"__field_2\"])\n      - s",
+ 	"et(cache[\"value\"], \"\") where cache[\"value\"] == nil\n      - set(c",
+ 	"ache[\"value\"], ConvertCase(cache[\"value\"], \"lower\"))\n      - set",
+ 	`(body["Data"], cache["value"]) where (cache != nil and cache["va`,
+ 	"lue\"] != nil)\n      - delete_key(cache, \"value\") where (cache !=",
+ 	" nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cach",
+ 	"e[\"__field_3\"])\n      - set(body[\"EventID\"], cache[\"value\"]) whe",
+ 	"re (cache != nil and cache[\"value\"] != nil)\n      - delete_key(c",
+ 	"ache, \"value\") where (cache != nil and cache[\"value\"] != nil)\n  ",
+ 	"    - set(cache[\"value\"], cache[\"__field_4\"])\n      - set(cache[",
+ 	`"value"], "SuccessAudit") where ((cache != nil and cache["body"]`,
+ 	` != nil and cache["body"]["keywords"] != nil) and cache["body"][`,
+ 	`"keywords"][0] != nil and cache["body"]["keywords"][0] == "Audit`,
+ 	" Success\")\n      - set(cache[\"value\"], \"FailureAudit\") where ((c",
+ 	`ache != nil and cache["body"] != nil and cache["body"]["keywords`,
+ 	`"] != nil) and cache["body"]["keywords"][0] != nil and cache["bo`,
+ 	"dy\"][\"keywords\"][0] == \"Audit Failure\")\n      - set(body[\"EventT",
+ 	`ype"], cache["value"]) where (cache != nil and cache["value"] !=`,
+ 	" nil)\n      - delete_key(cache, \"value\") where (cache != nil and",
+ 	" cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__fie",
+ 	"ld_5\"])\n      - set(body[\"Message\"], cache[\"value\"]) where (cach",
+ 	"e != nil and cache[\"value\"] != nil)\n      - delete_key(cache, \"v",
+ 	"alue\") where (cache != nil and cache[\"value\"] != nil)\n      - se",
+ 	"t(cache[\"value\"], cache[\"__field_6\"])\n      - set(body[\"Qualifie",
+ 	`rs"], cache["value"]) where (cache != nil and cache["value"] != `,
+ 	"nil)\n      - delete_key(cache, \"value\") where (cache != nil and ",
+ 	"cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__fiel",
+ 	"d_7\"])\n      - set(body[\"RecordNumber\"], cache[\"value\"]) where (",
+ 	"cache != nil and cache[\"value\"] != nil)\n      - delete_key(cache",
+ 	", \"value\") where (cache != nil and cache[\"value\"] != nil)\n      ",
+ 	"- set(cache[\"value\"], cache[\"__field_8\"])\n      - set(cache[\"val",
+ 	"ue\"], \"\") where cache[\"value\"] == nil\n      - set(body[\"Sid\"], c",
+ 	"ache[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n  ",
+ 	`    - delete_key(cache, "value") where (cache != nil and cache["`,
+ 	"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_9\"])\n",
+ 	`      - set(cache["value"], cache["body"]["provider"]["event_sou`,
+ 	`rce"]) where ((cache != nil and cache["body"] != nil and cache["`,
+ 	`body"]["provider"] != nil and cache["body"]["provider"]["event_s`,
+ 	`ource"] != nil) and (not cache["body"]["provider"]["event_source`,
+ 	"\"] == \"\"))\n      - set(body[\"SourceName\"], cache[\"value\"]) where",
+ 	" (cache != nil and cache[\"value\"] != nil)\n      - delete_key(cac",
+ 	"he, \"value\") where (cache != nil and cache[\"value\"] != nil)\n    ",
+ 	"  - set(cache[\"value\"], cache[\"__field_10\"])\n      - set(cache[\"",
+ 	"value\"], ToValues(cache[\"value\"]))\n      - set(body[\"StringInser",
+ 	`ts"], cache["value"]) where (cache != nil and cache["value"] != `,
+ 	"nil)\n      - delete_key(cache, \"value\") where (cache != nil and ",
+ 	"cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__fiel",
+ 	"d_11\"])\n      - set(cache[\"value\"], FormatTime(Time(cache[\"value",
+ 	"\"], \"%Y-%m-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n      - set(bod",
+ 	`y["TimeGenerated"], cache["value"]) where (cache != nil and cach`,
+ 	"e[\"value\"] != nil)\n      - delete_key(cache, \"value\") where (cac",
+ 	"he != nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"],",
+ 	" cache[\"__field_11\"])\n      - set(cache[\"value\"], FormatTime(Tim",
+ 	"e(cache[\"value\"], \"%Y-%m-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n ",
+ 	`     - set(body["TimeWritten"], cache["value"]) where (cache != `,
+ 	"nil and cache[\"value\"] != nil)\n  transform/windows__event__log_2",
+ 	"_1:\n    error_mode: ignore\n    log_statements:\n    - context: lo",
+ 	"g\n      statements:\n      - delete_key(cache, \"__field_0\") where",
+ 	" (cache != nil and cache[\"__field_0\"] != nil)\n      - set(cache[",
+ 	`"__field_0"], attributes["compute.googleapis.com/instance_group_`,
+ 	`manager/name"]) where (attributes != nil and attributes["compute`,
+ 	".googleapis.com/instance_group_manager/name\"] != nil)\n      - de",
+ 	`lete_key(cache, "__field_1") where (cache != nil and cache["__fi`,
+ 	"eld_1\"] != nil)\n      - set(cache[\"__field_1\"], attributes[\"comp",
+ 	`ute.googleapis.com/instance_group_manager/zone"]) where (attribu`,
+ 	`tes != nil and attributes["compute.googleapis.com/instance_group`,
+ 	"_manager/zone\"] != nil)\n      - delete_key(cache, \"__field_2\") w",
+ 	"here (cache != nil and cache[\"__field_2\"] != nil)\n      - set(ca",
+ 	`che["__field_2"], attributes["compute.googleapis.com/resource_na`,
+ 	`me"]) where (attributes != nil and attributes["compute.googleapi`,
+ 	"s.com/resource_name\"] != nil)\n      - delete_key(cache, \"__field",
+ 	"_3\") where (cache != nil and cache[\"__field_3\"] != nil)\n      - ",
+ 	`set(cache["__field_3"], attributes["gcp.log_name"]) where (attri`,
+ 	"butes != nil and attributes[\"gcp.log_name\"] != nil)\n      - dele",
+ 	`te_key(cache, "value") where (cache != nil and cache["value"] !=`,
+ 	" nil)\n      - set(cache[\"value\"], cache[\"__field_0\"])\n      - se",
+ 	"t(cache[\"value\"], \"test-mig\") where cache[\"value\"] == nil\n      ",
+ 	`- set(attributes["compute.googleapis.com/instance_group_manager/`,
+ 	`name"], cache["value"]) where (cache != nil and cache["value"] !`,
+ 	"= nil)\n      - delete_key(cache, \"value\") where (cache != nil an",
+ 	"d cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__fi",
+ 	"eld_1\"])\n      - set(cache[\"value\"], \"test-zone\") where cache[\"v",
+ 	"alue\"] == nil\n      - set(attributes[\"compute.googleapis.com/ins",
+ 	`tance_group_manager/zone"], cache["value"]) where (cache != nil `,
+ 	"and cache[\"value\"] != nil)\n      - delete_key(cache, \"value\") wh",
+ 	"ere (cache != nil and cache[\"value\"] != nil)\n      - set(cache[\"",
+ 	"value\"], cache[\"__field_2\"])\n      - set(cache[\"value\"], \"\") whe",
+ 	"re cache[\"value\"] == nil\n      - set(attributes[\"compute.googlea",
+ 	`pis.com/resource_name"], cache["value"]) where (cache != nil and`,
+ 	" cache[\"value\"] != nil)\n      - delete_key(cache, \"value\") where",
+ 	" (cache != nil and cache[\"value\"] != nil)\n      - set(cache[\"val",
+ 	"ue\"], cache[\"__field_3\"])\n      - set(cache[\"value\"], \"windows_e",
+ 	"vent_log\") where cache[\"value\"] == nil\n      - set(attributes[\"g",
+ 	`cp.log_name"], cache["value"]) where (cache != nil and cache["va`,
+ 	"lue\"] != nil)\nreceivers:\n  hostmetrics/hostmetrics:\n    collecti",
+ 	"on_interval: 60s\n    scrapers:\n      cpu: {}\n      disk: {}\n    ",
+ 	"  filesystem: {}\n      load: {}\n      memory: {}\n      network: ",
+ 	"{}\n      paging: {}\n      process:\n        metrics:\n          pr",
+ 	"ocess.handles:\n            enabled: true\n        mute_process_al",
+ 	"l_errors: true\n        mute_process_exe_error: true\n        mute",
+ 	"_process_name_error: true\n      processes: {}\n  otlpjsonfile/ops",
+ 	"_agent:\n    include:\n    - enabled_receivers_otlp.json\n    - fea",
+ 	"ture_tracking_otlp.json\n    poll_interval: 1m0s\n    replay_file:",
+ 	" true\n  prometheus/agent_prometheus:\n    config:\n      scrape_co",
+ 	"nfigs:\n      - job_name: logging-collector\n        metrics_path:",
+ 	" /metrics\n        scrape_interval: 1m\n        static_configs:\n  ",
+ 	"      - targets:\n          - 0.0.0.0:20202\n      - job_name: ote",
+ 	"l-collector\n        scrape_interval: 1m\n        static_configs:\n",
+ 	"        - targets:\n          - 0.0.0.0:20201\n  sqlquery/oracledb",
+ 	":\n    collection_interval: 60s\n    datasource: oracle://sys:p%40",
+ 	"ssword@myhost.domain:1111/db19c.domain?SSL=ENABLE&SSL+VERIFY=ENA",
+ 	"BLE&WALLET=%2Fmy%2Foracle%2Fwallet%2Fpath+here%2F\n    driver: or",
+ 	"acle\n    queries:\n    - metrics:\n      - attribute_columns:\n    ",
+ 	"    - DATABASE_ID\n        - GLOBAL_NAME\n        - TABLESPACE_NAM",
+ 	"E\n        - CONTENTS\n        data_type: sum\n        description:",
+ 	" The size of tablespaces in the database.\n        metric_name: o",
+ 	"racle.tablespace.size\n        monotonic: false\n        static_at",
+ 	"tributes:\n          db.system: oracle\n          state: free\n    ",
+ 	"    unit: by\n        value_column: FREE_SPACE\n        value_type",
+ 	": int\n      - attribute_columns:\n        - DATABASE_ID\n        -",
+ 	" GLOBAL_NAME\n        - TABLESPACE_NAME\n        - CONTENTS\n      ",
+ 	"  data_type: sum\n        description: The size of tablespaces in",
+ 	" the database.\n        metric_name: oracle.tablespace.size\n     ",
+ 	"   monotonic: false\n        static_attributes:\n          db.syst",
+ 	"em: oracle\n          state: used\n        unit: by\n        value_",
+ 	"column: USED_SPACE\n        value_type: int\n      sql: \"SELECT (S",
+ 	"ELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_N",
+ 	"AME FROM sys.GLOBAL_NAME) GLOBAL_NAME, ts.TABLESPACE_NAME, ts.CO",
+ 	`NTENTS,\n\t\t\t\t(select sum(df.bytes) from sys.dba_data_files d`,
+ 	"f where df.tablespace_name=ts.tablespace_name)-(select sum(fs.by",
+ 	"tes) from sys.dba_free_space fs where fs.tablespace_name=ts.tabl",
+ 	`espace_name) AS USED_SPACE,\n\t\t\t\t(select sum(fs.bytes) from `,
+ 	"sys.dba_free_space fs where fs.tablespace_name=ts.tablespace_nam",
+ 	`e) AS FREE_SPACE\n\t\t\tFROM sys.dba_tablespaces ts\n\t\t\tWHERE`,
+ 	` ts.contents <> 'TEMPORARY'\n\t\t\tUNION ALL\n\t\t\tSELECT (SELE`,
+ 	"CT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME",
+ 	" FROM sys.GLOBAL_NAME) GLOBAL_NAME, ts.NAME TABLESPACE_NAME, 'TE",
+ 	`MPORARY' as CONTENTS,\n\t\t\t\t\tSUM(ss.USED_BLOCKS * t.BLOCK_SI`,
+ 	`ZE) USED_SPACE,\n\t\t\t\t\tSUM(t.BYTES) - SUM(ss.USED_BLOCKS * t`,
+ 	`.BLOCK_SIZE) FREE_SPACE\n\t\t\tFROM SYS.V_$$sort_segment ss\n\t\`,
+ 	`t\tJOIN sys.v_$$tablespace ts\n\t\t\tON ss.TABLESPACE_NAME = ts.`,
+ 	`NAME\n\t\t\tJOIN sys.v_$$tempfile t\n\t\t\tON t.TS# = ss.TS#\n\t`,
+ 	"\\t\\tGROUP BY ts.NAME\"\n    - metrics:\n      - attribute_columns:\n",
+ 	"        - DATABASE_ID\n        - GLOBAL_NAME\n        - STATUS\n   ",
+ 	"     - CONTENTS\n        data_type: sum\n        description: The ",
+ 	"number of tablespaces in the database.\n        metric_name: orac",
+ 	"le.tablespace.count\n        monotonic: false\n        static_attr",
+ 	"ibutes:\n          db.system: oracle\n        unit: \"{tablespaces}",
+ 	"\"\n        value_column: COUNT\n        value_type: int\n      sql:",
+ 	" SELECT (SELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELEC",
+ 	"T GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, CONTENTS, STATU",
+ 	"S, COUNT(*) COUNT FROM sys.dba_tablespaces GROUP BY STATUS, CONT",
+ 	"ENTS\n    - metrics:\n      - attribute_columns:\n        - DATABAS",
+ 	"E_ID\n        - GLOBAL_NAME\n        data_type: sum\n        descri",
+ 	"ption: The number of seconds since the last RMAN backup.\n       ",
+ 	" metric_name: oracle.backup.latest\n        monotonic: true\n     ",
+ 	"   static_attributes:\n          db.system: oracle\n        unit: ",
+ 	"s\n        value_column: LATEST_BACKUP\n        value_type: int\n  ",
+ 	"    sql: SELECT (SELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID",
+ 	", (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, (SELECT",
+ 	" round(case when max(start_time) is null then -1 when sysdate - ",
+ 	"max(start_time) > 0 then (sysdate - max(start_time)) * 86400 els",
+ 	"e 0 end) FROM SYS.V_$$rman_backup_job_details ) LATEST_BACKUP FR",
+ 	"OM DUAL\n    - metrics:\n      - attribute_columns:\n        - DATA",
+ 	"BASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        data",
+ 	"_type: sum\n        description: The current number of processes.",
+ 	"\n        metric_name: oracle.process.count\n        monotonic: fa",
+ 	"lse\n        static_attributes:\n          db.system: oracle\n     ",
+ 	"   unit: \"{processes}\"\n        value_column: PROCESSES_UTIL\n    ",
+ 	"    value_type: int\n      - attribute_columns:\n        - DATABAS",
+ 	"E_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        data_ty",
+ 	"pe: sum\n        description: The maximum number of processes all",
+ 	"owed.\n        metric_name: oracle.process.limit\n        monotoni",
+ 	"c: false\n        static_attributes:\n          db.system: oracle\n",
+ 	"        unit: \"{processes}\"\n        value_column: PROCESSES_LIMI",
+ 	"T_VAL\n        value_type: int\n      - attribute_columns:\n       ",
+ 	" - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n     ",
+ 	"   data_type: sum\n        description: The current number of ses",
+ 	"sions.\n        metric_name: oracle.session.count\n        monoton",
+ 	"ic: false\n        static_attributes:\n          db.system: oracle",
+ 	"\n        unit: \"{sessions}\"\n        value_column: SESSIONS_UTIL\n",
+ 	"        value_type: int\n      - attribute_columns:\n        - DAT",
+ 	"ABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        dat",
+ 	"a_type: sum\n        description: The maximum number of sessions ",
+ 	"allowed.\n        metric_name: oracle.session.limit\n        monot",
+ 	"onic: false\n        static_attributes:\n          db.system: orac",
+ 	"le\n        unit: \"{sessions}\"\n        value_column: SESSIONS_LIM",
+ 	"IT_VAL\n        value_type: int\n      sql: |-\n        SELECT DATA",
+ 	"BASE_ID, GLOBAL_NAME, INST_ID INSTANCE_ID, MAX(PROCESSES_UTIL) P",
+ 	"ROCESSES_UTIL, MAX(PROCESSES_LIMIT_VAL) PROCESSES_LIMIT_VAL, MAX",
+ 	"(SESSIONS_UTIL) SESSIONS_UTIL, MAX(SESSIONS_LIMIT_VAL) SESSIONS_",
+ 	"LIMIT_VAL\n        \t\t\tFROM (SELECT (SELECT DBID FROM SYS.GV_$$DAT",
+ 	"ABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GL",
+ 	"OBAL_NAME, INST_ID, PROCESSES_UTIL, PROCESSES_LIMIT_VAL, SESSION",
+ 	"S_UTIL, SESSIONS_LIMIT_VAL\n        \t\t\tFROM (SELECT * FROM SYS.GV",
+ 	"_$$resource_limit\n        \t\t\t\tWHERE RESOURCE_NAME IN ('processes",
+ 	"', 'sessions'))\n        \t\t\t\tPIVOT(\n        \t\t\t\t\tMAX(TRIM(CURRENT",
+ 	"_UTILIZATION)) UTIL,\n        \t\t\t\t\tMAX(TRIM(LIMIT_VALUE)) LIMIT_V",
+ 	"AL\n        \t\t\t\t\tFOR RESOURCE_NAME\n        \t\t\t\t\tIN (\n        \t\t\t\t",
+ 	"\t\t'processes' PROCESSES,\n        \t\t\t\t\t\t'sessions' SESSIONS\n     ",
+ 	"   \t\t\t\t\t)\n        \t\t\t\t)\n        \t\t\t)\n        \t\t\tGROUP BY DATABAS",
+ 	"E_ID, GLOBAL_NAME, INST_ID\n    - metrics:\n      - attribute_colu",
+ 	"mns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTA",
+ 	"NCE_ID\n        - PROGRAM\n        data_type: sum\n        descript",
+ 	"ion: The programmable global area memory allocated by process.\n ",
+ 	"       metric_name: oracle.process.pga_memory.size\n        monot",
+ 	"onic: false\n        static_attributes:\n          db.system: orac",
+ 	"le\n          state: used\n        unit: by\n        value_column: ",
+ 	"USED_MEM\n        value_type: int\n      - attribute_columns:\n    ",
+ 	"    - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n  ",
+ 	"      - PROGRAM\n        data_type: sum\n        description: The ",
+ 	"programmable global area memory allocated by process.\n        me",
+ 	"tric_name: oracle.process.pga_memory.size\n        monotonic: fal",
+ 	"se\n        static_attributes:\n          db.system: oracle\n      ",
+ 	"    state: free\n        unit: by\n        value_column: FREE_MEM\n",
+ 	"        value_type: int\n      sql: SELECT (SELECT DBID FROM SYS.",
+ 	"GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_",
+ 	"NAME) GLOBAL_NAME, INST_ID INSTANCE_ID, PROGRAM, SUM(PGA_USED_ME",
+ 	"M) USED_MEM, SUM(PGA_ALLOC_MEM) - SUM(PGA_USED_MEM) FREE_MEM FRO",
+ 	"M SYS.GV_$$PROCESS WHERE PROGRAM <> 'PSEUDO' GROUP BY PROGRAM, I",
+ 	"NST_ID\n    - metrics:\n      - attribute_columns:\n        - DATAB",
+ 	"ASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        - WAI",
+ 	"T_CLASS\n        data_type: sum\n        description: The number o",
+ 	"f wait events experienced.\n        metric_name: oracle.wait.coun",
+ 	"t\n        monotonic: true\n        static_attributes:\n          d",
+ 	"b.system: oracle\n          type: foreground\n        unit: \"{even",
+ 	"ts}\"\n        value_column: TOTAL_WAITS_FG\n        value_type: in",
+ 	"t\n      - attribute_columns:\n        - DATABASE_ID\n        - GLO",
+ 	"BAL_NAME\n        - INSTANCE_ID\n        - WAIT_CLASS\n        data",
+ 	"_type: sum\n        description: The number of wait events experi",
+ 	"enced.\n        metric_name: oracle.wait.count\n        monotonic:",
+ 	" true\n        static_attributes:\n          db.system: oracle\n   ",
+ 	"       type: background\n        unit: \"{events}\"\n        value_c",
+ 	"olumn: TOTAL_WAITS_BG\n        value_type: int\n      - attribute_",
+ 	"columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - I",
+ 	"NSTANCE_ID\n        - WAIT_CLASS\n        data_type: sum\n        d",
+ 	"escription: The amount of time waited for wait events.\n        m",
+ 	"etric_name: oracle.wait.time\n        monotonic: true\n        sta",
+ 	"tic_attributes:\n          db.system: oracle\n          type: fore",
+ 	"ground\n        unit: cs\n        value_column: TIME_WAITED_FG\n   ",
+ 	"     value_type: int\n      - attribute_columns:\n        - DATABA",
+ 	"SE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        - WAIT",
+ 	"_CLASS\n        data_type: sum\n        description: The amount of",
+ 	" time waited for wait events.\n        metric_name: oracle.wait.t",
+ 	"ime\n        monotonic: true\n        static_attributes:\n         ",
+ 	" db.system: oracle\n          type: background\n        unit: cs\n ",
+ 	"       value_column: TIME_WAITED_BG\n        value_type: int\n    ",
+ 	"  - attribute_columns:\n        - DATABASE_ID\n        - GLOBAL_NA",
+ 	"ME\n        - INSTANCE_ID\n        - WAIT_CLASS\n        data_type:",
+ 	" sum\n        description: The number of timeouts for wait events",
+ 	".\n        metric_name: oracle.wait.timeouts\n        monotonic: t",
+ 	"rue\n        static_attributes:\n          db.system: oracle\n     ",
+ 	"     type: foreground\n        unit: \"{timeouts}\"\n        value_c",
+ 	"olumn: TOTAL_TIMEOUTS_FG\n        value_type: int\n      - attribu",
+ 	"te_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n        ",
+ 	"- INSTANCE_ID\n        - WAIT_CLASS\n        data_type: sum\n      ",
+ 	"  description: The number of timeouts for wait events.\n        m",
+ 	"etric_name: oracle.wait.timeouts\n        monotonic: true\n       ",
+ 	" static_attributes:\n          db.system: oracle\n          type: ",
+ 	"background\n        unit: \"{timeouts}\"\n        value_column: TOTA",
+ 	"L_TIMEOUTS_BG\n        value_type: int\n      sql: SELECT (SELECT ",
+ 	"DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME FR",
+ 	"OM sys.GLOBAL_NAME) GLOBAL_NAME, INST_ID INSTANCE_ID, WAIT_CLASS",
+ 	", SUM(total_waits_fg) AS TOTAL_WAITS_FG, SUM(total_waits)-SUM(to",
+ 	"tal_waits_fg) AS TOTAL_WAITS_BG, SUM(total_timeouts_fg) AS TOTAL",
+ 	"_TIMEOUTS_FG, SUM(total_timeouts)-SUM(TOTAL_TIMEOUTS_FG) AS TOTA",
+ 	"L_TIMEOUTS_BG, SUM(time_waited_fg) AS TIME_WAITED_FG, SUM(time_w",
+ 	"aited)-SUM(TIME_WAITED_FG) AS TIME_WAITED_BG FROM SYS.GV_$$syste",
+ 	"m_event WHERE wait_class <> 'Idle' GROUP BY INST_ID, WAIT_CLASS\n",
+ 	"    - metrics:\n      - attribute_columns:\n        - DATABASE_ID\n",
+ 	"        - GLOBAL_NAME\n        - INSTANCE_ID\n        data_type: g",
+ 	"auge\n        description: The average sql service response time.",
+ 	"\n        metric_name: oracle.service.response_time\n        stati",
+ 	"c_attributes:\n          db.system: oracle\n        unit: cs\n     ",
+ 	"   value_column: RESPONSE_TIME\n        value_type: double\n      ",
+ 	"- attribute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME",
+ 	"\n        - INSTANCE_ID\n        data_type: gauge\n        descript",
+ 	"ion: Ratio of buffer cache hits to requests.\n        metric_name",
+ 	": oracle.buffer.cache.ratio\n        static_attributes:\n         ",
+ 	" db.system: oracle\n        unit: \"%\"\n        value_column: BUFFE",
+ 	"R_HIT_RATIO\n        value_type: double\n      - attribute_columns",
+ 	":\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE",
+ 	"_ID\n        data_type: gauge\n        description: Ratio of row c",
+ 	"ache hits to requests.\n        metric_name: oracle.row.cache.rat",
+ 	"io\n        static_attributes:\n          db.system: oracle\n      ",
+ 	"  unit: \"%\"\n        value_column: ROW_HIT_RATIO\n        value_ty",
+ 	"pe: double\n      sql: |-\n        SELECT DATABASE_ID, GLOBAL_NAME",
+ 	", INST_ID INSTANCE_ID, MAX(RESPONSE_TIME) RESPONSE_TIME, MAX(BUF",
+ 	"FER_HIT_RATIO) BUFFER_HIT_RATIO, MAX(ROW_HIT_RATIO) ROW_HIT_RATI",
+ 	"O\n        \t\t\tFROM (SELECT (SELECT DBID FROM SYS.GV_$$DATABASE) D",
+ 	"ATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAM",
+ 	"E, INST_ID, END_TIME, RESPONSE_TIME, BUFFER_HIT_RATIO, ROW_HIT_R",
+ 	"ATIO\n        \t\t\tFROM (SELECT * FROM SYS.GV_$$sysmetric\n        \t",
+ 	`			WHERE METRIC_NAME IN ('SQL Service Response Time', 'Buffer Ca`,
+ 	"che Hit Ratio', 'Row Cache Hit Ratio')\n        \t\t\t\tAND GROUP_ID ",
+ 	"= 2)\n        \t\t\t\tPIVOT(\n        \t\t\t\t\tMAX(VALUE)\n        \t\t\t\t\tFOR",
+ 	" METRIC_NAME\n        \t\t\t\t\tIN (\n        \t\t\t\t\t\t'SQL Service Respon",
+ 	"se Time' RESPONSE_TIME,\n        \t\t\t\t\t\t'Buffer Cache Hit Ratio' B",
+ 	"UFFER_HIT_RATIO,\n        \t\t\t\t\t\t'Row Cache Hit Ratio' ROW_HIT_RAT",
+ 	"IO\n        \t\t\t\t\t)\n        \t\t\t\t)\n        \t\t\t)\n        \t\t\tGROUP BY",
+ 	" DATABASE_ID, GLOBAL_NAME, INST_ID\n    - metrics:\n      - attrib",
+ 	"ute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n       ",
+ 	" - INSTANCE_ID\n        data_type: sum\n        description: The t",
+ 	"otal number of cursors.\n        metric_name: oracle.cursor.count",
+ 	"\n        monotonic: true\n        static_attributes:\n          db",
+ 	".system: oracle\n        unit: \"{cursors}\"\n        value_column: ",
+ 	"CURSORS_CUMULATIVE\n        value_type: int",
  	... // 7639 identical, 6264 removed, and 7099 inserted bytes
  }, "")
