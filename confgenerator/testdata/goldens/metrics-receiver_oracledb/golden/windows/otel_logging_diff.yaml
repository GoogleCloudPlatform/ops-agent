  strings.Join({
  	... // 21824 identical bytes
  	"ements:\n    - context: metric\n      statements:\n      - extract_",
  	"count_metric(true) where name == \"grpc.client.attempt.duration\"\n",
- 	"receivers:\n  hostmetrics/hostmetrics:\n    collection_interval: 6",
- 	"0s\n    scrapers:\n      cpu: {}\n      disk: {}\n      filesystem: ",
- 	"{}\n      load: {}\n      memory: {}\n      network: {}\n      pagin",
- 	"g: {}\n      process:\n        metrics:\n          process.handles:",
- 	"\n            enabled: true\n        mute_process_all_errors: true",
- 	"\n        mute_process_exe_error: true\n        mute_process_name_",
- 	"error: true\n      processes: {}\n  otlpjsonfile/ops_agent:\n    in",
- 	"clude:\n    - enabled_receivers_otlp.json\n    - feature_tracking_",
- 	"otlp.json\n    poll_interval: 1m0s\n    replay_file: true\n  promet",
- 	"heus/agent_prometheus:\n    config:\n      scrape_configs:\n      -",
- 	" job_name: logging-collector\n        metrics_path: /metrics\n    ",
- 	"    scrape_interval: 1m\n        static_configs:\n        - target",
- 	"s:\n          - 0.0.0.0:20202\n      - job_name: otel-collector\n  ",
- 	"      scrape_interval: 1m\n        static_configs:\n        - targ",
- 	"ets:\n          - 0.0.0.0:20201\n  sqlquery/oracledb:\n    collecti",
- 	"on_interval: 60s\n    datasource: oracle://@localhost:1521/?SID=d",
- 	"b19c\n    driver: oracle\n    queries:\n    - metrics:\n      - attr",
- 	"ibute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n     ",
- 	"   - TABLESPACE_NAME\n        - CONTENTS\n        data_type: sum\n ",
- 	"       description: The size of tablespaces in the database.\n   ",
- 	"     metric_name: oracle.tablespace.size\n        monotonic: fals",
- 	"e\n        static_attributes:\n          db.system: oracle\n       ",
- 	"   state: free\n        unit: by\n        value_column: FREE_SPACE",
- 	"\n        value_type: int\n      - attribute_columns:\n        - DA",
- 	"TABASE_ID\n        - GLOBAL_NAME\n        - TABLESPACE_NAME\n      ",
- 	"  - CONTENTS\n        data_type: sum\n        description: The siz",
- 	"e of tablespaces in the database.\n        metric_name: oracle.ta",
- 	"blespace.size\n        monotonic: false\n        static_attributes",
- 	":\n          db.system: oracle\n          state: used\n        unit",
- 	": by\n        value_column: USED_SPACE\n        value_type: int\n  ",
- 	`    sql: "SELECT (SELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_I`,
- 	"D, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, ts.TAB",
- 	`LESPACE_NAME, ts.CONTENTS,\n\t\t\t\t(select sum(df.bytes) from s`,
- 	"ys.dba_data_files df where df.tablespace_name=ts.tablespace_name",
- 	")-(select sum(fs.bytes) from sys.dba_free_space fs where fs.tabl",
- 	`espace_name=ts.tablespace_name) AS USED_SPACE,\n\t\t\t\t(select `,
- 	"sum(fs.bytes) from sys.dba_free_space fs where fs.tablespace_nam",
- 	`e=ts.tablespace_name) AS FREE_SPACE\n\t\t\tFROM sys.dba_tablespa`,
- 	`ces ts\n\t\t\tWHERE ts.contents <> 'TEMPORARY'\n\t\t\tUNION ALL\`,
- 	`n\t\t\tSELECT (SELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, `,
- 	"(SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, ts.NAME T",
- 	`ABLESPACE_NAME, 'TEMPORARY' as CONTENTS,\n\t\t\t\t\tSUM(ss.USED_`,
- 	`BLOCKS * t.BLOCK_SIZE) USED_SPACE,\n\t\t\t\t\tSUM(t.BYTES) - SUM`,
- 	`(ss.USED_BLOCKS * t.BLOCK_SIZE) FREE_SPACE\n\t\t\tFROM SYS.V_$$s`,
- 	`ort_segment ss\n\t\t\tJOIN sys.v_$$tablespace ts\n\t\t\tON ss.TA`,
- 	`BLESPACE_NAME = ts.NAME\n\t\t\tJOIN sys.v_$$tempfile t\n\t\t\tON`,
- 	" t.TS# = ss.TS#\\n\\t\\t\\tGROUP BY ts.NAME\"\n    - metrics:\n      - ",
- 	"attribute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n ",
- 	"       - STATUS\n        - CONTENTS\n        data_type: sum\n      ",
- 	"  description: The number of tablespaces in the database.\n      ",
- 	"  metric_name: oracle.tablespace.count\n        monotonic: false\n",
- 	"        static_attributes:\n          db.system: oracle\n        u",
- 	"nit: \"{tablespaces}\"\n        value_column: COUNT\n        value_t",
- 	"ype: int\n      sql: SELECT (SELECT DBID FROM SYS.GV_$$DATABASE) ",
- 	"DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NA",
- 	"ME, CONTENTS, STATUS, COUNT(*) COUNT FROM sys.dba_tablespaces GR",
- 	"OUP BY STATUS, CONTENTS\n    - metrics:\n      - attribute_columns",
- 	":\n        - DATABASE_ID\n        - GLOBAL_NAME\n        data_type:",
- 	" sum\n        description: The number of seconds since the last R",
- 	"MAN backup.\n        metric_name: oracle.backup.latest\n        mo",
- 	"notonic: true\n        static_attributes:\n          db.system: or",
- 	"acle\n        unit: s\n        value_column: LATEST_BACKUP\n       ",
- 	" value_type: int\n      sql: SELECT (SELECT DBID FROM SYS.GV_$$DA",
- 	"TABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) G",
- 	"LOBAL_NAME, (SELECT round(case when max(start_time) is null then",
- 	" -1 when sysdate - max(start_time) > 0 then (sysdate - max(start",
- 	"_time)) * 86400 else 0 end) FROM SYS.V_$$rman_backup_job_details",
- 	" ) LATEST_BACKUP FROM DUAL\n    - metrics:\n      - attribute_colu",
- 	"mns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTA",
- 	"NCE_ID\n        data_type: sum\n        description: The current n",
- 	"umber of processes.\n        metric_name: oracle.process.count\n  ",
- 	"      monotonic: false\n        static_attributes:\n          db.s",
- 	"ystem: oracle\n        unit: \"{processes}\"\n        value_column: ",
- 	"PROCESSES_UTIL\n        value_type: int\n      - attribute_columns",
- 	":\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE",
- 	"_ID\n        data_type: sum\n        description: The maximum numb",
- 	"er of processes allowed.\n        metric_name: oracle.process.lim",
- 	"it\n        monotonic: false\n        static_attributes:\n         ",
- 	" db.system: oracle\n        unit: \"{processes}\"\n        value_col",
- 	"umn: PROCESSES_LIMIT_VAL\n        value_type: int\n      - attribu",
- 	"te_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n        ",
- 	"- INSTANCE_ID\n        data_type: sum\n        description: The cu",
- 	"rrent number of sessions.\n        metric_name: oracle.session.co",
- 	"unt\n        monotonic: false\n        static_attributes:\n        ",
- 	"  db.system: oracle\n        unit: \"{sessions}\"\n        value_col",
- 	"umn: SESSIONS_UTIL\n        value_type: int\n      - attribute_col",
- 	"umns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - INST",
- 	"ANCE_ID\n        data_type: sum\n        description: The maximum ",
- 	"number of sessions allowed.\n        metric_name: oracle.session.",
- 	"limit\n        monotonic: false\n        static_attributes:\n      ",
- 	"    db.system: oracle\n        unit: \"{sessions}\"\n        value_c",
- 	"olumn: SESSIONS_LIMIT_VAL\n        value_type: int\n      sql: |-\n",
- 	"        SELECT DATABASE_ID, GLOBAL_NAME, INST_ID INSTANCE_ID, MA",
- 	"X(PROCESSES_UTIL) PROCESSES_UTIL, MAX(PROCESSES_LIMIT_VAL) PROCE",
- 	"SSES_LIMIT_VAL, MAX(SESSIONS_UTIL) SESSIONS_UTIL, MAX(SESSIONS_L",
- 	"IMIT_VAL) SESSIONS_LIMIT_VAL\n        \t\t\tFROM (SELECT (SELECT DBI",
- 	"D FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM ",
- 	"sys.GLOBAL_NAME) GLOBAL_NAME, INST_ID, PROCESSES_UTIL, PROCESSES",
- 	"_LIMIT_VAL, SESSIONS_UTIL, SESSIONS_LIMIT_VAL\n        \t\t\tFROM (S",
- 	"ELECT * FROM SYS.GV_$$resource_limit\n        \t\t\t\tWHERE RESOURCE_",
- 	"NAME IN ('processes', 'sessions'))\n        \t\t\t\tPIVOT(\n        \t\t",
- 	"\t\t\tMAX(TRIM(CURRENT_UTILIZATION)) UTIL,\n        \t\t\t\t\tMAX(TRIM(LI",
- 	"MIT_VALUE)) LIMIT_VAL\n        \t\t\t\t\tFOR RESOURCE_NAME\n        \t\t\t",
- 	"\t\tIN (\n        \t\t\t\t\t\t'processes' PROCESSES,\n        \t\t\t\t\t\t'sessi",
- 	"ons' SESSIONS\n        \t\t\t\t\t)\n        \t\t\t\t)\n        \t\t\t)\n        ",
- 	"\t\t\tGROUP BY DATABASE_ID, GLOBAL_NAME, INST_ID\n    - metrics:\n   ",
- 	"   - attribute_columns:\n        - DATABASE_ID\n        - GLOBAL_N",
- 	"AME\n        - INSTANCE_ID\n        - PROGRAM\n        data_type: s",
- 	"um\n        description: The programmable global area memory allo",
- 	"cated by process.\n        metric_name: oracle.process.pga_memory",
- 	".size\n        monotonic: false\n        static_attributes:\n      ",
- 	"    db.system: oracle\n          state: used\n        unit: by\n   ",
- 	"     value_column: USED_MEM\n        value_type: int\n      - attr",
- 	"ibute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n     ",
- 	"   - INSTANCE_ID\n        - PROGRAM\n        data_type: sum\n      ",
- 	"  description: The programmable global area memory allocated by ",
- 	"process.\n        metric_name: oracle.process.pga_memory.size\n   ",
- 	"     monotonic: false\n        static_attributes:\n          db.sy",
- 	"stem: oracle\n          state: free\n        unit: by\n        valu",
- 	"e_column: FREE_MEM\n        value_type: int\n      sql: SELECT (SE",
- 	"LECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NA",
- 	"ME FROM sys.GLOBAL_NAME) GLOBAL_NAME, INST_ID INSTANCE_ID, PROGR",
- 	"AM, SUM(PGA_USED_MEM) USED_MEM, SUM(PGA_ALLOC_MEM) - SUM(PGA_USE",
- 	"D_MEM) FREE_MEM FROM SYS.GV_$$PROCESS WHERE PROGRAM <> 'PSEUDO' ",
- 	"GROUP BY PROGRAM, INST_ID\n    - metrics:\n      - attribute_colum",
- 	"ns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTAN",
- 	"CE_ID\n        - WAIT_CLASS\n        data_type: sum\n        descri",
- 	"ption: The number of wait events experienced.\n        metric_nam",
- 	"e: oracle.wait.count\n        monotonic: true\n        static_attr",
- 	"ibutes:\n          db.system: oracle\n          type: foreground\n ",
- 	"       unit: \"{events}\"\n        value_column: TOTAL_WAITS_FG\n   ",
- 	"     value_type: int\n      - attribute_columns:\n        - DATABA",
- 	"SE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        - WAIT",
- 	"_CLASS\n        data_type: sum\n        description: The number of",
- 	" wait events experienced.\n        metric_name: oracle.wait.count",
- 	"\n        monotonic: true\n        static_attributes:\n          db",
- 	".system: oracle\n          type: background\n        unit: \"{event",
- 	"s}\"\n        value_column: TOTAL_WAITS_BG\n        value_type: int",
- 	"\n      - attribute_columns:\n        - DATABASE_ID\n        - GLOB",
- 	"AL_NAME\n        - INSTANCE_ID\n        - WAIT_CLASS\n        data_",
- 	"type: sum\n        description: The amount of time waited for wai",
- 	"t events.\n        metric_name: oracle.wait.time\n        monotoni",
- 	"c: true\n        static_attributes:\n          db.system: oracle\n ",
- 	"         type: foreground\n        unit: cs\n        value_column:",
- 	" TIME_WAITED_FG\n        value_type: int\n      - attribute_column",
- 	"s:\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANC",
- 	"E_ID\n        - WAIT_CLASS\n        data_type: sum\n        descrip",
- 	"tion: The amount of time waited for wait events.\n        metric_",
- 	"name: oracle.wait.time\n        monotonic: true\n        static_at",
- 	"tributes:\n          db.system: oracle\n          type: background",
- 	"\n        unit: cs\n        value_column: TIME_WAITED_BG\n        v",
- 	"alue_type: int\n      - attribute_columns:\n        - DATABASE_ID\n",
- 	"        - GLOBAL_NAME\n        - INSTANCE_ID\n        - WAIT_CLASS",
- 	"\n        data_type: sum\n        description: The number of timeo",
- 	"uts for wait events.\n        metric_name: oracle.wait.timeouts\n ",
- 	"       monotonic: true\n        static_attributes:\n          db.s",
- 	"ystem: oracle\n          type: foreground\n        unit: \"{timeout",
- 	"s}\"\n        value_column: TOTAL_TIMEOUTS_FG\n        value_type: ",
- 	"int\n      - attribute_columns:\n        - DATABASE_ID\n        - G",
- 	"LOBAL_NAME\n        - INSTANCE_ID\n        - WAIT_CLASS\n        da",
- 	"ta_type: sum\n        description: The number of timeouts for wai",
- 	"t events.\n        metric_name: oracle.wait.timeouts\n        mono",
- 	"tonic: true\n        static_attributes:\n          db.system: orac",
- 	"le\n          type: background\n        unit: \"{timeouts}\"\n       ",
- 	" value_column: TOTAL_TIMEOUTS_BG\n        value_type: int\n      s",
- 	"ql: SELECT (SELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SE",
- 	"LECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, INST_ID INST",
- 	"ANCE_ID, WAIT_CLASS, SUM(total_waits_fg) AS TOTAL_WAITS_FG, SUM(",
- 	"total_waits)-SUM(total_waits_fg) AS TOTAL_WAITS_BG, SUM(total_ti",
- 	"meouts_fg) AS TOTAL_TIMEOUTS_FG, SUM(total_timeouts)-SUM(TOTAL_T",
- 	"IMEOUTS_FG) AS TOTAL_TIMEOUTS_BG, SUM(time_waited_fg) AS TIME_WA",
- 	"ITED_FG, SUM(time_waited)-SUM(TIME_WAITED_FG) AS TIME_WAITED_BG ",
- 	"FROM SYS.GV_$$system_event WHERE wait_class <> 'Idle' GROUP BY I",
- 	"NST_ID, WAIT_CLASS\n    - metrics:\n      - attribute_columns:\n   ",
- 	"     - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n ",
- 	"       data_type: gauge\n        description: The average sql ser",
- 	"vice response time.\n        metric_name: oracle.service.response",
- 	"_time\n        static_attributes:\n          db.system: oracle\n   ",
- 	"     unit: cs\n        value_column: RESPONSE_TIME\n        value_",
- 	"type: double\n      - attribute_columns:\n        - DATABASE_ID\n  ",
- 	"      - GLOBAL_NAME\n        - INSTANCE_ID\n        data_type: gau",
- 	"ge\n        description: Ratio of buffer cache hits to requests.\n",
- 	"        metric_name: oracle.buffer.cache.ratio\n        static_at",
- 	"tributes:\n          db.system: oracle\n        unit: \"%\"\n        ",
- 	"value_column: BUFFER_HIT_RATIO\n        value_type: double\n      ",
- 	"- attribute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME",
- 	"\n        - INSTANCE_ID\n        data_type: gauge\n        descript",
- 	"ion: Ratio of row cache hits to requests.\n        metric_name: o",
- 	"racle.row.cache.ratio\n        static_attributes:\n          db.sy",
- 	"stem: oracle\n        unit: \"%\"\n        value_column: ROW_HIT_RAT",
- 	"IO\n        value_type: double\n      sql: |-\n        SELECT DATAB",
- 	"ASE_ID, GLOBAL_NAME, INST_ID INSTANCE_ID, MAX(RESPONSE_TIME) RES",
- 	"PONSE_TIME, MAX(BUFFER_HIT_RATIO) BUFFER_HIT_RATIO, MAX(ROW_HIT_",
- 	"RATIO) ROW_HIT_RATIO\n        \t\t\tFROM (SELECT (SELECT DBID FROM S",
- 	"YS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOB",
- 	"AL_NAME) GLOBAL_NAME, INST_ID, END_TIME, RESPONSE_TIME, BUFFER_H",
- 	"IT_RATIO, ROW_HIT_RATIO\n        \t\t\tFROM (SELECT * FROM SYS.GV_$$",
- 	"sysmetric\n        \t\t\t\tWHERE METRIC_NAME IN ('SQL Service Respons",
- 	"e Time', 'Buffer Cache Hit Ratio', 'Row Cache Hit Ratio')\n      ",
- 	"  \t\t\t\tAND GROUP_ID = 2)\n        \t\t\t\tPIVOT(\n        \t\t\t\t\tMAX(VALU",
- 	"E)\n        \t\t\t\t\tFOR METRIC_NAME\n        \t\t\t\t\tIN (\n        \t\t\t\t\t\t",
- 	"'SQL Service Response Time' RESPONSE_TIME,\n        \t\t\t\t\t\t'Buffer",
- 	" Cache Hit Ratio' BUFFER_HIT_RATIO,\n        \t\t\t\t\t\t'Row Cache Hit",
- 	" Ratio' ROW_HIT_RATIO\n        \t\t\t\t\t)\n        \t\t\t\t)\n        \t\t\t)\n",
- 	"        \t\t\tGROUP BY DATABASE_ID, GLOBAL_NAME, INST_ID\n    - metr",
- 	"ics:",
+ 	"  transform/windows__event__log_0:\n    error_mode: ignore\n    lo",
+ 	"g_statements:\n    - context: log\n      statements:\n      - delet",
+ 	`e_key(cache, "__field_0") where (cache != nil and cache["__field`,
+ 	"_0\"] != nil)\n      - set(cache[\"__field_0\"], body[\"channel\"]) wh",
+ 	"ere (body != nil and body[\"channel\"] != nil)\n      - delete_key(",
+ 	`cache, "__field_1") where (cache != nil and cache["__field_1"] !`,
+ 	"= nil)\n      - set(cache[\"__field_1\"], body[\"computer\"]) where (",
+ 	"body != nil and body[\"computer\"] != nil)\n      - delete_key(cach",
+ 	`e, "__field_2") where (cache != nil and cache["__field_2"] != ni`,
+ 	"l)\n      - set(cache[\"__field_2\"], body[\"event_data\"][\"binary\"])",
+ 	` where (body != nil and body["event_data"] != nil and body["even`,
+ 	"t_data\"][\"binary\"] != nil)\n      - delete_key(cache, \"__field_3\"",
+ 	") where (cache != nil and cache[\"__field_3\"] != nil)\n      - set",
+ 	`(cache["__field_3"], body["event_id"]["id"]) where (body != nil `,
+ 	"and body[\"event_id\"] != nil and body[\"event_id\"][\"id\"] != nil)\n ",
+ 	`     - delete_key(cache, "__field_4") where (cache != nil and ca`,
+ 	"che[\"__field_4\"] != nil)\n      - set(cache[\"__field_4\"], body[\"l",
+ 	"evel\"]) where (body != nil and body[\"level\"] != nil)\n      - del",
+ 	`ete_key(cache, "__field_5") where (cache != nil and cache["__fie`,
+ 	"ld_5\"] != nil)\n      - set(cache[\"__field_5\"], body[\"message\"]) ",
+ 	"where (body != nil and body[\"message\"] != nil)\n      - delete_ke",
+ 	`y(cache, "__field_6") where (cache != nil and cache["__field_6"]`,
+ 	" != nil)\n      - set(cache[\"__field_6\"], body[\"event_id\"][\"quali",
+ 	`fiers"]) where (body != nil and body["event_id"] != nil and body`,
+ 	"[\"event_id\"][\"qualifiers\"] != nil)\n      - delete_key(cache, \"__",
+ 	"field_7\") where (cache != nil and cache[\"__field_7\"] != nil)\n   ",
+ 	`   - set(cache["__field_7"], body["record_id"]) where (body != n`,
+ 	"il and body[\"record_id\"] != nil)\n      - delete_key(cache, \"__fi",
+ 	"eld_8\") where (cache != nil and cache[\"__field_8\"] != nil)\n     ",
+ 	` - set(cache["__field_8"], body["security"]["user_id"]) where (b`,
+ 	`ody != nil and body["security"] != nil and body["security"]["use`,
+ 	"r_id\"] != nil)\n      - delete_key(cache, \"__field_9\") where (cac",
+ 	"he != nil and cache[\"__field_9\"] != nil)\n      - set(cache[\"__fi",
+ 	`eld_9"], body["provider"]["name"]) where (body != nil and body["`,
+ 	"provider\"] != nil and body[\"provider\"][\"name\"] != nil)\n      - d",
+ 	`elete_key(cache, "__field_10") where (cache != nil and cache["__`,
+ 	"field_10\"] != nil)\n      - set(cache[\"__field_10\"], body[\"event_",
+ 	`data"]["data"]) where (body != nil and body["event_data"] != nil`,
+ 	" and body[\"event_data\"][\"data\"] != nil)\n      - delete_key(cache",
+ 	`, "__field_11") where (cache != nil and cache["__field_11"] != n`,
+ 	"il)\n      - set(cache[\"__field_11\"], body[\"system_time\"]) where ",
+ 	"(body != nil and body[\"system_time\"] != nil)\n      - set(cache[\"",
+ 	"body\"], body)\n      - keep_keys(body, [])\n      - delete_key(cac",
+ 	"he, \"value\") where (cache != nil and cache[\"value\"] != nil)\n    ",
+ 	"  - set(cache[\"value\"], cache[\"__field_0\"])\n      - set(body[\"Ch",
+ 	`annel"], cache["value"]) where (cache != nil and cache["value"] `,
+ 	"!= nil)\n      - delete_key(cache, \"value\") where (cache != nil a",
+ 	"nd cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__f",
+ 	"ield_1\"])\n      - set(body[\"ComputerName\"], cache[\"value\"]) wher",
+ 	"e (cache != nil and cache[\"value\"] != nil)\n      - delete_key(ca",
+ 	"che, \"value\") where (cache != nil and cache[\"value\"] != nil)\n   ",
+ 	"   - set(cache[\"value\"], cache[\"__field_2\"])\n      - set(cache[\"",
+ 	"value\"], \"\") where cache[\"value\"] == nil\n      - set(cache[\"valu",
+ 	"e\"], ConvertCase(cache[\"value\"], \"lower\"))\n      - set(body[\"Dat",
+ 	`a"], cache["value"]) where (cache != nil and cache["value"] != n`,
+ 	"il)\n      - delete_key(cache, \"value\") where (cache != nil and c",
+ 	"ache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field",
+ 	"_3\"])\n      - set(body[\"EventID\"], cache[\"value\"]) where (cache ",
+ 	"!= nil and cache[\"value\"] != nil)\n      - delete_key(cache, \"val",
+ 	"ue\") where (cache != nil and cache[\"value\"] != nil)\n      - set(",
+ 	"cache[\"value\"], cache[\"__field_4\"])\n      - set(cache[\"value\"], ",
+ 	`"SuccessAudit") where ((cache != nil and cache["body"] != nil an`,
+ 	`d cache["body"]["keywords"] != nil) and cache["body"]["keywords"`,
+ 	`][0] != nil and cache["body"]["keywords"][0] == "Audit Success")`,
+ 	"\n      - set(cache[\"value\"], \"FailureAudit\") where ((cache != ni",
+ 	`l and cache["body"] != nil and cache["body"]["keywords"] != nil)`,
+ 	` and cache["body"]["keywords"][0] != nil and cache["body"]["keyw`,
+ 	"ords\"][0] == \"Audit Failure\")\n      - set(body[\"EventType\"], cac",
+ 	"he[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n    ",
+ 	`  - delete_key(cache, "value") where (cache != nil and cache["va`,
+ 	"lue\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_5\"])\n  ",
+ 	`    - set(body["Message"], cache["value"]) where (cache != nil a`,
+ 	"nd cache[\"value\"] != nil)\n      - delete_key(cache, \"value\") whe",
+ 	"re (cache != nil and cache[\"value\"] != nil)\n      - set(cache[\"v",
+ 	"alue\"], cache[\"__field_6\"])\n      - set(body[\"Qualifiers\"], cach",
+ 	"e[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n     ",
+ 	` - delete_key(cache, "value") where (cache != nil and cache["val`,
+ 	"ue\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_7\"])\n   ",
+ 	`   - set(body["RecordNumber"], cache["value"]) where (cache != n`,
+ 	"il and cache[\"value\"] != nil)\n      - delete_key(cache, \"value\")",
+ 	" where (cache != nil and cache[\"value\"] != nil)\n      - set(cach",
+ 	"e[\"value\"], cache[\"__field_8\"])\n      - set(cache[\"value\"], \"\") ",
+ 	"where cache[\"value\"] == nil\n      - set(body[\"Sid\"], cache[\"valu",
+ 	"e\"]) where (cache != nil and cache[\"value\"] != nil)\n      - dele",
+ 	`te_key(cache, "value") where (cache != nil and cache["value"] !=`,
+ 	" nil)\n      - set(cache[\"value\"], cache[\"__field_9\"])\n      - se",
+ 	`t(cache["value"], cache["body"]["provider"]["event_source"]) whe`,
+ 	`re ((cache != nil and cache["body"] != nil and cache["body"]["pr`,
+ 	`ovider"] != nil and cache["body"]["provider"]["event_source"] !=`,
+ 	` nil) and (not cache["body"]["provider"]["event_source"] == ""))`,
+ 	"\n      - set(body[\"SourceName\"], cache[\"value\"]) where (cache !=",
+ 	" nil and cache[\"value\"] != nil)\n      - delete_key(cache, \"value",
+ 	"\") where (cache != nil and cache[\"value\"] != nil)\n      - set(ca",
+ 	"che[\"value\"], cache[\"__field_10\"])\n      - set(cache[\"value\"], T",
+ 	"oValues(cache[\"value\"]))\n      - set(body[\"StringInserts\"], cach",
+ 	"e[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n     ",
+ 	` - delete_key(cache, "value") where (cache != nil and cache["val`,
+ 	"ue\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_11\"])\n  ",
+ 	`    - set(cache["value"], FormatTime(Time(cache["value"], "%Y-%m`,
+ 	"-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n      - set(body[\"TimeGen",
+ 	`erated"], cache["value"]) where (cache != nil and cache["value"]`,
+ 	" != nil)\n      - delete_key(cache, \"value\") where (cache != nil ",
+ 	"and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__",
+ 	"field_11\"])\n      - set(cache[\"value\"], FormatTime(Time(cache[\"v",
+ 	"alue\"], \"%Y-%m-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n      - set",
+ 	`(body["TimeWritten"], cache["value"]) where (cache != nil and ca`,
+ 	"che[\"value\"] != nil)\n  transform/windows__event__log_1:\n    erro",
+ 	"r_mode: ignore\n    log_statements:\n    - context: log\n      stat",
+ 	"ements:\n      - delete_key(cache, \"__field_0\") where (cache != n",
+ 	"il and cache[\"__field_0\"] != nil)\n      - set(cache[\"__field_0\"]",
+ 	`, attributes["compute.googleapis.com/instance_group_manager/name`,
+ 	`"]) where (attributes != nil and attributes["compute.googleapis.`,
+ 	"com/instance_group_manager/name\"] != nil)\n      - delete_key(cac",
+ 	`he, "__field_1") where (cache != nil and cache["__field_1"] != n`,
+ 	"il)\n      - set(cache[\"__field_1\"], attributes[\"compute.googleap",
+ 	`is.com/instance_group_manager/zone"]) where (attributes != nil a`,
+ 	`nd attributes["compute.googleapis.com/instance_group_manager/zon`,
+ 	"e\"] != nil)\n      - delete_key(cache, \"__field_2\") where (cache ",
+ 	"!= nil and cache[\"__field_2\"] != nil)\n      - set(cache[\"__field",
+ 	`_2"], attributes["compute.googleapis.com/resource_name"]) where `,
+ 	`(attributes != nil and attributes["compute.googleapis.com/resour`,
+ 	"ce_name\"] != nil)\n      - delete_key(cache, \"__field_3\") where (",
+ 	"cache != nil and cache[\"__field_3\"] != nil)\n      - set(cache[\"_",
+ 	`_field_3"], attributes["gcp.log_name"]) where (attributes != nil`,
+ 	" and attributes[\"gcp.log_name\"] != nil)\n      - delete_key(cache",
+ 	", \"value\") where (cache != nil and cache[\"value\"] != nil)\n      ",
+ 	"- set(cache[\"value\"], cache[\"__field_0\"])\n      - set(cache[\"val",
+ 	"ue\"], \"test-mig\") where cache[\"value\"] == nil\n      - set(attrib",
+ 	`utes["compute.googleapis.com/instance_group_manager/name"], cach`,
+ 	"e[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n     ",
+ 	` - delete_key(cache, "value") where (cache != nil and cache["val`,
+ 	"ue\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_1\"])\n   ",
+ 	`   - set(cache["value"], "test-zone") where cache["value"] == ni`,
+ 	"l\n      - set(attributes[\"compute.googleapis.com/instance_group_",
+ 	`manager/zone"], cache["value"]) where (cache != nil and cache["v`,
+ 	"alue\"] != nil)\n      - delete_key(cache, \"value\") where (cache !",
+ 	"= nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cac",
+ 	"he[\"__field_2\"])\n      - set(cache[\"value\"], \"\") where cache[\"va",
+ 	"lue\"] == nil\n      - set(attributes[\"compute.googleapis.com/reso",
+ 	`urce_name"], cache["value"]) where (cache != nil and cache["valu`,
+ 	"e\"] != nil)\n      - delete_key(cache, \"value\") where (cache != n",
+ 	"il and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[",
+ 	"\"__field_3\"])\n      - set(cache[\"value\"], \"windows_event_log\") w",
+ 	"here cache[\"value\"] == nil\n      - set(attributes[\"gcp.log_name\"",
+ 	`], cache["value"]) where (cache != nil and cache["value"] != nil`,
+ 	")\n  transform/windows__event__log_1_0:\n    error_mode: ignore\n  ",
+ 	"  log_statements:\n    - context: log\n      statements:\n      - d",
+ 	`elete_key(cache, "__field_0") where (cache != nil and cache["__f`,
+ 	"ield_0\"] != nil)\n      - set(cache[\"__field_0\"], body[\"channel\"]",
+ 	") where (body != nil and body[\"channel\"] != nil)\n      - delete_",
+ 	`key(cache, "__field_1") where (cache != nil and cache["__field_1`,
+ 	"\"] != nil)\n      - set(cache[\"__field_1\"], body[\"computer\"]) whe",
+ 	"re (body != nil and body[\"computer\"] != nil)\n      - delete_key(",
+ 	`cache, "__field_2") where (cache != nil and cache["__field_2"] !`,
+ 	"= nil)\n      - set(cache[\"__field_2\"], body[\"event_data\"][\"binar",
+ 	`y"]) where (body != nil and body["event_data"] != nil and body["`,
+ 	"event_data\"][\"binary\"] != nil)\n      - delete_key(cache, \"__fiel",
+ 	"d_3\") where (cache != nil and cache[\"__field_3\"] != nil)\n      -",
+ 	` set(cache["__field_3"], body["event_id"]["id"]) where (body != `,
+ 	`nil and body["event_id"] != nil and body["event_id"]["id"] != ni`,
+ 	"l)\n      - delete_key(cache, \"__field_4\") where (cache != nil an",
+ 	"d cache[\"__field_4\"] != nil)\n      - set(cache[\"__field_4\"], bod",
+ 	"y[\"level\"]) where (body != nil and body[\"level\"] != nil)\n      -",
+ 	` delete_key(cache, "__field_5") where (cache != nil and cache["_`,
+ 	"_field_5\"] != nil)\n      - set(cache[\"__field_5\"], body[\"message",
+ 	"\"]) where (body != nil and body[\"message\"] != nil)\n      - delet",
+ 	`e_key(cache, "__field_6") where (cache != nil and cache["__field`,
+ 	"_6\"] != nil)\n      - set(cache[\"__field_6\"], body[\"event_id\"][\"q",
+ 	`ualifiers"]) where (body != nil and body["event_id"] != nil and `,
+ 	"body[\"event_id\"][\"qualifiers\"] != nil)\n      - delete_key(cache,",
+ 	` "__field_7") where (cache != nil and cache["__field_7"] != nil)`,
+ 	"\n      - set(cache[\"__field_7\"], body[\"record_id\"]) where (body ",
+ 	"!= nil and body[\"record_id\"] != nil)\n      - delete_key(cache, \"",
+ 	"__field_8\") where (cache != nil and cache[\"__field_8\"] != nil)\n ",
+ 	`     - set(cache["__field_8"], body["security"]["user_id"]) wher`,
+ 	`e (body != nil and body["security"] != nil and body["security"][`,
+ 	"\"user_id\"] != nil)\n      - delete_key(cache, \"__field_9\") where ",
+ 	"(cache != nil and cache[\"__field_9\"] != nil)\n      - set(cache[\"",
+ 	`__field_9"], body["provider"]["name"]) where (body != nil and bo`,
+ 	"dy[\"provider\"] != nil and body[\"provider\"][\"name\"] != nil)\n     ",
+ 	` - delete_key(cache, "__field_10") where (cache != nil and cache`,
+ 	"[\"__field_10\"] != nil)\n      - set(cache[\"__field_10\"], body[\"ev",
+ 	`ent_data"]["data"]) where (body != nil and body["event_data"] !=`,
+ 	" nil and body[\"event_data\"][\"data\"] != nil)\n      - delete_key(c",
+ 	`ache, "__field_11") where (cache != nil and cache["__field_11"] `,
+ 	"!= nil)\n      - set(cache[\"__field_11\"], body[\"system_time\"]) wh",
+ 	"ere (body != nil and body[\"system_time\"] != nil)\n      - set(cac",
+ 	"he[\"body\"], body)\n      - keep_keys(body, [])\n      - delete_key",
+ 	"(cache, \"value\") where (cache != nil and cache[\"value\"] != nil)\n",
+ 	"      - set(cache[\"value\"], cache[\"__field_0\"])\n      - set(body",
+ 	`["Channel"], cache["value"]) where (cache != nil and cache["valu`,
+ 	"e\"] != nil)\n      - delete_key(cache, \"value\") where (cache != n",
+ 	"il and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[",
+ 	"\"__field_1\"])\n      - set(body[\"ComputerName\"], cache[\"value\"]) ",
+ 	"where (cache != nil and cache[\"value\"] != nil)\n      - delete_ke",
+ 	`y(cache, "value") where (cache != nil and cache["value"] != nil)`,
+ 	"\n      - set(cache[\"value\"], cache[\"__field_2\"])\n      - set(cac",
+ 	"he[\"value\"], \"\") where cache[\"value\"] == nil\n      - set(cache[\"",
+ 	"value\"], ConvertCase(cache[\"value\"], \"lower\"))\n      - set(body[",
+ 	`"Data"], cache["value"]) where (cache != nil and cache["value"] `,
+ 	"!= nil)\n      - delete_key(cache, \"value\") where (cache != nil a",
+ 	"nd cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__f",
+ 	"ield_3\"])\n      - set(body[\"EventID\"], cache[\"value\"]) where (ca",
+ 	"che != nil and cache[\"value\"] != nil)\n      - delete_key(cache, ",
+ 	"\"value\") where (cache != nil and cache[\"value\"] != nil)\n      - ",
+ 	"set(cache[\"value\"], cache[\"__field_4\"])\n      - set(cache[\"value",
+ 	`"], "SuccessAudit") where ((cache != nil and cache["body"] != ni`,
+ 	`l and cache["body"]["keywords"] != nil) and cache["body"]["keywo`,
+ 	`rds"][0] != nil and cache["body"]["keywords"][0] == "Audit Succe`,
+ 	"ss\")\n      - set(cache[\"value\"], \"FailureAudit\") where ((cache !",
+ 	`= nil and cache["body"] != nil and cache["body"]["keywords"] != `,
+ 	`nil) and cache["body"]["keywords"][0] != nil and cache["body"]["`,
+ 	"keywords\"][0] == \"Audit Failure\")\n      - set(body[\"EventType\"],",
+ 	" cache[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n",
+ 	`      - delete_key(cache, "value") where (cache != nil and cache`,
+ 	"[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_5\"]",
+ 	")\n      - set(body[\"Message\"], cache[\"value\"]) where (cache != n",
+ 	"il and cache[\"value\"] != nil)\n      - delete_key(cache, \"value\")",
+ 	" where (cache != nil and cache[\"value\"] != nil)\n      - set(cach",
+ 	"e[\"value\"], cache[\"__field_6\"])\n      - set(body[\"Qualifiers\"], ",
+ 	"cache[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n ",
+ 	`     - delete_key(cache, "value") where (cache != nil and cache[`,
+ 	"\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_7\"])",
+ 	"\n      - set(body[\"RecordNumber\"], cache[\"value\"]) where (cache ",
+ 	"!= nil and cache[\"value\"] != nil)\n      - delete_key(cache, \"val",
+ 	"ue\") where (cache != nil and cache[\"value\"] != nil)\n      - set(",
+ 	"cache[\"value\"], cache[\"__field_8\"])\n      - set(cache[\"value\"], ",
+ 	"\"\") where cache[\"value\"] == nil\n      - set(body[\"Sid\"], cache[\"",
+ 	"value\"]) where (cache != nil and cache[\"value\"] != nil)\n      - ",
+ 	`delete_key(cache, "value") where (cache != nil and cache["value"`,
+ 	"] != nil)\n      - set(cache[\"value\"], cache[\"__field_9\"])\n      ",
+ 	`- set(cache["value"], cache["body"]["provider"]["event_source"])`,
+ 	` where ((cache != nil and cache["body"] != nil and cache["body"]`,
+ 	`["provider"] != nil and cache["body"]["provider"]["event_source"`,
+ 	`] != nil) and (not cache["body"]["provider"]["event_source"] == `,
+ 	"\"\"))\n      - set(body[\"SourceName\"], cache[\"value\"]) where (cach",
+ 	"e != nil and cache[\"value\"] != nil)\n      - delete_key(cache, \"v",
+ 	"alue\") where (cache != nil and cache[\"value\"] != nil)\n      - se",
+ 	"t(cache[\"value\"], cache[\"__field_10\"])\n      - set(cache[\"value\"",
+ 	"], ToValues(cache[\"value\"]))\n      - set(body[\"StringInserts\"], ",
+ 	"cache[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n ",
+ 	`     - delete_key(cache, "value") where (cache != nil and cache[`,
+ 	"\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_11\"]",
+ 	")\n      - set(cache[\"value\"], FormatTime(Time(cache[\"value\"], \"%",
+ 	"Y-%m-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n      - set(body[\"Tim",
+ 	`eGenerated"], cache["value"]) where (cache != nil and cache["val`,
+ 	"ue\"] != nil)\n      - delete_key(cache, \"value\") where (cache != ",
+ 	"nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache",
+ 	"[\"__field_11\"])\n      - set(cache[\"value\"], FormatTime(Time(cach",
+ 	"e[\"value\"], \"%Y-%m-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n      -",
+ 	` set(body["TimeWritten"], cache["value"]) where (cache != nil an`,
+ 	"d cache[\"value\"] != nil)\n  transform/windows__event__log_1_1:\n  ",
+ 	"  error_mode: ignore\n    log_statements:\n    - context: log\n    ",
+ 	"  statements:\n      - delete_key(cache, \"__field_0\") where (cach",
+ 	"e != nil and cache[\"__field_0\"] != nil)\n      - set(cache[\"__fie",
+ 	`ld_0"], attributes["compute.googleapis.com/instance_group_manage`,
+ 	`r/name"]) where (attributes != nil and attributes["compute.googl`,
+ 	"eapis.com/instance_group_manager/name\"] != nil)\n      - delete_k",
+ 	`ey(cache, "__field_1") where (cache != nil and cache["__field_1"`,
+ 	"] != nil)\n      - set(cache[\"__field_1\"], attributes[\"compute.go",
+ 	`ogleapis.com/instance_group_manager/zone"]) where (attributes !=`,
+ 	` nil and attributes["compute.googleapis.com/instance_group_manag`,
+ 	"er/zone\"] != nil)\n      - delete_key(cache, \"__field_2\") where (",
+ 	"cache != nil and cache[\"__field_2\"] != nil)\n      - set(cache[\"_",
+ 	`_field_2"], attributes["compute.googleapis.com/resource_name"]) `,
+ 	`where (attributes != nil and attributes["compute.googleapis.com/`,
+ 	"resource_name\"] != nil)\n      - delete_key(cache, \"__field_3\") w",
+ 	"here (cache != nil and cache[\"__field_3\"] != nil)\n      - set(ca",
+ 	`che["__field_3"], attributes["gcp.log_name"]) where (attributes `,
+ 	"!= nil and attributes[\"gcp.log_name\"] != nil)\n      - delete_key",
+ 	"(cache, \"value\") where (cache != nil and cache[\"value\"] != nil)\n",
+ 	"      - set(cache[\"value\"], cache[\"__field_0\"])\n      - set(cach",
+ 	"e[\"value\"], \"test-mig\") where cache[\"value\"] == nil\n      - set(",
+ 	`attributes["compute.googleapis.com/instance_group_manager/name"]`,
+ 	`, cache["value"]) where (cache != nil and cache["value"] != nil)`,
+ 	"\n      - delete_key(cache, \"value\") where (cache != nil and cach",
+ 	"e[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_1\"",
+ 	"])\n      - set(cache[\"value\"], \"test-zone\") where cache[\"value\"]",
+ 	" == nil\n      - set(attributes[\"compute.googleapis.com/instance_",
+ 	`group_manager/zone"], cache["value"]) where (cache != nil and ca`,
+ 	"che[\"value\"] != nil)\n      - delete_key(cache, \"value\") where (c",
+ 	"ache != nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"",
+ 	"], cache[\"__field_2\"])\n      - set(cache[\"value\"], \"\") where cac",
+ 	"he[\"value\"] == nil\n      - set(attributes[\"compute.googleapis.co",
+ 	`m/resource_name"], cache["value"]) where (cache != nil and cache`,
+ 	"[\"value\"] != nil)\n      - delete_key(cache, \"value\") where (cach",
+ 	"e != nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"], ",
+ 	"cache[\"__field_3\"])\n      - set(cache[\"value\"], \"windows_event_l",
+ 	"og\") where cache[\"value\"] == nil\n      - set(attributes[\"gcp.log",
+ 	`_name"], cache["value"]) where (cache != nil and cache["value"] `,
+ 	"!= nil)\n  transform/windows__event__log_2_0:\n    error_mode: ign",
+ 	"ore\n    log_statements:\n    - context: log\n      statements:\n   ",
+ 	`   - delete_key(cache, "__field_0") where (cache != nil and cach`,
+ 	"e[\"__field_0\"] != nil)\n      - set(cache[\"__field_0\"], body[\"cha",
+ 	"nnel\"]) where (body != nil and body[\"channel\"] != nil)\n      - d",
+ 	`elete_key(cache, "__field_1") where (cache != nil and cache["__f`,
+ 	"ield_1\"] != nil)\n      - set(cache[\"__field_1\"], body[\"computer\"",
+ 	"]) where (body != nil and body[\"computer\"] != nil)\n      - delet",
+ 	`e_key(cache, "__field_2") where (cache != nil and cache["__field`,
+ 	"_2\"] != nil)\n      - set(cache[\"__field_2\"], body[\"event_data\"][",
+ 	`"binary"]) where (body != nil and body["event_data"] != nil and `,
+ 	"body[\"event_data\"][\"binary\"] != nil)\n      - delete_key(cache, \"",
+ 	"__field_3\") where (cache != nil and cache[\"__field_3\"] != nil)\n ",
+ 	`     - set(cache["__field_3"], body["event_id"]["id"]) where (bo`,
+ 	`dy != nil and body["event_id"] != nil and body["event_id"]["id"]`,
+ 	" != nil)\n      - delete_key(cache, \"__field_4\") where (cache != ",
+ 	"nil and cache[\"__field_4\"] != nil)\n      - set(cache[\"__field_4\"",
+ 	"], body[\"level\"]) where (body != nil and body[\"level\"] != nil)\n ",
+ 	`     - delete_key(cache, "__field_5") where (cache != nil and ca`,
+ 	"che[\"__field_5\"] != nil)\n      - set(cache[\"__field_5\"], body[\"m",
+ 	"essage\"]) where (body != nil and body[\"message\"] != nil)\n      -",
+ 	` delete_key(cache, "__field_6") where (cache != nil and cache["_`,
+ 	"_field_6\"] != nil)\n      - set(cache[\"__field_6\"], body[\"event_i",
+ 	`d"]["qualifiers"]) where (body != nil and body["event_id"] != ni`,
+ 	"l and body[\"event_id\"][\"qualifiers\"] != nil)\n      - delete_key(",
+ 	`cache, "__field_7") where (cache != nil and cache["__field_7"] !`,
+ 	"= nil)\n      - set(cache[\"__field_7\"], body[\"record_id\"]) where ",
+ 	"(body != nil and body[\"record_id\"] != nil)\n      - delete_key(ca",
+ 	`che, "__field_8") where (cache != nil and cache["__field_8"] != `,
+ 	"nil)\n      - set(cache[\"__field_8\"], body[\"security\"][\"user_id\"]",
+ 	`) where (body != nil and body["security"] != nil and body["secur`,
+ 	"ity\"][\"user_id\"] != nil)\n      - delete_key(cache, \"__field_9\") ",
+ 	"where (cache != nil and cache[\"__field_9\"] != nil)\n      - set(c",
+ 	`ache["__field_9"], body["provider"]["name"]) where (body != nil `,
+ 	`and body["provider"] != nil and body["provider"]["name"] != nil)`,
+ 	"\n      - delete_key(cache, \"__field_10\") where (cache != nil and",
+ 	" cache[\"__field_10\"] != nil)\n      - set(cache[\"__field_10\"], bo",
+ 	`dy["event_data"]["data"]) where (body != nil and body["event_dat`,
+ 	"a\"] != nil and body[\"event_data\"][\"data\"] != nil)\n      - delete",
+ 	`_key(cache, "__field_11") where (cache != nil and cache["__field`,
+ 	"_11\"] != nil)\n      - set(cache[\"__field_11\"], body[\"system_time",
+ 	"\"]) where (body != nil and body[\"system_time\"] != nil)\n      - s",
+ 	"et(cache[\"body\"], body)\n      - keep_keys(body, [])\n      - dele",
+ 	`te_key(cache, "value") where (cache != nil and cache["value"] !=`,
+ 	" nil)\n      - set(cache[\"value\"], cache[\"__field_0\"])\n      - se",
+ 	`t(body["Channel"], cache["value"]) where (cache != nil and cache`,
+ 	"[\"value\"] != nil)\n      - delete_key(cache, \"value\") where (cach",
+ 	"e != nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"], ",
+ 	"cache[\"__field_1\"])\n      - set(body[\"ComputerName\"], cache[\"val",
+ 	"ue\"]) where (cache != nil and cache[\"value\"] != nil)\n      - del",
+ 	`ete_key(cache, "value") where (cache != nil and cache["value"] !`,
+ 	"= nil)\n      - set(cache[\"value\"], cache[\"__field_2\"])\n      - s",
+ 	"et(cache[\"value\"], \"\") where cache[\"value\"] == nil\n      - set(c",
+ 	"ache[\"value\"], ConvertCase(cache[\"value\"], \"lower\"))\n      - set",
+ 	`(body["Data"], cache["value"]) where (cache != nil and cache["va`,
+ 	"lue\"] != nil)\n      - delete_key(cache, \"value\") where (cache !=",
+ 	" nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"], cach",
+ 	"e[\"__field_3\"])\n      - set(body[\"EventID\"], cache[\"value\"]) whe",
+ 	"re (cache != nil and cache[\"value\"] != nil)\n      - delete_key(c",
+ 	"ache, \"value\") where (cache != nil and cache[\"value\"] != nil)\n  ",
+ 	"    - set(cache[\"value\"], cache[\"__field_4\"])\n      - set(cache[",
+ 	`"value"], "SuccessAudit") where ((cache != nil and cache["body"]`,
+ 	` != nil and cache["body"]["keywords"] != nil) and cache["body"][`,
+ 	`"keywords"][0] != nil and cache["body"]["keywords"][0] == "Audit`,
+ 	" Success\")\n      - set(cache[\"value\"], \"FailureAudit\") where ((c",
+ 	`ache != nil and cache["body"] != nil and cache["body"]["keywords`,
+ 	`"] != nil) and cache["body"]["keywords"][0] != nil and cache["bo`,
+ 	"dy\"][\"keywords\"][0] == \"Audit Failure\")\n      - set(body[\"EventT",
+ 	`ype"], cache["value"]) where (cache != nil and cache["value"] !=`,
+ 	" nil)\n      - delete_key(cache, \"value\") where (cache != nil and",
+ 	" cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__fie",
+ 	"ld_5\"])\n      - set(body[\"Message\"], cache[\"value\"]) where (cach",
+ 	"e != nil and cache[\"value\"] != nil)\n      - delete_key(cache, \"v",
+ 	"alue\") where (cache != nil and cache[\"value\"] != nil)\n      - se",
+ 	"t(cache[\"value\"], cache[\"__field_6\"])\n      - set(body[\"Qualifie",
+ 	`rs"], cache["value"]) where (cache != nil and cache["value"] != `,
+ 	"nil)\n      - delete_key(cache, \"value\") where (cache != nil and ",
+ 	"cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__fiel",
+ 	"d_7\"])\n      - set(body[\"RecordNumber\"], cache[\"value\"]) where (",
+ 	"cache != nil and cache[\"value\"] != nil)\n      - delete_key(cache",
+ 	", \"value\") where (cache != nil and cache[\"value\"] != nil)\n      ",
+ 	"- set(cache[\"value\"], cache[\"__field_8\"])\n      - set(cache[\"val",
+ 	"ue\"], \"\") where cache[\"value\"] == nil\n      - set(body[\"Sid\"], c",
+ 	"ache[\"value\"]) where (cache != nil and cache[\"value\"] != nil)\n  ",
+ 	`    - delete_key(cache, "value") where (cache != nil and cache["`,
+ 	"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__field_9\"])\n",
+ 	`      - set(cache["value"], cache["body"]["provider"]["event_sou`,
+ 	`rce"]) where ((cache != nil and cache["body"] != nil and cache["`,
+ 	`body"]["provider"] != nil and cache["body"]["provider"]["event_s`,
+ 	`ource"] != nil) and (not cache["body"]["provider"]["event_source`,
+ 	"\"] == \"\"))\n      - set(body[\"SourceName\"], cache[\"value\"]) where",
+ 	" (cache != nil and cache[\"value\"] != nil)\n      - delete_key(cac",
+ 	"he, \"value\") where (cache != nil and cache[\"value\"] != nil)\n    ",
+ 	"  - set(cache[\"value\"], cache[\"__field_10\"])\n      - set(cache[\"",
+ 	"value\"], ToValues(cache[\"value\"]))\n      - set(body[\"StringInser",
+ 	`ts"], cache["value"]) where (cache != nil and cache["value"] != `,
+ 	"nil)\n      - delete_key(cache, \"value\") where (cache != nil and ",
+ 	"cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__fiel",
+ 	"d_11\"])\n      - set(cache[\"value\"], FormatTime(Time(cache[\"value",
+ 	"\"], \"%Y-%m-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n      - set(bod",
+ 	`y["TimeGenerated"], cache["value"]) where (cache != nil and cach`,
+ 	"e[\"value\"] != nil)\n      - delete_key(cache, \"value\") where (cac",
+ 	"he != nil and cache[\"value\"] != nil)\n      - set(cache[\"value\"],",
+ 	" cache[\"__field_11\"])\n      - set(cache[\"value\"], FormatTime(Tim",
+ 	"e(cache[\"value\"], \"%Y-%m-%dT%T.%sZ\"), \"%Y-%m-%d %T.%s +0000\"))\n ",
+ 	`     - set(body["TimeWritten"], cache["value"]) where (cache != `,
+ 	"nil and cache[\"value\"] != nil)\n  transform/windows__event__log_2",
+ 	"_1:\n    error_mode: ignore\n    log_statements:\n    - context: lo",
+ 	"g\n      statements:\n      - delete_key(cache, \"__field_0\") where",
+ 	" (cache != nil and cache[\"__field_0\"] != nil)\n      - set(cache[",
+ 	`"__field_0"], attributes["compute.googleapis.com/instance_group_`,
+ 	`manager/name"]) where (attributes != nil and attributes["compute`,
+ 	".googleapis.com/instance_group_manager/name\"] != nil)\n      - de",
+ 	`lete_key(cache, "__field_1") where (cache != nil and cache["__fi`,
+ 	"eld_1\"] != nil)\n      - set(cache[\"__field_1\"], attributes[\"comp",
+ 	`ute.googleapis.com/instance_group_manager/zone"]) where (attribu`,
+ 	`tes != nil and attributes["compute.googleapis.com/instance_group`,
+ 	"_manager/zone\"] != nil)\n      - delete_key(cache, \"__field_2\") w",
+ 	"here (cache != nil and cache[\"__field_2\"] != nil)\n      - set(ca",
+ 	`che["__field_2"], attributes["compute.googleapis.com/resource_na`,
+ 	`me"]) where (attributes != nil and attributes["compute.googleapi`,
+ 	"s.com/resource_name\"] != nil)\n      - delete_key(cache, \"__field",
+ 	"_3\") where (cache != nil and cache[\"__field_3\"] != nil)\n      - ",
+ 	`set(cache["__field_3"], attributes["gcp.log_name"]) where (attri`,
+ 	"butes != nil and attributes[\"gcp.log_name\"] != nil)\n      - dele",
+ 	`te_key(cache, "value") where (cache != nil and cache["value"] !=`,
+ 	" nil)\n      - set(cache[\"value\"], cache[\"__field_0\"])\n      - se",
+ 	"t(cache[\"value\"], \"test-mig\") where cache[\"value\"] == nil\n      ",
+ 	`- set(attributes["compute.googleapis.com/instance_group_manager/`,
+ 	`name"], cache["value"]) where (cache != nil and cache["value"] !`,
+ 	"= nil)\n      - delete_key(cache, \"value\") where (cache != nil an",
+ 	"d cache[\"value\"] != nil)\n      - set(cache[\"value\"], cache[\"__fi",
+ 	"eld_1\"])\n      - set(cache[\"value\"], \"test-zone\") where cache[\"v",
+ 	"alue\"] == nil\n      - set(attributes[\"compute.googleapis.com/ins",
+ 	`tance_group_manager/zone"], cache["value"]) where (cache != nil `,
+ 	"and cache[\"value\"] != nil)\n      - delete_key(cache, \"value\") wh",
+ 	"ere (cache != nil and cache[\"value\"] != nil)\n      - set(cache[\"",
+ 	"value\"], cache[\"__field_2\"])\n      - set(cache[\"value\"], \"\") whe",
+ 	"re cache[\"value\"] == nil\n      - set(attributes[\"compute.googlea",
+ 	`pis.com/resource_name"], cache["value"]) where (cache != nil and`,
+ 	" cache[\"value\"] != nil)\n      - delete_key(cache, \"value\") where",
+ 	" (cache != nil and cache[\"value\"] != nil)\n      - set(cache[\"val",
+ 	"ue\"], cache[\"__field_3\"])\n      - set(cache[\"value\"], \"windows_e",
+ 	"vent_log\") where cache[\"value\"] == nil\n      - set(attributes[\"g",
+ 	`cp.log_name"], cache["value"]) where (cache != nil and cache["va`,
+ 	"lue\"] != nil)\nreceivers:\n  hostmetrics/hostmetrics:\n    collecti",
+ 	"on_interval: 60s\n    scrapers:\n      cpu: {}\n      disk: {}\n    ",
+ 	"  filesystem: {}\n      load: {}\n      memory: {}\n      network: ",
+ 	"{}\n      paging: {}\n      process:\n        metrics:\n          pr",
+ 	"ocess.handles:\n            enabled: true\n        mute_process_al",
+ 	"l_errors: true\n        mute_process_exe_error: true\n        mute",
+ 	"_process_name_error: true\n      processes: {}\n  otlpjsonfile/ops",
+ 	"_agent:\n    include:\n    - enabled_receivers_otlp.json\n    - fea",
+ 	"ture_tracking_otlp.json\n    poll_interval: 1m0s\n    replay_file:",
+ 	" true\n  prometheus/agent_prometheus:\n    config:\n      scrape_co",
+ 	"nfigs:\n      - job_name: logging-collector\n        metrics_path:",
+ 	" /metrics\n        scrape_interval: 1m\n        static_configs:\n  ",
+ 	"      - targets:\n          - 0.0.0.0:20202\n      - job_name: ote",
+ 	"l-collector\n        scrape_interval: 1m\n        static_configs:\n",
+ 	"        - targets:\n          - 0.0.0.0:20201\n  sqlquery/oracledb",
+ 	":\n    collection_interval: 60s\n    datasource: oracle://@localho",
+ 	"st:1521/?SID=db19c\n    driver: oracle\n    queries:\n    - metrics",
+ 	":\n      - attribute_columns:\n        - DATABASE_ID\n        - GLO",
+ 	"BAL_NAME\n        - TABLESPACE_NAME\n        - CONTENTS\n        da",
+ 	"ta_type: sum\n        description: The size of tablespaces in the",
+ 	" database.\n        metric_name: oracle.tablespace.size\n        m",
+ 	"onotonic: false\n        static_attributes:\n          db.system: ",
+ 	"oracle\n          state: free\n        unit: by\n        value_colu",
+ 	"mn: FREE_SPACE\n        value_type: int\n      - attribute_columns",
+ 	":\n        - DATABASE_ID\n        - GLOBAL_NAME\n        - TABLESPA",
+ 	"CE_NAME\n        - CONTENTS\n        data_type: sum\n        descri",
+ 	"ption: The size of tablespaces in the database.\n        metric_n",
+ 	"ame: oracle.tablespace.size\n        monotonic: false\n        sta",
+ 	"tic_attributes:\n          db.system: oracle\n          state: use",
+ 	"d\n        unit: by\n        value_column: USED_SPACE\n        valu",
+ 	"e_type: int\n      sql: \"SELECT (SELECT DBID FROM SYS.GV_$$DATABA",
+ 	"SE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBA",
+ 	`L_NAME, ts.TABLESPACE_NAME, ts.CONTENTS,\n\t\t\t\t(select sum(df`,
+ 	".bytes) from sys.dba_data_files df where df.tablespace_name=ts.t",
+ 	"ablespace_name)-(select sum(fs.bytes) from sys.dba_free_space fs",
+ 	` where fs.tablespace_name=ts.tablespace_name) AS USED_SPACE,\n\t`,
+ 	`\t\t\t(select sum(fs.bytes) from sys.dba_free_space fs where fs.`,
+ 	`tablespace_name=ts.tablespace_name) AS FREE_SPACE\n\t\t\tFROM sy`,
+ 	`s.dba_tablespaces ts\n\t\t\tWHERE ts.contents <> 'TEMPORARY'\n\t`,
+ 	`\t\tUNION ALL\n\t\t\tSELECT (SELECT DBID FROM SYS.GV_$$DATABASE)`,
+ 	" DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_N",
+ 	`AME, ts.NAME TABLESPACE_NAME, 'TEMPORARY' as CONTENTS,\n\t\t\t\t`,
+ 	`\tSUM(ss.USED_BLOCKS * t.BLOCK_SIZE) USED_SPACE,\n\t\t\t\t\tSUM(`,
+ 	`t.BYTES) - SUM(ss.USED_BLOCKS * t.BLOCK_SIZE) FREE_SPACE\n\t\t\t`,
+ 	`FROM SYS.V_$$sort_segment ss\n\t\t\tJOIN sys.v_$$tablespace ts\n`,
+ 	`\t\t\tON ss.TABLESPACE_NAME = ts.NAME\n\t\t\tJOIN sys.v_$$tempfi`,
+ 	"le t\\n\\t\\t\\tON t.TS# = ss.TS#\\n\\t\\t\\tGROUP BY ts.NAME\"\n    - met",
+ 	"rics:\n      - attribute_columns:\n        - DATABASE_ID\n        -",
+ 	" GLOBAL_NAME\n        - STATUS\n        - CONTENTS\n        data_ty",
+ 	"pe: sum\n        description: The number of tablespaces in the da",
+ 	"tabase.\n        metric_name: oracle.tablespace.count\n        mon",
+ 	"otonic: false\n        static_attributes:\n          db.system: or",
+ 	"acle\n        unit: \"{tablespaces}\"\n        value_column: COUNT\n ",
+ 	"       value_type: int\n      sql: SELECT (SELECT DBID FROM SYS.G",
+ 	"V_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_N",
+ 	"AME) GLOBAL_NAME, CONTENTS, STATUS, COUNT(*) COUNT FROM sys.dba_",
+ 	"tablespaces GROUP BY STATUS, CONTENTS\n    - metrics:\n      - att",
+ 	"ribute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n    ",
+ 	"    data_type: sum\n        description: The number of seconds si",
+ 	"nce the last RMAN backup.\n        metric_name: oracle.backup.lat",
+ 	"est\n        monotonic: true\n        static_attributes:\n         ",
+ 	" db.system: oracle\n        unit: s\n        value_column: LATEST_",
+ 	"BACKUP\n        value_type: int\n      sql: SELECT (SELECT DBID FR",
+ 	"OM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME FROM sys.",
+ 	"GLOBAL_NAME) GLOBAL_NAME, (SELECT round(case when max(start_time",
+ 	") is null then -1 when sysdate - max(start_time) > 0 then (sysda",
+ 	"te - max(start_time)) * 86400 else 0 end) FROM SYS.V_$$rman_back",
+ 	"up_job_details ) LATEST_BACKUP FROM DUAL\n    - metrics:\n      - ",
+ 	"attribute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n ",
+ 	"       - INSTANCE_ID\n        data_type: sum\n        description:",
+ 	" The current number of processes.\n        metric_name: oracle.pr",
+ 	"ocess.count\n        monotonic: false\n        static_attributes:\n",
+ 	"          db.system: oracle\n        unit: \"{processes}\"\n        ",
+ 	"value_column: PROCESSES_UTIL\n        value_type: int\n      - att",
+ 	"ribute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n    ",
+ 	"    - INSTANCE_ID\n        data_type: sum\n        description: Th",
+ 	"e maximum number of processes allowed.\n        metric_name: orac",
+ 	"le.process.limit\n        monotonic: false\n        static_attribu",
+ 	"tes:\n          db.system: oracle\n        unit: \"{processes}\"\n   ",
+ 	"     value_column: PROCESSES_LIMIT_VAL\n        value_type: int\n ",
+ 	"     - attribute_columns:\n        - DATABASE_ID\n        - GLOBAL",
+ 	"_NAME\n        - INSTANCE_ID\n        data_type: sum\n        descr",
+ 	"iption: The current number of sessions.\n        metric_name: ora",
+ 	"cle.session.count\n        monotonic: false\n        static_attrib",
+ 	"utes:\n          db.system: oracle\n        unit: \"{sessions}\"\n   ",
+ 	"     value_column: SESSIONS_UTIL\n        value_type: int\n      -",
+ 	" attribute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n",
+ 	"        - INSTANCE_ID\n        data_type: sum\n        description",
+ 	": The maximum number of sessions allowed.\n        metric_name: o",
+ 	"racle.session.limit\n        monotonic: false\n        static_attr",
+ 	"ibutes:\n          db.system: oracle\n        unit: \"{sessions}\"\n ",
+ 	"       value_column: SESSIONS_LIMIT_VAL\n        value_type: int\n",
+ 	"      sql: |-\n        SELECT DATABASE_ID, GLOBAL_NAME, INST_ID I",
+ 	"NSTANCE_ID, MAX(PROCESSES_UTIL) PROCESSES_UTIL, MAX(PROCESSES_LI",
+ 	"MIT_VAL) PROCESSES_LIMIT_VAL, MAX(SESSIONS_UTIL) SESSIONS_UTIL, ",
+ 	"MAX(SESSIONS_LIMIT_VAL) SESSIONS_LIMIT_VAL\n        \t\t\tFROM (SELE",
+ 	"CT (SELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLO",
+ 	"BAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, INST_ID, PROCESSES_U",
+ 	"TIL, PROCESSES_LIMIT_VAL, SESSIONS_UTIL, SESSIONS_LIMIT_VAL\n    ",
+ 	"    \t\t\tFROM (SELECT * FROM SYS.GV_$$resource_limit\n        \t\t\t\tW",
+ 	"HERE RESOURCE_NAME IN ('processes', 'sessions'))\n        \t\t\t\tPIV",
+ 	"OT(\n        \t\t\t\t\tMAX(TRIM(CURRENT_UTILIZATION)) UTIL,\n        \t\t",
+ 	"\t\t\tMAX(TRIM(LIMIT_VALUE)) LIMIT_VAL\n        \t\t\t\t\tFOR RESOURCE_NA",
+ 	"ME\n        \t\t\t\t\tIN (\n        \t\t\t\t\t\t'processes' PROCESSES,\n      ",
+ 	"  \t\t\t\t\t\t'sessions' SESSIONS\n        \t\t\t\t\t)\n        \t\t\t\t)\n       ",
+ 	" \t\t\t)\n        \t\t\tGROUP BY DATABASE_ID, GLOBAL_NAME, INST_ID\n    ",
+ 	"- metrics:\n      - attribute_columns:\n        - DATABASE_ID\n    ",
+ 	"    - GLOBAL_NAME\n        - INSTANCE_ID\n        - PROGRAM\n      ",
+ 	"  data_type: sum\n        description: The programmable global ar",
+ 	"ea memory allocated by process.\n        metric_name: oracle.proc",
+ 	"ess.pga_memory.size\n        monotonic: false\n        static_attr",
+ 	"ibutes:\n          db.system: oracle\n          state: used\n      ",
+ 	"  unit: by\n        value_column: USED_MEM\n        value_type: in",
+ 	"t\n      - attribute_columns:\n        - DATABASE_ID\n        - GLO",
+ 	"BAL_NAME\n        - INSTANCE_ID\n        - PROGRAM\n        data_ty",
+ 	"pe: sum\n        description: The programmable global area memory",
+ 	" allocated by process.\n        metric_name: oracle.process.pga_m",
+ 	"emory.size\n        monotonic: false\n        static_attributes:\n ",
+ 	"         db.system: oracle\n          state: free\n        unit: b",
+ 	"y\n        value_column: FREE_MEM\n        value_type: int\n      s",
+ 	"ql: SELECT (SELECT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SE",
+ 	"LECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME, INST_ID INST",
+ 	"ANCE_ID, PROGRAM, SUM(PGA_USED_MEM) USED_MEM, SUM(PGA_ALLOC_MEM)",
+ 	" - SUM(PGA_USED_MEM) FREE_MEM FROM SYS.GV_$$PROCESS WHERE PROGRA",
+ 	"M <> 'PSEUDO' GROUP BY PROGRAM, INST_ID\n    - metrics:\n      - a",
+ 	"ttribute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n  ",
+ 	"      - INSTANCE_ID\n        - WAIT_CLASS\n        data_type: sum\n",
+ 	"        description: The number of wait events experienced.\n    ",
+ 	"    metric_name: oracle.wait.count\n        monotonic: true\n     ",
+ 	"   static_attributes:\n          db.system: oracle\n          type",
+ 	": foreground\n        unit: \"{events}\"\n        value_column: TOTA",
+ 	"L_WAITS_FG\n        value_type: int\n      - attribute_columns:\n  ",
+ 	"      - DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n",
+ 	"        - WAIT_CLASS\n        data_type: sum\n        description:",
+ 	" The number of wait events experienced.\n        metric_name: ora",
+ 	"cle.wait.count\n        monotonic: true\n        static_attributes",
+ 	":\n          db.system: oracle\n          type: background\n       ",
+ 	" unit: \"{events}\"\n        value_column: TOTAL_WAITS_BG\n        v",
+ 	"alue_type: int\n      - attribute_columns:\n        - DATABASE_ID\n",
+ 	"        - GLOBAL_NAME\n        - INSTANCE_ID\n        - WAIT_CLASS",
+ 	"\n        data_type: sum\n        description: The amount of time ",
+ 	"waited for wait events.\n        metric_name: oracle.wait.time\n  ",
+ 	"      monotonic: true\n        static_attributes:\n          db.sy",
+ 	"stem: oracle\n          type: foreground\n        unit: cs\n       ",
+ 	" value_column: TIME_WAITED_FG\n        value_type: int\n      - at",
+ 	"tribute_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n   ",
+ 	"     - INSTANCE_ID\n        - WAIT_CLASS\n        data_type: sum\n ",
+ 	"       description: The amount of time waited for wait events.\n ",
+ 	"       metric_name: oracle.wait.time\n        monotonic: true\n   ",
+ 	"     static_attributes:\n          db.system: oracle\n          ty",
+ 	"pe: background\n        unit: cs\n        value_column: TIME_WAITE",
+ 	"D_BG\n        value_type: int\n      - attribute_columns:\n        ",
+ 	"- DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n      ",
+ 	"  - WAIT_CLASS\n        data_type: sum\n        description: The n",
+ 	"umber of timeouts for wait events.\n        metric_name: oracle.w",
+ 	"ait.timeouts\n        monotonic: true\n        static_attributes:\n",
+ 	"          db.system: oracle\n          type: foreground\n        u",
+ 	"nit: \"{timeouts}\"\n        value_column: TOTAL_TIMEOUTS_FG\n      ",
+ 	"  value_type: int\n      - attribute_columns:\n        - DATABASE_",
+ 	"ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        - WAIT_CL",
+ 	"ASS\n        data_type: sum\n        description: The number of ti",
+ 	"meouts for wait events.\n        metric_name: oracle.wait.timeout",
+ 	"s\n        monotonic: true\n        static_attributes:\n          d",
+ 	"b.system: oracle\n          type: background\n        unit: \"{time",
+ 	"outs}\"\n        value_column: TOTAL_TIMEOUTS_BG\n        value_typ",
+ 	"e: int\n      sql: SELECT (SELECT DBID FROM SYS.GV_$$DATABASE) DA",
+ 	"TABASE_ID, (SELECT GLOBAL_NAME FROM sys.GLOBAL_NAME) GLOBAL_NAME",
+ 	", INST_ID INSTANCE_ID, WAIT_CLASS, SUM(total_waits_fg) AS TOTAL_",
+ 	"WAITS_FG, SUM(total_waits)-SUM(total_waits_fg) AS TOTAL_WAITS_BG",
+ 	", SUM(total_timeouts_fg) AS TOTAL_TIMEOUTS_FG, SUM(total_timeout",
+ 	"s)-SUM(TOTAL_TIMEOUTS_FG) AS TOTAL_TIMEOUTS_BG, SUM(time_waited_",
+ 	"fg) AS TIME_WAITED_FG, SUM(time_waited)-SUM(TIME_WAITED_FG) AS T",
+ 	"IME_WAITED_BG FROM SYS.GV_$$system_event WHERE wait_class <> 'Id",
+ 	"le' GROUP BY INST_ID, WAIT_CLASS\n    - metrics:\n      - attribut",
+ 	"e_columns:\n        - DATABASE_ID\n        - GLOBAL_NAME\n        -",
+ 	" INSTANCE_ID\n        data_type: gauge\n        description: The a",
+ 	"verage sql service response time.\n        metric_name: oracle.se",
+ 	"rvice.response_time\n        static_attributes:\n          db.syst",
+ 	"em: oracle\n        unit: cs\n        value_column: RESPONSE_TIME\n",
+ 	"        value_type: double\n      - attribute_columns:\n        - ",
+ 	"DATABASE_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        ",
+ 	"data_type: gauge\n        description: Ratio of buffer cache hits",
+ 	" to requests.\n        metric_name: oracle.buffer.cache.ratio\n   ",
+ 	"     static_attributes:\n          db.system: oracle\n        unit",
+ 	": \"%\"\n        value_column: BUFFER_HIT_RATIO\n        value_type:",
+ 	" double\n      - attribute_columns:\n        - DATABASE_ID\n       ",
+ 	" - GLOBAL_NAME\n        - INSTANCE_ID\n        data_type: gauge\n  ",
+ 	"      description: Ratio of row cache hits to requests.\n        ",
+ 	"metric_name: oracle.row.cache.ratio\n        static_attributes:\n ",
+ 	"         db.system: oracle\n        unit: \"%\"\n        value_colum",
+ 	"n: ROW_HIT_RATIO\n        value_type: double\n      sql: |-\n      ",
+ 	"  SELECT DATABASE_ID, GLOBAL_NAME, INST_ID INSTANCE_ID, MAX(RESP",
+ 	"ONSE_TIME) RESPONSE_TIME, MAX(BUFFER_HIT_RATIO) BUFFER_HIT_RATIO",
+ 	", MAX(ROW_HIT_RATIO) ROW_HIT_RATIO\n        \t\t\tFROM (SELECT (SELE",
+ 	"CT DBID FROM SYS.GV_$$DATABASE) DATABASE_ID, (SELECT GLOBAL_NAME",
+ 	" FROM sys.GLOBAL_NAME) GLOBAL_NAME, INST_ID, END_TIME, RESPONSE_",
+ 	"TIME, BUFFER_HIT_RATIO, ROW_HIT_RATIO\n        \t\t\tFROM (SELECT * ",
+ 	"FROM SYS.GV_$$sysmetric\n        \t\t\t\tWHERE METRIC_NAME IN ('SQL S",
+ 	"ervice Response Time', 'Buffer Cache Hit Ratio', 'Row Cache Hit ",
+ 	"Ratio')\n        \t\t\t\tAND GROUP_ID = 2)\n        \t\t\t\tPIVOT(\n       ",
+ 	" \t\t\t\t\tMAX(VALUE)\n        \t\t\t\t\tFOR METRIC_NAME\n        \t\t\t\t\tIN (\n",
+ 	"        \t\t\t\t\t\t'SQL Service Response Time' RESPONSE_TIME,\n       ",
+ 	" \t\t\t\t\t\t'Buffer Cache Hit Ratio' BUFFER_HIT_RATIO,\n        \t\t\t\t\t\t",
+ 	"'Row Cache Hit Ratio' ROW_HIT_RATIO\n        \t\t\t\t\t)\n        \t\t\t\t)",
+ 	"\n        \t\t\t)\n        \t\t\tGROUP BY DATABASE_ID, GLOBAL_NAME, INST",
+ 	"_ID\n    - metrics:\n      - attribute_columns:\n        - DATABASE",
+ 	"_ID\n        - GLOBAL_NAME\n        - INSTANCE_ID\n        data_typ",
+ 	"e: sum\n        description: The total number of cursors.\n       ",
+ 	" metric_name: oracle.cursor.count\n        monotonic: true\n      ",
+ 	"  static_attributes:\n          db.system: oracle\n        unit: \"",
+ 	"{cursors}\"\n        value_column: CURSORS_CUMULATIVE\n        valu",
+ 	"e_type: int",
  	... // 7639 identical, 6264 removed, and 7099 inserted bytes
  }, "")
